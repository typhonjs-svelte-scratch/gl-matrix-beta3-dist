{
  "version": 3,
  "sources": ["../../src/_lib/f64/Mat2.ts", "../../src/_lib/f64/Mat2d.ts", "../../src/_lib/f64/Mat3.ts", "../../src/_lib/f64/Mat4.ts", "../../src/_lib/f64/Vec3.ts", "../../src/_lib/f64/Vec4.ts", "../../src/_lib/f64/Quat.ts", "../../src/_lib/f64/Quat2.ts", "../../src/_lib/f64/Vec2.ts"],
  "sourcesContent": ["import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2Like, Vec2Like } from '#gl-matrix/types';\n\n/**\n * A 2x2 Matrix\n */\nexport class Mat2 extends Float64Array {\n  static #IDENTITY_2X2 = new Float64Array([\n    1, 0,\n    0, 1\n  ]);\n\n  /**\n   * Create a {@link Mat2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat2Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v,\n            v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 4);\n        }\n        break;\n      default:\n        super(Mat2.#IDENTITY_2X2); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat2.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat2.str(this);\n  }\n\n  // ===================\n  // Instance methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat2} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   * @category Methods\n   */\n  copy(a: Readonly<Mat2Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat2.identity(this)\n   *\n   * @returns `this`\n   * @category Methods\n   */\n  identity(): this {\n    this.set(Mat2.#IDENTITY_2X2);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat2} against another one\n   * Equivalent to `Mat2.multiply(this, this, b);`\n   *\n   * @param b - The second operand\n   * @returns `this`\n   * @category Methods\n   */\n  multiply(b: Readonly<Mat2Like>): this {\n    return Mat2.multiply(this, this, b) as this;\n  }\n\n  /**\n   * Alias for {@link Mat2.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Transpose this {@link Mat2}\n   * Equivalent to `Mat2.transpose(this, this);`\n   *\n   * @returns `this`\n   * @category Methods\n   */\n  transpose(): this {\n    return Mat2.transpose(this, this) as this;\n  }\n\n  /**\n   * Inverts this {@link Mat2}\n   * Equivalent to `Mat4.invert(this, this);`\n   *\n   * @returns `this`\n   * @category Methods\n   */\n  invert(): this {\n    return Mat2.invert(this, this) as this;\n  }\n\n  /**\n   * Scales this {@link Mat2} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat2.scale(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   * @category Methods\n   */\n  scale(v: Readonly<Vec2Like>): this {\n    return Mat2.scale(this, this, v) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat2} by the given angle around the given axis\n   * Equivalent to `Mat2.rotate(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   * @category Methods\n   */\n  rotate(rad: number): this {\n    return Mat2.rotate(this, this, rad) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat2}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 4 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat2}\n   * @category Static\n   *\n   * @returns A new {@link Mat2}\n   */\n  static create(): Mat2 {\n    return new Mat2();\n  }\n\n  /**\n   * Creates a new {@link Mat2} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat2}\n   */\n  static clone(a: Readonly<Mat2Like>): Mat2 {\n    return new Mat2(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat2} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat2Like, a: Readonly<Mat2Like>): Mat2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat2} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat2}\n   */\n  static fromValues(...values: number[]): Mat2 {\n    return new Mat2(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat2} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat2Like, ...values: number[]): Mat2Like {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat2} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat2Like): Mat2Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose(out: Mat2Like, a: Readonly<Mat2Like>): Mat2Like {\n    // If we are transposing ourselves we can skip a few steps but have to cache\n    // some values\n    if (out === a) {\n      const a1 = a[1];\n      out[1] = a[2];\n      out[2] = a1;\n    } else {\n      out[0] = a[0];\n      out[1] = a[2];\n      out[2] = a[1];\n      out[3] = a[3];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert(out: Mat2Like, a: Mat2Like): Mat2Like | null {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n\n    // Calculate the determinant\n    let det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] = a0 * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint(out: Mat2Like, a: Mat2Like): Mat2Like {\n    // Caching this value is necessary if out == a\n    const a0 = a[0];\n    out[0] = a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a0;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat2Like>): number {\n    return a[0] * a[3] - a[2] * a[1];\n  }\n\n  /**\n   * Adds two {@link Mat2}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like { return out; }\n\n  /**\n   * Multiplies two {@link Mat2}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n  }\n  /**\n   * Alias for {@link Mat2.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like { return out; }\n\n  /**\n   * Rotates a {@link Mat2} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat2Like, a: Readonly<Mat2Like>, rad: number): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = a0 * c + a2 * s;\n    out[1] = a1 * c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat2} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat2Like, a: Readonly<Mat2Like>, v: Readonly<Vec2Like>): Mat2Like {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat2.identity(dest);\n   *   mat2.rotate(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat2Like, rad: number): Mat2Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat2.identity(dest);\n   *   mat2.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat2Like, v: Readonly<Vec2Like>): Mat2Like {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat2Like>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);\n  }\n\n  /**\n   * Multiply each element of a {@link Mat2} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat2Like, a: Readonly<Mat2Like>, b: number): Mat2Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat2}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>, scale: number): Mat2Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  }\n\n  /**\n   * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n   * @category Static\n   *\n   * @param L - the lower triangular matrix\n   * @param D - the diagonal matrix\n   * @param U - the upper triangular matrix\n   * @param a - the input matrix to factorize\n   */\n\n  static LDU(L: Mat2Like, D: Readonly<Mat2Like>, U: Mat2Like, a: Readonly<Mat2Like>):\n   [Mat2Like, Readonly<Mat2Like>, Mat2Like] {\n    L[2] = a[2] / a[0];\n    U[0] = a[0];\n    U[1] = a[1];\n    U[3] = a[3] - L[2] * U[1];\n    return [L, D, U];\n  }\n\n  /**\n   * Returns whether two {@link Mat2}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat2}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat2Like>): string {\n    return `Mat2(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat2.prototype.mul = Mat2.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nMat2.mul = Mat2.multiply;\nMat2.sub = Mat2.subtract;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2dLike, Vec2Like } from '#gl-matrix/types';\n\n/**\n * A 2x3 Matrix\n */\nexport class Mat2d extends Float64Array {\n  static #IDENTITY_2X3 = new Float64Array([\n    1, 0,\n    0, 1,\n    0, 0,\n  ]);\n\n  /**\n   * Create a {@link Mat2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat2dLike> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 6:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 6); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v,\n            v, v,\n            v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 6);\n        }\n        break;\n      default:\n        super(Mat2d.#IDENTITY_2X3); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat2d.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat2d.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat2d} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat2dLike>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat2d.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(Mat2d.#IDENTITY_2X3);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat2d} against another one\n   * Equivalent to `Mat2d.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat2dLike>): this {\n    return Mat2d.multiply(this, this, b) as this;\n  }\n\n  /**\n   * Alias for {@link Mat2d.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat2dLike>): this { return this; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Translate this {@link Mat2d} by the given vector\n   * Equivalent to `Mat2d.translate(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec2Like>): this {\n    return Mat2d.translate(this, this, v) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat2d} by the given angle around the given axis\n   * Equivalent to `Mat2d.rotate(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotate(rad: number): this {\n    return Mat2d.rotate(this, this, rad) as this;\n  }\n\n  /**\n   * Scales this {@link Mat2d} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat2d.scale(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): this {\n    return Mat2d.scale(this, this, v) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat2d}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 6 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat2d}\n   * @category Static\n   *\n   * @returns A new {@link Mat2d}\n   */\n  static create(): Mat2d {\n    return new Mat2d();\n  }\n\n  /**\n   * Creates a new {@link Mat2d} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat2d}\n   */\n  static clone(a: Readonly<Mat2dLike>): Mat2d {\n    return new Mat2d(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat2d} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat2dLike, a: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat2d} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat2d}\n   */\n  static fromValues(...values: number[]): Mat2d {\n    return new Mat2d(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat2d} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat2dLike, ...values: number[]): Mat2dLike {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat2d} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat2dLike): Mat2dLike {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat2d}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert(out: Mat2dLike, a: Mat2dLike): Mat2dLike | null {\n    const aa = a[0];\n    const ab = a[1];\n    const ac = a[2];\n    const ad = a[3];\n    const atx = a[4];\n    const aty = a[5];\n\n    let det = aa * ad - ab * ac;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat2dLike>): number {\n    return a[0] * a[3] - a[1] * a[2];\n  }\n\n  /**\n   * Adds two {@link Mat2d}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2d.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\n\n  /**\n   * Multiplies two {@link Mat2d}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2d.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\n\n  /**\n   * Translate a {@link Mat2d} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat2d} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat2dLike, a: Readonly<Mat2dLike>, rad: number): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = a0 * c + a2 * s;\n    out[1] = a1 * c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat2d} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n  }\n\n  // TODO: Got to fromRotation\n\n  /**\n   * Creates a {@link Mat2d} from a vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   Mat2d.identity(dest);\n   *   Mat2d.translate(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2d} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   Mat2d.identity(dest);\n   *   Mat2d.rotate(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat2dLike, rad: number): Mat2dLike {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2d} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   Mat2d.identity(dest);\n   *   Mat2d.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat2dLike>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + 1);\n  }\n\n  /**\n   * Multiply each element of a {@link Mat2d} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat2dLike, a: Readonly<Mat2dLike>, b: number): Mat2dLike {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat2d}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>, scale: number):\n    Mat2dLike {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether two {@link Mat2d}s have exactly the same elements in the same position (when compared with ===).\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat2d}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat2dLike>): string {\n    return `Mat2d(${a.join(', ')})`;\n  }\n}\n\n// Static method alias assignments\nMat2d.mul = Mat2d.multiply;\nMat2d.sub = Mat2d.subtract;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2dLike, Mat3Like, Mat4Like, Vec2Like, QuatLike } from '#gl-matrix/types';\n\n/**\n * A 3x3 Matrix\n */\nexport class Mat3 extends Float64Array {\n  static #IDENTITY_3X3 = new Float64Array([\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n  ]);\n\n  /**\n   * Create a {@link Mat3}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat3Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 9:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 9); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v, v,\n            v, v, v,\n            v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 9);\n        }\n        break;\n      default:\n        super(Mat3.#IDENTITY_3X3); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat3.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat3.str(this);\n  }\n\n  // ===================\n  // Instance methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat3} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat3Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat3.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(Mat3.#IDENTITY_3X3);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat3} against another one\n   * Equivalent to `Mat3.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat3Like>): this {\n    return Mat3.multiply(this, this, b) as this;\n  }\n\n  /**\n   * Alias for {@link Mat3.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Transpose this {@link Mat3}\n   * Equivalent to `Mat3.transpose(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  transpose(): this {\n    return Mat3.transpose(this, this) as this;\n  }\n\n  /**\n   * Inverts this {@link Mat3}\n   * Equivalent to `Mat4.invert(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    return Mat3.invert(this, this) as this;\n  }\n\n  /**\n   * Translate this {@link Mat3} by the given vector\n   * Equivalent to `Mat3.translate(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec2Like>): this {\n    return Mat3.translate(this, this, v) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat3} by the given angle around the given axis\n   * Equivalent to `Mat3.rotate(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotate(rad: number): this {\n    return Mat3.rotate(this, this, rad) as this;\n  }\n\n  /**\n   * Scales this {@link Mat3} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat3.scale(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): this {\n    return Mat3.scale(this, this, v) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat3}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 9 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat3}\n   * @category Static\n   *\n   * @returns A new {@link Mat3}\n   */\n  static create(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Creates a new {@link Mat3} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat3}\n   */\n  static clone(a: Readonly<Mat3Like>): Mat3 {\n    return new Mat3(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat3} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat3Like, a: Readonly<Mat3Like>): Mat3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat3} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat3}\n   */\n  static fromValues(...values: number[]): Mat3 {\n    return new Mat3(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat3} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat3Like, ...values: number[]): Mat3Like {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    out[6] = values[6];\n    out[7] = values[7];\n    out[8] = values[8];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat3} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat3Like): Mat3Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose(out: Mat3Like, a: Readonly<Mat3Like>): Mat3Like {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      const a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a01;\n      out[5] = a[7];\n      out[6] = a02;\n      out[7] = a12;\n    } else {\n      out[0] = a[0];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a[1];\n      out[4] = a[4];\n      out[5] = a[7];\n      out[6] = a[2];\n      out[7] = a[5];\n      out[8] = a[8];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert(out: Mat3Like, a: Mat3Like): Mat3Like | null {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n    const a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n    const a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint(out: Mat3Like, a: Mat3Like): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n    out[3] = a12 * a20 - a10 * a22;\n    out[4] = a00 * a22 - a02 * a20;\n    out[5] = a02 * a10 - a00 * a12;\n    out[6] = a10 * a21 - a11 * a20;\n    out[7] = a01 * a20 - a00 * a21;\n    out[8] = a00 * a11 - a01 * a10;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat3Like>): number {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    return (\n      a00 * (a22 * a11 - a12 * a21) +\n      a01 * (-a22 * a10 + a12 * a20) +\n      a02 * (a21 * a10 - a11 * a20)\n    );\n  }\n\n  /**\n   * Adds two {@link Mat3}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like { return out; }\n\n  /**\n   * Multiplies two {@link Mat3}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    let b0 = b[0];\n    let b1 = b[1];\n    let b2 = b[2];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22;\n\n    b0 = b[3];\n    b1 = b[4];\n    b2 = b[5];\n    out[3] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[4] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[5] = b0 * a02 + b1 * a12 + b2 * a22;\n\n    b0 = b[6];\n    b1 = b[7];\n    b2 = b[8];\n    out[6] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[7] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[8] = b0 * a02 + b1 * a12 + b2 * a22;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like { return out; }\n\n  /**\n   * Translate a {@link Mat3} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat3Like, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n    const x = v[0];\n    const y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat3} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat3Like, a: Readonly<Mat3Like>, rad: number): Mat3Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat3} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat3Like, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): Mat3Like {\n    const x = v[0];\n    const y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat3.identity(dest);\n   *   mat3.translate(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat3Like, v: Readonly<Vec2Like>): Mat3Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat3.identity(dest);\n   *     mat3.rotate(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat3Like, rad: number): Mat3Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat3.identity(dest);\n   *   mat3.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat3Like, v: Readonly<Vec2Like>): Mat3Like {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Copies the upper-left 3x3 values of a {@link Mat2d} into the given\n   * {@link Mat3}.\n   * @category Static\n   *\n   * @param out - the receiving 3x3 matrix\n   * @param a - the source 2x3 matrix\n   * @returns `out`\n   */\n  static fromMat2d(out: Mat3Like, a: Readonly<Mat2dLike>): Mat3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat3} from the given quaternion\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param q - {@link Quat} to create matrix from\n   * @returns `out`\n   */\n  static fromQuat(out: Mat3Like, q: Readonly<QuatLike>): Mat3Like {\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n  }\n\n  /**\n   * Copies the upper-left 3x3 values of a {@link Mat4} into the given\n   * {@link Mat3}.\n   * @category Static\n   *\n   * @param out - the receiving 3x3 matrix\n   * @param a - the source 4x4 matrix\n   * @returns `out`\n   */\n  static fromMat4(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n  }\n\n  /**\n   * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n   * @category Static\n   *\n   * @param {mat3} out mat3 receiving operation result\n   * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static normalFromMat4(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like | null {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat3} normal matrix (transpose inverse) from a {@link Mat4}\n   * This version omits the calculation of the constant factor (1/determinant), so\n   * any normals transformed with it will need to be renormalized.\n   * From https://stackoverflow.com/a/27616419/25968\n   * @category Static\n   *\n   * @param out - Matrix receiving operation result\n   * @param a - Mat4 to derive the normal matrix from\n   * @returns `out`\n   */\n  static normalFromMat4Fast(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n\n    const bx = a[4];\n    const by = a[5];\n    const bz = a[6];\n\n    const cx = a[8];\n    const cy = a[9];\n    const cz = a[10];\n\n    out[0] = by * cz - cz * cy;\n    out[1] = bz * cx - cx * cz;\n    out[2] = bx * cy - cy * cx;\n\n    out[3] = cy * az - cz * ay;\n    out[4] = cz * ax - cx * az;\n    out[5] = cx * ay - cy * ax;\n\n    out[6] = ay * bz - az * by;\n    out[7] = az * bx - ax * bz;\n    out[8] = ax * by - ay * bx;\n\n    return out;\n  }\n\n  /**\n   * Generates a 2D projection matrix with the given bounds\n   * @category Static\n   *\n   * @param out mat3 frustum matrix will be written into\n   * @param width Width of your gl context\n   * @param height Height of gl context\n   * @returns `out`\n   */\n  static projection(out: Mat3Like, width: number, height: number): Mat3Like {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat3Like>): number {\n    return Math.sqrt(\n      a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8]\n    );\n  }\n\n  /**\n   * Multiply each element of a {@link Mat3} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat3Like, a: Readonly<Mat3Like>, b: number): Mat3Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat3}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>, scale: number): Mat3Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether two {@link Mat3}s have exactly the same elements in the same position (when compared with ===).\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7] &&\n      a[8] === b[8]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat3}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const a8 = a[8];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    const b8 = b[8];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\n      Math.abs(a8 - b8) <= GLM_EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat3Like>): string {\n    return `Mat3(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat3.prototype.mul = Mat3.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nMat3.mul = Mat3.multiply;\nMat3.sub = Mat3.subtract;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat4Like, QuatLike, Quat2Like, Vec3Like } from '#gl-matrix/types';\n\n/**\n * A 4x4 Matrix\n */\nexport class Mat4 extends Float64Array {\n  static #IDENTITY_4X4 = new Float64Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n  ]);\n\n  /**\n   * Temporary variable to prevent repeated allocations in the algorithms within Mat4.\n   * These are declared as TypedArrays to aid in tree-shaking.\n   */\n  static #TMP_VEC3 = new Float64Array(3);\n\n  /**\n   * Create a {@link Mat4}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat4Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 16:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 16); break;\n      case 1:\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([\n            v, v, v, v,\n            v, v, v, v,\n            v, v, v, v,\n            v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 16);\n        }\n        break;\n      default:\n        super(Mat4.#IDENTITY_4X4); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat4.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat4.str(this);\n  }\n\n  // ===================\n  // Instance methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat4} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat4Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat4.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(Mat4.#IDENTITY_4X4);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat4} against another one\n   * Equivalent to `Mat4.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat4Like>): this {\n    return Mat4.multiply(this, this, b) as this;\n  }\n\n  /**\n   * Alias for {@link Mat4.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Transpose this {@link Mat4}\n   * Equivalent to `Mat4.transpose(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  transpose(): this {\n    return Mat4.transpose(this, this) as this;\n  }\n\n  /**\n   * Inverts this {@link Mat4}\n   * Equivalent to `Mat4.invert(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    return Mat4.invert(this, this) as this;\n  }\n\n  /**\n   * Translate this {@link Mat4} by the given vector\n   * Equivalent to `Mat4.translate(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec3} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec3Like>): this {\n    return Mat4.translate(this, this, v) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the given axis\n   * Equivalent to `Mat4.rotate(this, this, rad, axis);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `this`\n   */\n  rotate(rad: number, axis: Readonly<Vec3Like>): this {\n    return Mat4.rotate(this, this, rad, axis) as this;\n  }\n\n  /**\n   * Scales this {@link Mat4} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat4.scale(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec3} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec3Like>): this {\n    return Mat4.scale(this, this, v) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the X axis\n   * Equivalent to `Mat4.rotateX(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateX(rad: number): this {\n    return Mat4.rotateX(this, this, rad) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the Y axis\n   * Equivalent to `Mat4.rotateY(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateY(rad: number): this {\n    return Mat4.rotateY(this, this, rad) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the Z axis\n   * Equivalent to `Mat4.rotateZ(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateZ(rad: number): this {\n    return Mat4.rotateZ(this, this, rad) as this;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * Equivalent to `Mat4.perspectiveNO(this, fovy, aspect, near, far);`\n   * @category Methods\n   *\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `this`\n   */\n  perspectiveNO(fovy: number, aspect: number, near: number, far: number): this {\n    return Mat4.perspectiveNO(this, fovy, aspect, near, far) as this;\n  }\n\n  /**\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * Equivalent to `Mat4.perspectiveZO(this, fovy, aspect, near, far);`\n   * @category Methods\n   *\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `this`\n   */\n  perspectiveZO(fovy: number, aspect: number, near: number, far: number): this {\n    return Mat4.perspectiveZO(this, fovy, aspect, near, far) as this;\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Equivalent to `Mat4.orthoNO(this, left, right, bottom, top, near, far);`\n   * @category Methods\n   *\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `this`\n   */\n  orthoNO(left: number, right: number, bottom: number, top: number, near: number, far: number): this {\n    return Mat4.orthoNO(this, left, right, bottom, top, near, far) as this;\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Equivalent to `Mat4.orthoZO(this, left, right, bottom, top, near, far);`\n   * @category Methods\n   *\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `this`\n   */\n  orthoZO(left: number, right: number, bottom: number, top: number, near: number, far: number): this {\n    return Mat4.orthoZO(this, left, right, bottom, top, near, far) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat4}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 16 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat4}\n   * @category Static\n   *\n   * @returns A new {@link Mat4}\n   */\n  static create(): Mat4 {\n    return new Mat4();\n  }\n\n  /**\n   * Creates a new {@link Mat4} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat4}\n   */\n  static clone(a: Readonly<Mat4Like>): Mat4 {\n    return new Mat4(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat4} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  /**\n   * Create a new mat4 with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat4}\n   */\n  static fromValues(...values: number[]): Mat4 {\n    return new Mat4(...values);\n  }\n\n  /**\n   * Set the components of a mat4 to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat4Like, ...values: number[]): Mat4Like {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    out[6] = values[6];\n    out[7] = values[7];\n    out[8] = values[8];\n    out[9] = values[9];\n    out[10] = values[10];\n    out[11] = values[11];\n    out[12] = values[12];\n    out[13] = values[13];\n    out[14] = values[14];\n    out[15] = values[15];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat4} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @returns `out`\n   */\n  static identity(out: Mat4Like): Mat4Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      const a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n      const a12 = a[6],\n        a13 = a[7];\n      const a23 = a[11];\n\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a01;\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a02;\n      out[9] = a12;\n      out[11] = a[14];\n      out[12] = a03;\n      out[13] = a13;\n      out[14] = a23;\n    } else {\n      out[0] = a[0];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a[1];\n      out[5] = a[5];\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a[2];\n      out[9] = a[6];\n      out[10] = a[10];\n      out[11] = a[14];\n      out[12] = a[3];\n      out[13] = a[7];\n      out[14] = a[11];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert(out: Mat4Like, a: Mat4Like): Mat4Like | null {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint(out: Mat4Like, a: Mat4Like): Mat4Like {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n    out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n    out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n    out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n    out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n    out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n    out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n    out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n    out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n    out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n    out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n    out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n    out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n    out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n    out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n    out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat4Like>): number {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b0 = a00 * a11 - a01 * a10;\n    const b1 = a00 * a12 - a02 * a10;\n    const b2 = a01 * a12 - a02 * a11;\n    const b3 = a20 * a31 - a21 * a30;\n    const b4 = a20 * a32 - a22 * a30;\n    const b5 = a21 * a32 - a22 * a31;\n    const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n    const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n    const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n    const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n    // Calculate the determinant\n    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n  }\n\n  /**\n   * Multiplies two {@link Mat4}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0];\n    let b1 = b[1];\n    let b2 = b[2];\n    let b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like { return out; }\n\n  /**\n   * Translate a {@link Mat4} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat4Like, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): Mat4Like {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    if (a === out) {\n      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n      const a00 = a[0];\n      const a01 = a[1];\n      const a02 = a[2];\n      const a03 = a[3];\n      const a10 = a[4];\n      const a11 = a[5];\n      const a12 = a[6];\n      const a13 = a[7];\n      const a20 = a[8];\n      const a21 = a[9];\n      const a22 = a[10];\n      const a23 = a[11];\n\n      out[0] = a00;\n      out[1] = a01;\n      out[2] = a02;\n      out[3] = a03;\n      out[4] = a10;\n      out[5] = a11;\n      out[6] = a12;\n      out[7] = a13;\n      out[8] = a20;\n      out[9] = a21;\n      out[10] = a22;\n      out[11] = a23;\n\n      out[12] = a00 * x + a10 * y + a20 * z + a[12];\n      out[13] = a01 * x + a11 * y + a21 * z + a[13];\n      out[14] = a02 * x + a12 * y + a22 * z + a[14];\n      out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat4} by the dimensions in the given {@link Vec3} not using vectorization\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec3} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat4Like, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): Mat4Like {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat4} by the given angle around the given axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out` or `null` if axis has a length of 0\n   */\n  static rotate(out: Mat4Like, a: Readonly<Mat4Like>, rad: number, axis: Readonly<Vec3Like>): Mat4Like | null {\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (len < GLM_EPSILON) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    const b00 = x * x * t + c;\n    const b01 = y * x * t + z * s;\n    const b02 = z * x * t - y * s;\n    const b10 = x * y * t - z * s;\n    const b11 = y * y * t + c;\n    const b12 = z * y * t + x * s;\n    const b20 = x * z * t + y * s;\n    const b21 = y * z * t - x * s;\n    const b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the X axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateX(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged rows\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      out[3] = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Y axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateY(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged rows\n      out[4] = a[4];\n      out[5] = a[5];\n      out[6] = a[6];\n      out[7] = a[7];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateZ(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[8] = a[8];\n      out[9] = a[9];\n      out[10] = a[10];\n      out[11] = a[11];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat4Like, v: Readonly<Vec3Like>): Mat4Like {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat4Like, v: Readonly<Vec3Like>): Mat4Like {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotate(dest, dest, rad, axis);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out` or `null` if `axis` has a length of 0\n   */\n  static fromRotation(out: Mat4Like, rad: number, axis: Readonly<Vec3Like>): Mat4Like | null {\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (len < GLM_EPSILON) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the X axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotateX(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromXRotation(out: Mat4Like, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the Y axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotateY(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromYRotation(out: Mat4Like, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = 0;\n    out[2] = -s;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the Z axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotateZ(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromZRotation(out: Mat4Like, rad: number): Mat4Like {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation and vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, vec);\n   *   let quatMat = mat4.create();\n   *   quat4.toMat4(quat, quatMat);\n   *   mat4.multiply(dest, quatMat);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromRotationTranslation(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>): Mat4Like {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Sets a {@link Mat4} from a {@link Quat2}.\n   * @category Static\n   *\n   * @param out - Matrix\n   * @param a - Dual Quaternion\n   * @returns `out`\n   */\n  static fromQuat2(out: Mat4Like, a: Quat2Like): Mat4Like {\n    const bx = -a[0];\n    const by = -a[1];\n    const bz = -a[2];\n    const bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n\n    const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n\n    // Only scale if it makes sense\n    if (magnitude > 0) {\n      Mat4.#TMP_VEC3[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n      Mat4.#TMP_VEC3[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n      Mat4.#TMP_VEC3[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n    } else {\n      Mat4.#TMP_VEC3[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n      Mat4.#TMP_VEC3[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n      Mat4.#TMP_VEC3[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    }\n    Mat4.fromRotationTranslation(out, a as QuatLike, Mat4.#TMP_VEC3);\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat4} normal matrix (transpose inverse) from a {@link Mat4}\n   * @category Static\n   *\n   * @param out - Matrix receiving operation result\n   * @param a - Mat4 to derive the normal matrix from\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static normalFromMat4(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like | null {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = 0;\n\n    out[4] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[7] = 0;\n\n    out[8] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[9] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = 0;\n\n    // No translation\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat4} normal matrix (transpose inverse) from a {@link Mat4}\n   * This version omits the calculation of the constant factor (1/determinant), so\n   * any normals transformed with it will need to be renormalized.\n   * From https://stackoverflow.com/a/27616419/25968\n   * @category Static\n   *\n   * @param out - Matrix receiving operation result\n   * @param a - Mat4 to derive the normal matrix from\n   * @returns `out`\n   */\n  static normalFromMat4Fast(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n\n    const bx = a[4];\n    const by = a[5];\n    const bz = a[6];\n\n    const cx = a[8];\n    const cy = a[9];\n    const cz = a[10];\n\n    out[0] = by * cz - cz * cy;\n    out[1] = bz * cx - cx * cz;\n    out[2] = bx * cy - cy * cx;\n    out[3] = 0;\n\n    out[4] = cy * az - cz * ay;\n    out[5] = cz * ax - cx * az;\n    out[6] = cx * ay - cy * ax;\n    out[7] = 0;\n\n    out[8] = ay * bz - az * by;\n    out[9] = az * bx - ax * bz;\n    out[10] = ax * by - ay * bx;\n    out[11] = 0;\n\n    // No translation\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Returns the translation vector component of a transformation\n   * matrix. If a matrix is built with fromRotationTranslation,\n   * the returned vector will be the same as the translation vector\n   * originally supplied.\n   * @category Static\n   *\n   * @param  {vec3} out Vector to receive translation component\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n   * @return {vec3} out\n   */\n  static getTranslation(out: Vec3Like, mat: Readonly<Mat4Like>): Vec3Like {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n  }\n\n  /**\n   * Returns the scaling factor component of a transformation\n   * matrix. If a matrix is built with fromRotationTranslationScale\n   * with a normalized Quaternion parameter, the returned vector will be\n   * the same as the scaling vector\n   * originally supplied.\n   * @category Static\n   *\n   * @param  {vec3} out Vector to receive scaling factor component\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n   * @return {vec3} out\n   */\n  static getScaling(out: Vec3Like, mat: Readonly<Mat4Like>): Vec3Like {\n    const m11 = mat[0];\n    const m12 = mat[1];\n    const m13 = mat[2];\n    const m21 = mat[4];\n    const m22 = mat[5];\n    const m23 = mat[6];\n    const m31 = mat[8];\n    const m32 = mat[9];\n    const m33 = mat[10];\n\n    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * Returns a quaternion representing the rotational component\n   * of a transformation matrix. If a matrix is built with\n   * fromRotationTranslation, the returned quaternion will be the\n   * same as the quaternion originally supplied.\n   * @category Static\n   *\n   * @param out - Quaternion to receive the rotation component\n   * @param mat - Matrix to be decomposed (input)\n   * @return `out`\n   */\n  static getRotation(out: QuatLike, mat: Readonly<Mat4Like>): QuatLike {\n    Mat4.getScaling(Mat4.#TMP_VEC3, mat);\n\n    const is1 = 1 / Mat4.#TMP_VEC3[0];\n    const is2 = 1 / Mat4.#TMP_VEC3[1];\n    const is3 = 1 / Mat4.#TMP_VEC3[2];\n\n    const sm11 = mat[0] * is1;\n    const sm12 = mat[1] * is2;\n    const sm13 = mat[2] * is3;\n    const sm21 = mat[4] * is1;\n    const sm22 = mat[5] * is2;\n    const sm23 = mat[6] * is3;\n    const sm31 = mat[8] * is1;\n    const sm32 = mat[9] * is2;\n    const sm33 = mat[10] * is3;\n\n    const trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out[3] = 0.25 * S;\n      out[0] = (sm23 - sm32) / S;\n      out[1] = (sm31 - sm13) / S;\n      out[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out[3] = (sm23 - sm32) / S;\n      out[0] = 0.25 * S;\n      out[1] = (sm12 + sm21) / S;\n      out[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out[3] = (sm31 - sm13) / S;\n      out[0] = (sm12 + sm21) / S;\n      out[1] = 0.25 * S;\n      out[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out[3] = (sm12 - sm21) / S;\n      out[0] = (sm31 + sm13) / S;\n      out[1] = (sm23 + sm32) / S;\n      out[2] = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * Decomposes a transformation matrix into its rotation, translation\n   * and scale components. Returns only the rotation component\n   * @category Static\n   *\n   * @param out_r - Quaternion to receive the rotation component\n   * @param out_t - Vector to receive the translation vector\n   * @param out_s - Vector to receive the scaling factor\n   * @param mat - Matrix to be decomposed (input)\n   * @returns `out_r`\n   */\n  static decompose(out_r: QuatLike, out_t: Vec3Like, out_s: Vec3Like, mat: Readonly<Mat4Like>): QuatLike {\n    out_t[0] = mat[12];\n    out_t[1] = mat[13];\n    out_t[2] = mat[14];\n\n    const m11 = mat[0];\n    const m12 = mat[1];\n    const m13 = mat[2];\n    const m21 = mat[4];\n    const m22 = mat[5];\n    const m23 = mat[6];\n    const m31 = mat[8];\n    const m32 = mat[9];\n    const m33 = mat[10];\n\n    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    const is1 = 1 / out_s[0];\n    const is2 = 1 / out_s[1];\n    const is3 = 1 / out_s[2];\n\n    const sm11 = m11 * is1;\n    const sm12 = m12 * is2;\n    const sm13 = m13 * is3;\n    const sm21 = m21 * is1;\n    const sm22 = m22 * is2;\n    const sm23 = m23 * is3;\n    const sm31 = m31 * is1;\n    const sm32 = m32 * is2;\n    const sm33 = m33 * is3;\n\n    const trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out_r[3] = 0.25 * S;\n      out_r[0] = (sm23 - sm32) / S;\n      out_r[1] = (sm31 - sm13) / S;\n      out_r[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out_r[3] = (sm23 - sm32) / S;\n      out_r[0] = 0.25 * S;\n      out_r[1] = (sm12 + sm21) / S;\n      out_r[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out_r[3] = (sm31 - sm13) / S;\n      out_r[0] = (sm12 + sm21) / S;\n      out_r[1] = 0.25 * S;\n      out_r[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out_r[3] = (sm12 - sm21) / S;\n      out_r[0] = (sm31 + sm13) / S;\n      out_r[1] = (sm23 + sm32) / S;\n      out_r[2] = 0.25 * S;\n    }\n\n    return out_r;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, vec);\n   *   let quatMat = mat4.create();\n   *   quat4.toMat4(quat, quatMat);\n   *   mat4.multiply(dest, quatMat);\n   *   mat4.scale(dest, scale);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @param s - Scaling vector\n   * @returns `out`\n   */\n  static fromRotationTranslationScale(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>,\n    s: Readonly<Vec3Like>): Mat4Like {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const sx = s[0];\n    const sy = s[1];\n    const sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the\n   * given origin. This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, vec);\n   *   mat4.translate(dest, origin);\n   *   let quatMat = mat4.create();\n   *   quat4.toMat4(quat, quatMat);\n   *   mat4.multiply(dest, quatMat);\n   *   mat4.scale(dest, scale)\n   *   mat4.translate(dest, negativeOrigin);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @param s - Scaling vector\n   * @param o - The origin vector around which to scale and rotate\n   * @returns `out`\n   */\n  static fromRotationTranslationScaleOrigin(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>,\n    s: Readonly<Vec3Like>, o: Readonly<Vec3Like>): Mat4Like {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    const sx = s[0];\n    const sy = s[1];\n    const sz = s[2];\n\n    const ox = o[0];\n    const oy = o[1];\n    const oz = o[2];\n\n    const out0 = (1 - (yy + zz)) * sx;\n    const out1 = (xy + wz) * sx;\n    const out2 = (xz - wy) * sx;\n    const out4 = (xy - wz) * sy;\n    const out5 = (1 - (xx + zz)) * sy;\n    const out6 = (yz + wx) * sy;\n    const out8 = (xz + wy) * sz;\n    const out9 = (yz - wx) * sz;\n    const out10 = (1 - (xx + yy)) * sz;\n\n    out[0] = out0;\n    out[1] = out1;\n    out[2] = out2;\n    out[3] = 0;\n    out[4] = out4;\n    out[5] = out5;\n    out[6] = out6;\n    out[7] = 0;\n    out[8] = out8;\n    out[9] = out9;\n    out[10] = out10;\n    out[11] = 0;\n    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Quaternion to create matrix from\n   * @returns `out`\n   */\n  static fromQuat(out: Mat4Like, q: Readonly<QuatLike>): Mat4Like {\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far -  Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static frustumNO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number,\n    far = Infinity): Mat4Like {\n    const rl = 1 / (right - left);\n    const tb = 1 / (top - bottom);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = (far + near) * nf;\n      out[14] = 2 * far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -2 * near;\n    }\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.frustumNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.frustumNO} or {@link Mat4.frustumZO} explicitly\n   */\n  static frustum(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number,\n    far = Infinity): Mat4Like { return out; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static frustumZO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number,\n    far = Infinity): Mat4Like {\n    const rl = 1 / (right - left);\n    const tb = 1 / (top - bottom);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = far * nf;\n      out[14] = far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -near;\n    }\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static perspectiveNO(out: Mat4Like, fovy: number, aspect: number, near: number, far = Infinity): Mat4Like {\n    const f = 1.0 / Math.tan(fovy / 2);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = (far + near) * nf;\n      out[14] = 2 * far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -2 * near;\n    }\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.perspectiveNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.perspectiveNO} or {@link Mat4.perspectiveZO} explicitly\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static perspective(out: Mat4Like, fovy: number, aspect: number, near: number, far = Infinity): Mat4Like {\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static perspectiveZO(out: Mat4Like, fovy: number, aspect: number, near: number, far = Infinity): Mat4Like {\n    const f = 1.0 / Math.tan(fovy / 2);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = far * nf;\n      out[14] = far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -near;\n    }\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given field of view. This is primarily useful for generating\n   * projection matrices to be used with the still experimental WebVR API.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fov - Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   * @deprecated\n   */\n  static perspectiveFromFieldOfView(out: Mat4Like,\n    fov: { upDegrees: number, downDegrees: number, leftDegrees: number, rightDegrees: number }, near: number,\n    far: number): Mat4Like {\n\n    const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n    const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n    const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n    const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n    const xScale = 2.0 / (leftTan + rightTan);\n    const yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = (upTan - downTan) * yScale * 0.5;\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the given bounds. The near / far clip planes correspond to a\n   * normalized device coordinate Z range of [-1, 1], which matches WebGL / OpenGLs clip volume.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static orthoNO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number,\n    far: number): Mat4Like {\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.orthoNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.orthoNO} or {@link Mat4.orthoZO} explicitly\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static ortho(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number):\n    Mat4Like {\n    return out;\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds. The near / far clip planes correspond to a\n   * normalized device coordinate Z range of [0, 1], which matches WebGPU / Vulkan / DirectX / Metal's clip volume.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static orthoZO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number,\n    far: number): Mat4Like {\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = near * nf;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point, and up axis. If you want a matrix that\n   * actually makes an object look at another object, you should use targetTo instead.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param eye - Position of the viewer\n   * @param center - Point the viewer is looking at\n   * @param up - vec3 pointing up\n   * @returns `out`\n   */\n  static lookAt(out: Mat4Like, eye: Readonly<Vec3Like>, center: Readonly<Vec3Like>, up: Readonly<Vec3Like>): Mat4Like {\n    const eyex = eye[0];\n    const eyey = eye[1];\n    const eyez = eye[2];\n    const upx = up[0];\n    const upy = up[1];\n    const upz = up[2];\n    const centerx = center[0];\n    const centery = center[1];\n    const centerz = center[2];\n\n    if (\n      Math.abs(eyex - centerx) < GLM_EPSILON &&\n      Math.abs(eyey - centery) < GLM_EPSILON &&\n      Math.abs(eyez - centerz) < GLM_EPSILON\n    ) {\n      return Mat4.identity(out);\n    }\n\n    let z0 = eyex - centerx;\n    let z1 = eyey - centery;\n    let z2 = eyez - centerz;\n\n    let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    let x0 = upy * z2 - upz * z1;\n    let x1 = upz * z0 - upx * z2;\n    let x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    let y0 = z1 * x2 - z2 * x1;\n    let y1 = z2 * x0 - z0 * x2;\n    let y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Generates a matrix that makes something look at something else.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param eye - Position of the viewer\n   * @param target - Point the viewer is looking at\n   * @param up - vec3 pointing up\n   * @returns `out`\n   */\n  static targetTo(out: Mat4Like, eye: Readonly<Vec3Like>, target: Readonly<Vec3Like>, up: Readonly<Vec3Like>):\n    Mat4Like {\n    const eyex = eye[0];\n    const eyey = eye[1];\n    const eyez = eye[2];\n    const upx = up[0];\n    const upy = up[1];\n    const upz = up[2];\n\n    let z0 = eyex - target[0];\n    let z1 = eyey - target[1];\n    let z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      z0 *= len;\n      z1 *= len;\n      z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1;\n    let x1 = upz * z0 - upx * z2;\n    let x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat4Like>): number {\n    return Math.sqrt(\n      a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8] +\n      a[9] * a[9] +\n      a[10] * a[10] +\n      a[11] * a[11] +\n      a[12] * a[12] +\n      a[13] * a[13] +\n      a[14] * a[14] +\n      a[15] * a[15]\n    );\n  }\n\n  /**\n   * Adds two {@link Mat4}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like { return out; }\n\n  /**\n   * Multiply each element of the matrix by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat4Like, a: Readonly<Mat4Like>, b: number): Mat4Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n  }\n\n  /**\n   * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>, scale: number): Mat4Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    out[9] = a[9] + b[9] * scale;\n    out[10] = a[10] + b[10] * scale;\n    out[11] = a[11] + b[11] * scale;\n    out[12] = a[12] + b[12] * scale;\n    out[13] = a[13] + b[13] * scale;\n    out[14] = a[14] + b[14] * scale;\n    out[15] = a[15] + b[15] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether two {@link Mat4}s have exactly the same elements in the same position (when compared with ===).\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7] &&\n      a[8] === b[8] &&\n      a[9] === b[9] &&\n      a[10] === b[10] &&\n      a[11] === b[11] &&\n      a[12] === b[12] &&\n      a[13] === b[13] &&\n      a[14] === b[14] &&\n      a[15] === b[15]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat4}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const a8 = a[8];\n    const a9 = a[9];\n    const a10 = a[10];\n    const a11 = a[11];\n    const a12 = a[12];\n    const a13 = a[13];\n    const a14 = a[14];\n    const a15 = a[15];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    const b8 = b[8];\n    const b9 = b[9];\n    const b10 = b[10];\n    const b11 = b[11];\n    const b12 = b[12];\n    const b13 = b[13];\n    const b14 = b[14];\n    const b15 = b[15];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\n      Math.abs(a8 - b8) <= GLM_EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) &&\n      Math.abs(a9 - b9) <= GLM_EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) &&\n      Math.abs(a10 - b10) <= GLM_EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) &&\n      Math.abs(a11 - b11) <= GLM_EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) &&\n      Math.abs(a12 - b12) <= GLM_EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) &&\n      Math.abs(a13 - b13) <= GLM_EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) &&\n      Math.abs(a14 - b14) <= GLM_EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) &&\n      Math.abs(a15 - b15) <= GLM_EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat4Like>): string {\n    return `Mat4(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat4.prototype.mul = Mat4.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nMat4.sub = Mat4.subtract;\nMat4.mul = Mat4.multiply;\nMat4.frustum = Mat4.frustumNO;\nMat4.perspective = Mat4.perspectiveNO;\nMat4.ortho = Mat4.orthoNO;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat3Like, Mat4Like, QuatLike, Vec3Like } from '#gl-matrix/types';\n\n/**\n * 3 Dimensional Vector\n */\nexport class Vec3 extends Float64Array {\n  /**\n   * Create a {@link Vec3}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Vec3Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 3:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 3); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 3);\n        }\n        break;\n      }\n      default:\n        super(3); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the vector. Equivalent to `this[2];`\n   * @category Vector Components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color Components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color Components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The b component of the vector. Equivalent to `this[2];`\n   * @category Color Components\n   */\n  get b(): number { return this[2]; }\n  set b(value: number) { this[2] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec3.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Alias for {@link Vec3.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * The squared magnitude (length) of `this`.\n   * Equivalent to `Vec3.squaredMagnitude(this);`\n   *\n   * @category Accessors\n   */\n  get squaredMagnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredMagnitude}\n   *\n   * @category Accessors\n   */\n  get sqrMag(): number { return this.squaredMagnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec3.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Vec3.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Vec3} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec3Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Adds a {@link Vec3} to `this`.\n   * Equivalent to `Vec3.add(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec3Like>): this {\n    this[0] += b[0];\n    this[1] += b[1];\n    this[2] += b[2];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec3} from `this`.\n   * Equivalent to `Vec3.subtract(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec3Like>): this {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    this[2] -= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.subtract}\n   * @category Methods\n   */\n  sub(b: Readonly<Vec3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Multiplies `this` by a {@link Vec3}.\n   * Equivalent to `Vec3.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec3Like>): this {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    this[2] *= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Vec3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Divides `this` by a {@link Vec3}.\n   * Equivalent to `Vec3.divide(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec3Like>): this {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    this[2] /= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.divide}\n   * @category Methods\n   */\n  div(b: Readonly<Vec3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec3.scale(this, this, b);`\n   * @category Methods\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): this {\n    this[0] *= b;\n    this[1] *= b;\n    this[2] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec3.scaleAndAdd(this, this, b, scale);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec3Like>, scale: number): this {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    this[2] += b[2] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the Euclidean distance between another {@link Vec3} and `this`.\n   * Equivalent to `Vec3.distance(this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec3Like>): number {\n    return Vec3.distance(this, b);\n  }\n  /**\n   * Alias for {@link Vec3.distance}\n   * @category Methods\n   */\n  dist(b: Readonly<Vec3Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared Euclidean distance between another {@link Vec3} and `this`.\n   * Equivalent to `Vec3.squaredDistance(this, b);`\n   * @category Methods\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec3Like>): number {\n    return Vec3.squaredDistance(this, b);\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredDistance}\n   * @category Methods\n   */\n  sqrDist(b: Readonly<Vec3Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec3.negate(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  negate(): this {\n    this[0] *= -1;\n    this[1] *= -1;\n    this[2] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec3.inverse(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    this[2] = 1.0 / this[2];\n    return this;\n  }\n\n  /**\n   * Sets each component of `this` to its absolute value.\n   * Equivalent to `Vec3.abs(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  abs(): this {\n    this[0] = Math.abs(this[0]);\n    this[1] = Math.abs(this[1]);\n    this[2] = Math.abs(this[2]);\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec3}.\n   * Equivalent to `Vec3.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec3Like>): number {\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec3.normalize(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  normalize(): this {\n    return Vec3.normalize(this, this) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Vec3}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 3 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, empty vec3\n   * @category Static\n   *\n   * @returns a new 3D vector\n   */\n  static create(): Vec3 {\n    return new Vec3();\n  }\n\n  /**\n   * Creates a new vec3 initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - vector to clone\n   * @returns a new 3D vector\n   */\n  static clone(a: Readonly<Vec3Like>): Vec3 {\n    return new Vec3(a);\n  }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec3}\n   * @category Static\n   *\n   * @param a - Vector to calculate magnitude of\n   * @returns Magnitude of a\n   */\n  static magnitude(a: Readonly<Vec3Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec3Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec3.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   *\n   * @param a - vector to calculate length of\n   * @returns length of a\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Vec3Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec3.mag}\n   */\n  static len(a: Readonly<Vec3Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Creates a new vec3 initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @returns a new 3D vector\n   */\n  static fromValues(x: number, y: number, z: number): Vec3 {\n    return new Vec3(x, y, z);\n  }\n\n  /**\n   * Copy the values from one vec3 to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the source vector\n   * @returns `out`\n   */\n  static copy(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  }\n\n  /**\n   * Set the components of a vec3 to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @returns `out`\n   */\n  static set(out: Vec3Like, x: number, y: number, z: number): Vec3Like {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec3}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; };\n\n  /**\n   * Multiplies two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; }\n\n  /**\n   * Divides two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static divide(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.divide}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static div(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; };\n\n  /**\n   * Math.ceil the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to ceil\n   * @returns `out`\n   */\n  static ceil(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to floor\n   * @returns `out`\n   */\n  static floor(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static min(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static max(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n  }\n\n  /**\n   * symmetric round the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to round\n   * @returns `out`\n   */\n  /*\n    static round(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = glMatrix.round(a[0]);\n    out[1] = glMatrix.round(a[1]);\n    out[2] = glMatrix.round(a[2]);\n    return out;\n  }*/\n\n  /**\n   * Scales a vec3 by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: Vec3Like, a: Readonly<Vec3Like>, scale: number): Vec3Like {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    return out;\n  }\n\n  /**\n   * Adds two vec3's after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, scale: number) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the Euclidean distance between two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns distance between a and b\n   */\n  static distance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared Euclidean distance between two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns squared distance between a and b\n   */\n  static squaredDistance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredDistance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrDist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared length of a vec3\n   * @category Static\n   *\n   * @param a - vector to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Vec3Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredLength}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrLen(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Negates the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to negate\n   * @returns `out`\n   */\n  static negate(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to invert\n   * @returns `out`\n   */\n  static inverse(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n  }\n\n  /**\n   * Returns the absolute value of the components of a {@link Vec3}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to compute the absolute values of\n   * @returns `out`\n   */\n  static abs(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    out[2] = Math.abs(a[2]);\n    return out;\n  }\n\n  /**\n   * Normalize a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to normalize\n   * @returns `out`\n   */\n  static normalize(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n      // TODO: evaluate use of glm_invsqrt here?\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  /**\n   * Computes the cross product of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static cross(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\n    const ax = a[0],\n      ay = a[1],\n      az = a[2];\n    const bx = b[0],\n      by = b[1],\n      bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): Vec3Like {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static slerp(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): Vec3Like {\n    const angle = Math.acos(Math.min(Math.max(Vec3.dot(a, b), -1), 1));\n    const sinTotal = Math.sin(angle);\n\n    const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n    const ratioB = Math.sin(t * angle) / sinTotal;\n    out[0] = ratioA * a[0] + ratioB * b[0];\n    out[1] = ratioA * a[1] + ratioB * b[1];\n    out[2] = ratioA * a[2] + ratioB * b[2];\n\n    return out;\n  }\n\n  /**\n   * Performs a hermite interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static hermite(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>,\n    d: Readonly<Vec3Like>, t: number): Vec3Like {\n    const factorTimes2 = t * t;\n    const factor1 = factorTimes2 * (2 * t - 3) + 1;\n    const factor2 = factorTimes2 * (t - 2) + t;\n    const factor3 = factorTimes2 * (t - 1);\n    const factor4 = factorTimes2 * (3 - 2 * t);\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n  }\n\n  /**\n   * Performs a bezier interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static bezier(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>,\n    d: Readonly<Vec3Like>, t: number): Vec3Like {\n    const inverseFactor = 1 - t;\n    const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n    const factorTimes2 = t * t;\n    const factor1 = inverseFactorTimesTwo * inverseFactor;\n    const factor2 = 3 * t * inverseFactorTimesTwo;\n    const factor3 = 3 * factorTimes2 * inverseFactor;\n    const factor4 = factorTimes2 * t;\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n  }\n\n  /**\n   * Generates a random vector with the given scale\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n   * @returns `out`\n   */\n  /*\n    static random(out: Vec3Like, scale) {\n    scale = scale === undefined ? 1.0 : scale;\n\n    let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    let z = glMatrix.RANDOM() * 2.0 - 1.0;\n    let zScale = Math.sqrt(1.0 - z * z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n  }*/\n\n  /**\n   * Transforms the vec3 with a mat4.\n   * 4th vector component is implicitly '1'\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - matrix to transform with\n   * @returns `out`\n   */\n  static transformMat4(out: Vec3Like, a: Readonly<Vec3Like>, m: Readonly<Mat4Like>): Vec3Like {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n    const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n  }\n\n  /**\n   * Transforms the vec3 with a mat3.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - the 3x3 matrix to transform with\n   * @returns `out`\n   */\n  static transformMat3(out: Vec3Like, a: Vec3Like, m: Mat3Like): Vec3Like {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n  }\n\n  /**\n   * Transforms the vec3 with a quat\n   * Can also be used for dual quaternions. (Multiply it with the real part)\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param q - quaternion to transform with\n   * @returns `out`\n   */\n  static transformQuat(out: Vec3Like, a: Readonly<Vec3Like>, q: Readonly<QuatLike>): Vec3Like {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const w2 = q[3] * 2;\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    const uvx = (qy * z - qz * y);\n    const uvy = (qz * x - qx * z);\n    const uvz = (qx * y - qy * x);\n    // var uuv = vec3.cross([], qvec, uv);\n    // vec3.scale(uuv, uuv, 2);\n    const uuvx = (qy * uvz - qz * uvy) * 2;\n    const uuvy = (qz * uvx - qx * uvz) * 2;\n    const uuvz = (qx * uvy - qy * uvx) * 2;\n    // vec3.scale(uv, uv, 2 * w);\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + (uvx * w2) + uuvx;\n    out[1] = y + (uvy * w2) + uuvy;\n    out[2] = z + (uvz * w2) + uuvz;\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the x-axis\n   * @category Static\n   *\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateX(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\n    const by = b[1];\n    const bz = b[2];\n\n    // Translate point to the origin\n    const py = a[1] - by;\n    const pz = a[2] - bz;\n\n    // perform rotation\n    // translate to correct position\n    out[0] = a[0];\n    out[1] = (py * Math.cos(rad) - pz * Math.sin(rad)) + by;\n    out[2] = (py * Math.sin(rad) + pz * Math.cos(rad)) + bz;\n\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the y-axis\n   * @category Static\n   *\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateY(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\n    const bx = b[0];\n    const bz = b[2];\n\n    // Translate point to the origin\n    const px = a[0] - bx;\n    const pz = a[2] - bz;\n\n    // perform rotation\n    // translate to correct position\n    out[0] = (pz * Math.sin(rad) + px * Math.cos(rad)) + bx;\n    out[1] = a[1];\n    out[2] = (pz * Math.cos(rad) - px * Math.sin(rad)) + bz;\n\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the z-axis\n   * @category Static\n   *\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateZ(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\n    const bx = b[0];\n    const by = b[1];\n\n    // Translate point to the origin\n    const px = a[0] - bx;\n    const py = a[1] - by;\n\n    // perform rotation\n    // translate to correct position\n    out[0] = (px * Math.cos(rad) - py * Math.sin(rad)) + bx;\n    out[1] = (px * Math.sin(rad) + py * Math.cos(rad)) + by;\n    out[2] = b[2];\n\n    return out;\n  }\n\n  /**\n   * Get the angle between two 3D vectors\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns The angle in radians\n   */\n  static angle(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>) {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n    const cosine = mag && Vec3.dot(a, b) / mag;\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n  }\n\n  /**\n   * Set the components of a vec3 to zero\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @returns `out`\n   */\n  static zero(out: Vec3Like): Vec3Like {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a vector\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Vec3Like>): string {\n    return `Vec3(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  }\n\n  /**\n   * Returns whether the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n    );\n  }\n}\n\n// Instance method alias assignments\nVec3.prototype.sub = Vec3.prototype.subtract;             // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.mul = Vec3.prototype.multiply;             // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.div = Vec3.prototype.divide;               // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.dist = Vec3.prototype.distance;            // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.sqrDist = Vec3.prototype.squaredDistance;  // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nVec3.sub = Vec3.subtract;\nVec3.mul = Vec3.multiply;\nVec3.div = Vec3.divide;\nVec3.dist = Vec3.distance;\nVec3.sqrDist = Vec3.squaredDistance;\nVec3.sqrLen = Vec3.squaredLength;\nVec3.mag = Vec3.magnitude;\nVec3.length = Vec3.magnitude;\nVec3.len = Vec3.magnitude;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat4Like, QuatLike, Vec4Like } from '#gl-matrix/types';\n\n/**\n * 4 Dimensional Vector\n */\nexport class Vec4 extends Float64Array {\n  /**\n   * Create a {@link Vec4}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Vec4Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 4);\n        }\n        break;\n      }\n      default:\n        super(4); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the vector. Equivalent to `this[2];`\n   * @category Vector Components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  /**\n   * The w component of the vector. Equivalent to `this[3];`\n   * @category Vector Components\n   */\n  get w(): number { return this[3]; }\n  set w(value: number) { this[3] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color Components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color Components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The b component of the vector. Equivalent to `this[2];`\n   * @category Color Components\n   */\n  get b(): number { return this[2]; }\n  set b(value: number) { this[2] = value; }\n\n  /**\n   * The a component of the vector. Equivalent to `this[3];`\n   * @category Color Components\n   */\n  get a(): number { return this[3]; }\n  set a(value: number) { this[3] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec4.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    const w = this[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec4.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Vec4.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Vec4} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec4Like>): this {\n    super.set(a);\n    return this;\n  }\n\n  /**\n   * Adds a {@link Vec4} to `this`.\n   * Equivalent to `Vec4.add(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec4Like>): this {\n    this[0] += b[0];\n    this[1] += b[1];\n    this[2] += b[2];\n    this[3] += b[3];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec4} from `this`.\n   * Equivalent to `Vec4.subtract(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec4Like>): this {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    this[2] -= b[2];\n    this[3] -= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.subtract}\n   * @category Methods\n   */\n  sub(b: Readonly<Vec4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Multiplies `this` by a {@link Vec4}.\n   * Equivalent to `Vec4.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec4Like>): this {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    this[2] *= b[2];\n    this[3] *= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Vec4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Divides `this` by a {@link Vec4}.\n   * Equivalent to `Vec4.divide(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec4Like>): this {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    this[2] /= b[2];\n    this[3] /= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.divide}\n   * @category Methods\n   */\n  div(b: Readonly<Vec4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec4.scale(this, this, b);`\n   * @category Methods\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): this {\n    this[0] *= b;\n    this[1] *= b;\n    this[2] *= b;\n    this[3] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec4.scaleAndAdd(this, this, b, scale);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec4Like>, scale: number): this {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    this[2] += b[2] * scale;\n    this[3] += b[3] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the Euclidean distance between another {@link Vec4} and `this`.\n   * Equivalent to `Vec4.distance(this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec4Like>): number {\n    return Vec4.distance(this, b);\n  }\n\n  /**\n   * Alias for {@link Vec4.distance}\n   * @category Methods\n   */\n  dist(b: Readonly<Vec4Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared Euclidean distance between another {@link Vec4} and `this`.\n   * Equivalent to `Vec4.squaredDistance(this, b);`\n   * @category Methods\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec4Like>): number {\n    return Vec4.squaredDistance(this, b);\n  }\n\n  /**\n   * Alias for {@link Vec4.squaredDistance}\n   * @category Methods\n   */\n  sqrDist(b: Readonly<Vec4Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec4.negate(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  negate(): this {\n    this[0] *= -1;\n    this[1] *= -1;\n    this[2] *= -1;\n    this[3] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec4.inverse(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    this[2] = 1.0 / this[2];\n    this[3] = 1.0 / this[3];\n    return this;\n  }\n\n  /**\n   * Sets each component of `this` to it's absolute value.\n   * Equivalent to `Vec4.abs(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  abs(): this {\n    this[0] = Math.abs(this[0]);\n    this[1] = Math.abs(this[1]);\n    this[2] = Math.abs(this[2]);\n    this[3] = Math.abs(this[3]);\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec4}.\n   * Equivalent to `Vec4.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec4Like>): number {\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2] + this[3] * b[3];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec4.normalize(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  normalize(): this {\n    return Vec4.normalize(this, this) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Vec4}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 4 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, empty {@link Vec4}\n   * @category Static\n   *\n   * @returns a new 4D vector\n   */\n  static create(): Vec4 {\n    return new Vec4();\n  }\n\n  /**\n   * Creates a new {@link Vec4} initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - vector to clone\n   * @returns a new 4D vector\n   */\n  static clone(a: Vec4Like): Vec4 {\n    return new Vec4(a);\n  }\n\n  /**\n   * Creates a new {@link Vec4} initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns a new 4D vector\n   */\n  static fromValues(x: number, y: number, z: number, w: number): Vec4 {\n    return new Vec4(x, y, z, w);\n  }\n\n  /**\n   * Copy the values from one {@link Vec4} to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the source vector\n   * @returns `out`\n   */\n  static copy(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec4} to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns `out`\n   */\n  static set(out: Vec4Like, x: number, y: number, z: number, w: number): Vec4Like {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec4}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\n\n  /**\n   * Multiplies two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\n\n  /**\n   * Divides two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static divide(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.divide}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static div(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\n\n  /**\n   * Math.ceil the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to ceil\n   * @returns `out`\n   */\n  static ceil(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to floor\n   * @returns `out`\n   */\n  static floor(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static min(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static max(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n  }\n\n  /**\n   * Math.round the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to round\n   * @returns `out`\n   */\n  static round(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n  }\n\n  /**\n   * Scales a {@link Vec4} by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: Vec4Like, a: Readonly<Vec4Like>, scale: number): Vec4Like {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec4}'s after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, scale: number): Vec4Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the Euclidean distance between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns distance between a and b\n   */\n  static distance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    const w = b[3] - a[3];\n    return Math.hypot(x, y, z, w);\n  }\n  /**\n   * Alias for {@link Vec4.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the squared Euclidean distance between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns squared distance between a and b\n   */\n  static squaredDistance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    const w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n  /**\n   * Alias for {@link Vec4.squaredDistance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrDist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to calculate length of\n   * @returns length of `a`\n   */\n  static magnitude(a: Readonly<Vec4Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec4Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec4.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Vec4Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec4.mag}\n   */\n  static len(a: Readonly<Vec4Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Vec4Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Alias for {@link Vec4.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<Vec4Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to negate\n   * @returns `out`\n   */\n  static negate(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to invert\n   * @returns `out`\n   */\n  static inverse(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    out[3] = 1.0 / a[3];\n    return out;\n  }\n\n  /**\n   * Returns the absolute value of the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to compute the absolute values of\n   * @returns `out`\n   */\n  static abs(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    out[2] = Math.abs(a[2]);\n    out[3] = Math.abs(a[3]);\n    return out;\n  }\n\n  /**\n   * Normalize a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to normalize\n   * @returns `out`\n   */\n  static normalize(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  /**\n   * Returns the cross-product of three vectors in a 4-dimensional space\n   * @category Static\n   *\n   * @param out the receiving vector\n   * @param u - the first vector\n   * @param v - the second vector\n   * @param w - the third vector\n   * @returns result\n   */\n  static cross(out: Vec4Like, u: Readonly<Vec4Like>, v: Readonly<Vec4Like>, w: Readonly<Vec4Like>): Vec4Like {\n    const a = v[0] * w[1] - v[1] * w[0];\n    const b = v[0] * w[2] - v[2] * w[0];\n    const c = v[0] * w[3] - v[3] * w[0];\n    const d = v[1] * w[2] - v[2] * w[1];\n    const e = v[1] * w[3] - v[3] * w[1];\n    const f = v[2] * w[3] - v[3] * w[2];\n    const g = u[0];\n    const h = u[1];\n    const i = u[2];\n    const j = u[3];\n\n    out[0] = h * f - i * e + j * d;\n    out[1] = -(g * f) + i * c - j * b;\n    out[2] = g * e - h * c + j * a;\n    out[3] = -(g * d) + h * b - i * a;\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, t: number): Vec4Like {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n  }\n\n  /**\n   * Generates a random vector with the given scale\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param [scale] - Length of the resulting vector. If ommitted, a unit vector will be returned\n   * @returns `out`\n   */\n  /*\n    static random(out: Vec4Like, scale): Vec4Like {\n    scale = scale || 1.0;\n\n    // Marsaglia, George. Choosing a Point from the Surface of a\n    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n    // http://projecteuclid.org/euclid.aoms/1177692644;\n    var v1, v2, v3, v4;\n    var s1, s2;\n    do {\n      v1 = glMatrix.RANDOM() * 2 - 1;\n      v2 = glMatrix.RANDOM() * 2 - 1;\n      s1 = v1 * v1 + v2 * v2;\n    } while (s1 >= 1);\n    do {\n      v3 = glMatrix.RANDOM() * 2 - 1;\n      v4 = glMatrix.RANDOM() * 2 - 1;\n      s2 = v3 * v3 + v4 * v4;\n    } while (s2 >= 1);\n\n    var d = Math.sqrt((1 - s1) / s2);\n    out[0] = scale * v1;\n    out[1] = scale * v2;\n    out[2] = scale * v3 * d;\n    out[3] = scale * v4 * d;\n    return out;\n  }*/\n\n  /**\n   * Transforms the {@link Vec4} with a {@link Mat4}.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - matrix to transform with\n   * @returns `out`\n   */\n  static transformMat4(out: Vec4Like, a: Readonly<Vec4Like>, m: Readonly<Mat4Like>): Vec4Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec4} with a {@link Quat}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param q - quaternion to transform with\n   * @returns `out`\n   */\n  static transformQuat(out: Vec4Like, a: Readonly<Vec4Like>, q: Readonly<QuatLike>): Vec4Like {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec4} to zero\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @returns `out`\n   */\n  static zero(out: Vec4Like): Vec4Like {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Vec4Like>): string {\n    return `Vec4(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  }\n\n  /**\n   * Returns whether the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n    );\n  }\n}\n\n// Instance method alias assignments\nVec4.prototype.sub = Vec4.prototype.subtract;             // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.mul = Vec4.prototype.multiply;             // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.div = Vec4.prototype.divide;               // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.dist = Vec4.prototype.distance;            // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.sqrDist = Vec4.prototype.squaredDistance;  // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nVec4.sub = Vec4.subtract;\nVec4.mul = Vec4.multiply;\nVec4.div = Vec4.divide;\nVec4.dist = Vec4.distance;\nVec4.sqrDist = Vec4.squaredDistance;\nVec4.sqrLen = Vec4.squaredLength;\nVec4.mag = Vec4.magnitude;\nVec4.length = Vec4.magnitude;\nVec4.len = Vec4.magnitude;\n", "import { Vec3 } from './Vec3.js';\nimport { Vec4 } from './Vec4.js';\nimport { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat3Like, QuatLike, Vec3Like } from '#gl-matrix/types';\n\n/**\n * Quaternion\n */\nexport class Quat extends Float64Array {\n  static #DEFAULT_ANGLE_ORDER = 'zyx';\n\n  // Temporary variables to prevent repeated allocations in the algorithms within Quat.\n  // These are declared as TypedArrays to aid in tree-shaking.\n\n  static #TMP_QUAT1 = new Float64Array(4);\n  static #TMP_QUAT2 = new Float64Array(4);\n  static #TMP_MAT3 = new Float64Array(9);\n\n  static #TMP_VEC3 = new Float64Array(3);\n  static #X_UNIT_VEC3 = new Float64Array([1, 0, 0]);\n  static #Y_UNIT_VEC3 = new Float64Array([0, 1, 0]);\n\n  /**\n   * Create a {@link Quat}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<QuatLike> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 4);\n        }\n        break;\n      }\n      default:\n        super(4);\n        this[3] = 1;\n        break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the quaternion. Equivalent to `this[0];`\n   * @category Quaternion Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the quaternion. Equivalent to `this[1];`\n   * @category Quaternion Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the quaternion. Equivalent to `this[2];`\n   * @category Quaternion Components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  /**\n   * The w component of the quaternion. Equivalent to `this[3];`\n   * @category Quaternion Components\n   */\n  get w(): number { return this[3]; }\n  set w(value: number) { this[3] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Quat.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    const w = this[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Quat.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Quat.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Quat} into `this`.\n   * @category Methods\n   *\n   * @param a the source quaternion\n   * @returns `this`\n   */\n  copy(a: Readonly<QuatLike>): this {\n    super.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity quaternion\n   * Equivalent to Quat.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this[0] = 0;\n    this[1] = 0;\n    this[2] = 0;\n    this[3] = 1;\n    return this;\n  }\n\n  /**\n   * Multiplies `this` by a {@link Quat}.\n   * Equivalent to `Quat.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<QuatLike>): this {\n    return Quat.multiply(this, this, b) as this;\n  }\n\n  /**\n   * Alias for {@link Quat.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<QuatLike>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Rotates `this` by the given angle about the X axis\n   * Equivalent to `Quat.rotateX(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateX(rad: number): this {\n    return Quat.rotateX(this, this, rad) as this;\n  }\n\n  /**\n   * Rotates `this` by the given angle about the Y axis\n   * Equivalent to `Quat.rotateY(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateY(rad: number): this {\n    return Quat.rotateY(this, this, rad) as this;\n  }\n\n  /**\n   * Rotates `this` by the given angle about the Z axis\n   * Equivalent to `Quat.rotateZ(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateZ(rad: number): this {\n    return Quat.rotateZ(this, this, rad) as this;\n  }\n\n  /**\n   * Inverts `this`\n   * Equivalent to `Quat.invert(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    return Quat.invert(this, this) as this;\n  }\n\n  /**\n   * Scales `this` by a scalar number\n   * Equivalent to `Quat.scale(this, this, scale);`\n   * @category Methods\n   *\n   * @param scale - amount to scale the vector by\n   * @returns `this`\n   */\n  scale(scale: number): QuatLike {\n    this[0] *= scale;\n    this[1] *= scale;\n    this[2] *= scale;\n    this[3] *= scale;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of `this` and another {@link Quat}\n   * Equivalent to `Quat.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - the second operand\n   * @returns dot product of `this` and b\n   */\n  dot(b: Readonly<QuatLike>): number {\n    return Quat.dot(this, b);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Quat}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 4 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new identity quat\n   * @category Static\n   *\n   * @returns a new quaternion\n   */\n  static create(): Quat {\n    return new Quat();\n  }\n\n  /**\n   * Set a quat to the identity quaternion\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @returns `out`\n   */\n  static identity(out: QuatLike): QuatLike {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  }\n\n  /**\n   * Sets a quat from the given angle and rotation axis,\n   * then returns it.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param axis - the axis around which to rotate\n   * @param rad - the angle in radians\n   * @returns `out`\n   **/\n  static setAxisAngle(out: QuatLike, axis: Readonly<Vec3Like>, rad: number): QuatLike {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n  }\n\n  /**\n   * Gets the rotation axis and angle for a given\n   *  quaternion. If a quaternion is created with\n   *  setAxisAngle, this method will return the same\n   *  values as provided in the original parameter list\n   *  OR functionally equivalent values.\n   * Example: The quaternion formed by axis [0, 0, 1] and\n   *  angle -90 is the same as the quaternion formed by\n   *  [0, 0, 1] and 270. This method favors the latter.\n   * @category Static\n   *\n   * @param out_axis - Vector receiving the axis of rotation\n   * @param q - Quaternion to be decomposed\n   * @return Angle, in radians, of the rotation\n   */\n  static getAxisAngle(out_axis: Vec3Like, q: Readonly<QuatLike>): number {\n    const rad = Math.acos(q[3]) * 2.0;\n    const s = Math.sin(rad / 2.0);\n    if (s > GLM_EPSILON) {\n      out_axis[0] = q[0] / s;\n      out_axis[1] = q[1] / s;\n      out_axis[2] = q[2] / s;\n    } else {\n      // If s is zero, return any axis (no rotation - axis does not matter)\n      out_axis[0] = 1;\n      out_axis[1] = 0;\n      out_axis[2] = 0;\n    }\n    return rad;\n  }\n\n  /**\n   * Gets the angular distance between two unit quaternions\n   * @category Static\n   *\n   * @param  {ReadonlyQuat} a     Origin unit quaternion\n   * @param  {ReadonlyQuat} b     Destination unit quaternion\n   * @return {Number}     Angle, in radians, between the two quaternions\n   */\n  static getAngle(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\n    const dotproduct = Quat.dot(a, b);\n\n    return Math.acos(2 * dotproduct * dotproduct - 1);\n  }\n\n  /**\n   * Multiplies two quaternions.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the X axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateX(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the Y axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateY(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the Z axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateZ(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n  }\n\n  /**\n   * Calculates the W component of a quat from the X, Y, and Z components.\n   * Assumes that quaternion is 1 unit in length.\n   * Any existing W component will be ignored.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate W component of\n   * @returns `out`\n   */\n  static calculateW(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n  }\n\n  /**\n   * Calculate the exponential of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @returns `out`\n   */\n  static exp(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n\n    const r = Math.sqrt(x * x + y * y + z * z);\n    const et = Math.exp(w);\n    const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n    out[0] = x * s;\n    out[1] = y * s;\n    out[2] = z * s;\n    out[3] = et * Math.cos(r);\n\n    return out;\n  }\n\n  /**\n   * Calculate the natural logarithm of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @returns `out`\n   */\n  static ln(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n\n    const r = Math.sqrt(x * x + y * y + z * z);\n    const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n    out[0] = x * t;\n    out[1] = y * t;\n    out[2] = z * t;\n    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n    return out;\n  }\n\n  /**\n   * Calculate the scalar power of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @param b - amount to scale the quaternion by\n   * @returns `out`\n   */\n  static pow(out: QuatLike, a: Readonly<QuatLike>, b: number): QuatLike {\n    Quat.ln(out, a);\n    Quat.scale(out, out, b);\n    Quat.exp(out, out);\n    return out;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between two quat\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static slerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): QuatLike {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    const ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n    let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n\n    let scale0: number;\n    let scale1: number;\n\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > GLM_EPSILON) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n  }\n\n  /**\n   * Generates a random unit quaternion\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @returns `out`\n   */\n  /* static random(out: QuatLike): QuatLike {\n    // Implementation of http://planning.cs.uiuc.edu/node198.html\n    // TODO: Calling random 3 times is probably not the fastest solution\n    let u1 = glMatrix.RANDOM();\n    let u2 = glMatrix.RANDOM();\n    let u3 = glMatrix.RANDOM();\n\n    let sqrt1MinusU1 = Math.sqrt(1 - u1);\n    let sqrtU1 = Math.sqrt(u1);\n\n    out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n    out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n    out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n    out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n    return out;\n  }*/\n\n  /**\n   * Calculates the inverse of a quat\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate inverse of\n   * @returns `out`\n   */\n  static invert(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    const a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n    const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    const invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n  }\n\n  /**\n   * Calculates the conjugate of a quat\n   * If the quaternion is normalized, this function is faster than `quat.inverse` and produces the same result.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate conjugate of\n   * @returns `out`\n   */\n  static conjugate(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   *\n   * NOTE: The resultant quaternion is not normalized, so you should be sure\n   * to re-normalize the quaternion yourself where necessary.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param m - rotation matrix\n   * @returns `out`\n   */\n  static fromMat3(out: QuatLike, m: Readonly<Mat3Like>): QuatLike {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    const fTrace = m[0] + m[4] + m[8];\n    let fRoot: number;\n\n    if (fTrace > 0.0) {\n      // |w| > 1/2, may as well choose w > 1/2\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\n      out[3] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot; // 1/(4w)\n      out[0] = (m[5] - m[7]) * fRoot;\n      out[1] = (m[6] - m[2]) * fRoot;\n      out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n      // |w| <= 1/2\n      let i = 0;\n      if (m[4] > m[0]) { i = 1; }\n      if (m[8] > m[i * 3 + i]) { i = 2; }\n      const j = (i + 1) % 3;\n      const k = (i + 2) % 3;\n\n      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n      out[i] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot;\n      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n  }\n\n  /**\n   * Creates a quaternion from the given euler angle x, y, z.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param x - Angle to rotate around X axis in degrees.\n   * @param y - Angle to rotate around Y axis in degrees.\n   * @param z - Angle to rotate around Z axis in degrees.\n   * @param {'xyz'|'xzy'|'yxz'|'yzx'|'zxy'|'zyx'} order - Intrinsic order for conversion, default is zyx.\n   * @returns `out`\n   */\n  static fromEuler(out: QuatLike, x: number, y: number, z: number, order = Quat.#DEFAULT_ANGLE_ORDER): QuatLike {\n    const halfToRad = (0.5 * Math.PI) / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    const sx = Math.sin(x);\n    const cx = Math.cos(x);\n    const sy = Math.sin(y);\n    const cy = Math.cos(y);\n    const sz = Math.sin(z);\n    const cz = Math.cos(z);\n\n    switch (order) {\n      case 'xyz':\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n        break;\n\n      case 'xzy':\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n        break;\n\n      case 'yxz':\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n        break;\n\n      case 'yzx':\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n        break;\n\n      case 'zxy':\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n        break;\n\n      case 'zyx':\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n        break;\n\n      default:\n        throw new Error(`Unknown angle order ${order}`);\n    }\n\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a quatenion\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<QuatLike>): string {\n    return `Quat(${a.join(', ')})`;\n  }\n\n  /**\n   * Creates a new quat initialized with values from an existing quaternion\n   * @category Static\n   *\n   * @param a - quaternion to clone\n   * @returns a new quaternion\n   */\n  static clone(a: Readonly<QuatLike>): Quat {\n    return new Quat(a);\n  }\n\n  /**\n   * Creates a new quat initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns a new quaternion\n   */\n  static fromValues(x: number, y: number, z: number, w: number): Quat {\n    return new Quat(x, y, z, w);\n  }\n\n  /**\n   * Copy the values from one quat to another\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the source quaternion\n   * @returns `out`\n   */\n  static copy(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Quat} to the given values\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static set(out: QuatLike, x: number, y: number, z: number, w: number): QuatLike { return out; }\n\n  /**\n   * Adds two {@link Quat}'s\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static add(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike { return out; }\n\n  /**\n   * Alias for {@link Quat.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike { return out; }\n\n  /**\n   * Scales a quat by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param b - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: QuatLike, a: Readonly<QuatLike>, scale: number): QuatLike {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two quat's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  /**\n   * Performs a linear interpolation between two quat's\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static lerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): QuatLike { return out; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Quat}\n   * @category Static\n   *\n   * @param a - quaternion to calculate length of\n   * @returns length of `a`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static magnitude(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mag(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<QuatLike>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat.mag}\n   */\n  static len(a: Readonly<QuatLike>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Quat}\n   * @category Static\n   *\n   * @param a - quaternion to calculate squared length of\n   * @returns squared length of a\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static squaredLength(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<QuatLike>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Normalize a {@link Quat}\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quaternion to normalize\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static normalize(out: QuatLike, a: Readonly<QuatLike>): QuatLike { return out; }\n\n  /**\n   * Returns whether the quaternions have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first quaternion.\n   * @param b - The second quaternion.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static exactEquals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\n\n  /**\n   * Returns whether the quaternions have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static equals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\n\n  /**\n   * Sets a quaternion to represent the shortest rotation from one\n   * vector to another.\n   *\n   * Both vectors are assumed to be unit length.\n   * @category Static\n   *\n   * @param out - the receiving quaternion.\n   * @param a - the initial vector\n   * @param b - the destination vector\n   * @returns `out`\n   */\n  static rotationTo(out: QuatLike, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): QuatLike {\n    const dot = Vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      Vec3.cross(Quat.#TMP_VEC3, Quat.#X_UNIT_VEC3, a);\n      if (Vec3.mag(Quat.#TMP_VEC3) < 0.000001) { Vec3.cross(Quat.#TMP_VEC3, Quat.#Y_UNIT_VEC3, a); }\n      Vec3.normalize(Quat.#TMP_VEC3, Quat.#TMP_VEC3);\n      Quat.setAxisAngle(out, Quat.#TMP_VEC3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      Vec3.cross(Quat.#TMP_VEC3, a, b);\n      out[0] = Quat.#TMP_VEC3[0];\n      out[1] = Quat.#TMP_VEC3[1];\n      out[2] = Quat.#TMP_VEC3[2];\n      out[3] = 1 + dot;\n      return Quat.normalize(out, out);\n    }\n  }\n\n  /**\n   * Performs a spherical linear interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static sqlerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, c: Readonly<QuatLike>,\n    d: Readonly<QuatLike>, t: number): QuatLike {\n    Quat.slerp(Quat.#TMP_QUAT1, a, d, t);\n    Quat.slerp(Quat.#TMP_QUAT2, b, c, t);\n    Quat.slerp(out, Quat.#TMP_QUAT1, Quat.#TMP_QUAT2, 2 * t * (1 - t));\n\n    return out;\n  }\n\n  /**\n   * Sets the specified quaternion with values corresponding to the given\n   * axes. Each axis is a vec3 and is expected to be unit length and\n   * perpendicular to all other specified axes.\n   * @category Static\n   *\n   * @param out - The receiving quaternion\n   * @param view - the vector representing the viewing direction\n   * @param right - the vector representing the local `right` direction\n   * @param up - the vector representing the local `up` direction\n   * @returns `out`\n   */\n  static setAxes(out: QuatLike, view: Readonly<Vec3Like>, right: Readonly<Vec3Like>, up: Readonly<Vec3Like>): QuatLike {\n    Quat.#TMP_MAT3[0] = right[0];\n    Quat.#TMP_MAT3[3] = right[1];\n    Quat.#TMP_MAT3[6] = right[2];\n\n    Quat.#TMP_MAT3[1] = up[0];\n    Quat.#TMP_MAT3[4] = up[1];\n    Quat.#TMP_MAT3[7] = up[2];\n\n    Quat.#TMP_MAT3[2] = -view[0];\n    Quat.#TMP_MAT3[5] = -view[1];\n    Quat.#TMP_MAT3[8] = -view[2];\n\n    return Quat.normalize(out, Quat.fromMat3(out, Quat.#TMP_MAT3));\n  }\n}\n\n// Methods which re-use the Vec4 implementation\nQuat.set = Vec4.set;\nQuat.add = Vec4.add;\nQuat.lerp = Vec4.lerp;\nQuat.normalize = Vec4.normalize;\nQuat.squaredLength = Vec4.squaredLength;\nQuat.sqrLen = Vec4.squaredLength;\nQuat.exactEquals = Vec4.exactEquals;\nQuat.equals = Vec4.equals;\nQuat.magnitude = Vec4.magnitude;\n\n// Instance method alias assignments\nQuat.prototype.mul = Quat.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nQuat.mul = Quat.multiply;\nQuat.mag = Quat.magnitude;\nQuat.length = Quat.magnitude;\nQuat.len = Quat.magnitude;\n", "import { Mat4 } from './Mat4.js';\nimport { Quat } from './Quat.js';\nimport { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat4Like, QuatLike, Quat2Like, Vec3Like } from '#gl-matrix/types';\n\n/**\n * Dual Quaternion\n */\nexport class Quat2 extends Float64Array {\n  // Temporary variables to prevent repeated allocations in the algorithms within Quat2.\n  // These are declared as TypedArrays to aid in tree-shaking.\n\n  static #TMP_QUAT = new Float64Array(4);\n  static #TMP_VEC3 = new Float64Array(3);\n\n  /**\n   * Create a {@link Quat2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Quat2Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 8:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBufferLike, values[1], 8); break;\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v, v, v, v, v, v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 8);\n        }\n        break;\n      }\n      default:\n        super(8);\n        this[3] = 1;\n        break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Quat2.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Quat2.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Quat2} into `this`.\n   * @category Methods\n   *\n   * @param a the source dual quaternion\n   * @returns `this`\n   */\n  copy(a: Readonly<Quat2Like>): this {\n    super.set(a);\n    return this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Quat2}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 8 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new identity {@link Quat2}\n   * @category Static\n   *\n   * @returns a new dual quaternion [real -> rotation, dual -> translation]\n   */\n  static create(): Quat2 {\n    return new Quat2();\n  }\n\n  /**\n   * Creates a {@link Quat2} quat initialized with values from an existing quaternion\n   * @category Static\n   *\n   * @param a - dual quaternion to clone\n   * @returns a new dual quaternion\n   */\n  static clone(a: Quat2Like): Quat2 {\n    return new Quat2(a);\n  }\n\n  /**\n   * Creates a new {@link Quat2}  initialized with the given values\n   * @category Static\n   *\n   * @param x1 - 1st X component\n   * @param y1 - 1st Y component\n   * @param z1 - 1st Z component\n   * @param w1 - 1st W component\n   * @param x2 - 2nd X component\n   * @param y2 - 2nd Y component\n   * @param z2 - 2nd Z component\n   * @param w2 - 2nd W component\n   * @returns a new dual quaternion\n   */\n  static fromValues(x1: number, y1: number, z1: number, w1: number,\n    x2: number, y2: number, z2: number, w2: number): Quat2 {\n    return new Quat2(x1, y1, z1, w1, x2, y2, z2, w2);\n  }\n\n  /**\n   * Creates a new {@link Quat2} from the given values (quat and translation)\n   * @category Static\n   *\n   * @param x1 - X component (rotation)\n   * @param y1 - Y component (rotation)\n   * @param z1 - Z component (rotation)\n   * @param w1 - W component (rotation)\n   * @param x2 - X component (translation)\n   * @param y2 - Y component (translation)\n   * @param z2 - Z component (translation)\n   * @returns a new dual quaternion\n   */\n  static fromRotationTranslationValues(x1: number, y1: number, z1: number, w1: number,\n    x2: number, y2: number, z2: number): Quat2 {\n    const ax = x2 * 0.5;\n    const ay = y2 * 0.5;\n    const az = z2 * 0.5;\n\n    return new Quat2(x1, y1, z1, w1,\n      ax * w1 + ay * z1 - az * y1,\n      ay * w1 + az * x1 - ax * z1,\n      az * w1 + ax * y1 - ay * x1,\n      -ax * x1 - ay * y1 - az * z1);\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion and a translation\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param q - a normalized quaternion\n   * @param t - translation vector\n   * @returns `out`\n   */\n  static fromRotationTranslation(out: Quat2Like, q: Readonly<QuatLike>, t: Readonly<Vec3Like>): Quat2Like {\n    const ax = t[0] * 0.5;\n    const ay = t[1] * 0.5;\n    const az = t[2] * 0.5;\n    const bx = q[0];\n    const by = q[1];\n    const bz = q[2];\n    const bw = q[3];\n    out[0] = bx;\n    out[1] = by;\n    out[2] = bz;\n    out[3] = bw;\n    out[4] = ax * bw + ay * bz - az * by;\n    out[5] = ay * bw + az * bx - ax * bz;\n    out[6] = az * bw + ax * by - ay * bx;\n    out[7] = -ax * bx - ay * by - az * bz;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a translation\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param t - translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Quat2Like, t: Readonly<Vec3Like>): Quat2Like {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = t[0] * 0.5;\n    out[5] = t[1] * 0.5;\n    out[6] = t[2] * 0.5;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param q - a normalized quaternion\n   * @returns `out`\n   */\n  static fromRotation(out: Quat2Like, q: Readonly<QuatLike>): Quat2Like {\n    out[0] = q[0];\n    out[1] = q[1];\n    out[2] = q[2];\n    out[3] = q[3];\n    out[4] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param a - the matrix\n   * @returns `out`\n   */\n  static fromMat4(out: Quat2Like, a: Readonly<Mat4Like>): Quat2Like {\n    Mat4.getRotation(Quat2.#TMP_QUAT, a);\n    Mat4.getTranslation(Quat2.#TMP_VEC3, a);\n    return Quat2.fromRotationTranslation(out, Quat2.#TMP_QUAT, Quat2.#TMP_VEC3);\n  }\n\n  /**\n   * Copy the values from one {@link Quat2} to another\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the source dual quaternion\n   * @returns `out`\n   */\n  static copy(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    return out;\n  }\n\n  /**\n   * Set a {@link Quat2} to the identity dual quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @returns `out`\n   */\n  static identity(out: QuatLike): QuatLike {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Quat2} to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x1 - 1st X component\n   * @param y1 - 1st Y component\n   * @param z1 - 1st Z component\n   * @param w1 - 1st W component\n   * @param x2 - 2nd X component\n   * @param y2 - 2nd Y component\n   * @param z2 - 2nd Z component\n   * @param w2 - 2nd W component\n   * @returns `out`\n   */\n  static set(out: Quat2Like, x1: number, y1: number, z1: number, w1: number,\n    x2: number, y2: number, z2: number, w2: number): Quat2Like {\n    out[0] = x1;\n    out[1] = y1;\n    out[2] = z1;\n    out[3] = w1;\n    out[4] = x2;\n    out[5] = y2;\n    out[6] = z2;\n    out[7] = w2;\n    return out;\n  }\n\n  /**\n   * Gets the real part of a dual quat\n   * @category Static\n   *\n   * @param out - real part\n   * @param a - Dual Quaternion\n   * @return `out`\n   */\n  static getReal(out: QuatLike, a: Readonly<Quat2Like>): QuatLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n\n  /**\n   * Gets the dual part of a dual quat\n   * @category Static\n   *\n   * @param out - dual part\n   * @param a - Dual Quaternion\n   * @return `out`\n   */\n  static getDual(out: QuatLike, a: Readonly<Quat2Like>): QuatLike {\n    out[0] = a[4];\n    out[1] = a[5];\n    out[2] = a[6];\n    out[3] = a[7];\n    return out;\n  }\n\n  /**\n   * Set the real component of a {@link Quat2} to the given quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - a quaternion representing the real part\n   * @return `out`\n   */\n  static setReal(out: Quat2Like, a: Readonly<QuatLike>): Quat2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n\n  /**\n   * Set the dual component of a {@link Quat2} to the given quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - a quaternion representing the dual part\n   * @return `out`\n   */\n  static setDual(out: Quat2Like, a: Readonly<QuatLike>): Quat2Like {\n    out[4] = a[0];\n    out[5] = a[1];\n    out[6] = a[2];\n    out[7] = a[3];\n    return out;\n  }\n\n  /**\n   * Gets the translation of a normalized {@link Quat2}\n   * @category Static\n   *\n   * @param out - the receiving translation vector\n   * @param a - Dual Quaternion to be decomposed\n   * @return `out`\n   */\n  static getTranslation(out: Vec3Like, a: Readonly<Quat2Like>): Vec3Like {\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const bx = -a[0];\n    const by = -a[1];\n    const bz = -a[2];\n    const bw = a[3];\n    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    return out;\n  }\n\n  /**\n   * Translates a {@link Quat2} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Quat2Like, a: Readonly<Quat2Like>, v: Readonly<Vec3Like>): Quat2Like {\n    const ax1 = a[0];\n    const ay1 = a[1];\n    const az1 = a[2];\n    const aw1 = a[3];\n    const bx1 = v[0] * 0.5;\n    const by1 = v[1] * 0.5;\n    const bz1 = v[2] * 0.5;\n    const ax2 = a[4];\n    const ay2 = a[5];\n    const az2 = a[6];\n    const aw2 = a[7];\n    out[0] = ax1;\n    out[1] = ay1;\n    out[2] = az1;\n    out[3] = aw1;\n    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the X axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateX(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateX(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the Y axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateY(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateY(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the Z axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateZ(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateZ(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} by a given quaternion (a * q)\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param q - quaternion to rotate by\n   * @returns `out`\n   */\n  static rotateByQuatAppend(out: Quat2Like, a: Readonly<Quat2Like>, q: Readonly<QuatLike>): Quat2Like {\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n\n    out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n    out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n    out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n    out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n    ax = a[4];\n    ay = a[5];\n    az = a[6];\n    aw = a[7];\n    out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n    out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n    out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n    out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} by a given quaternion (q * a)\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param q - quaternion to rotate by\n   * @param a - the dual quaternion to rotate\n   * @returns `out`\n   */\n  static rotateByQuatPrepend(out: Quat2Like, q: Readonly<QuatLike>, a: Readonly<Quat2Like>): Quat2Like {\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    let bx = a[0];\n    let by = a[1];\n    let bz = a[2];\n    let bw = a[3];\n\n    out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n    out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n    out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n    out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n    bx = a[4];\n    by = a[5];\n    bz = a[6];\n    bw = a[7];\n    out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n    out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n    out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n    out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around a given axis. Does the normalization automatically\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param axis - the axis to rotate around\n   * @param rad - how far the rotation should be\n   * @returns `out`\n   */\n  static rotateAroundAxis(out: Quat2Like, a: Readonly<Quat2Like>, axis: Readonly<Vec3Like>, rad: number): Quat2Like {\n    // Special case for rad = 0\n    if (Math.abs(rad) < GLM_EPSILON) {\n      return Quat2.copy(out, a);\n    }\n    const axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const bx = (s * axis[0]) / axisLength;\n    const by = (s * axis[1]) / axisLength;\n    const bz = (s * axis[2]) / axisLength;\n    const bw = Math.cos(rad);\n\n    const ax1 = a[0];\n    const ay1 = a[1];\n    const az1 = a[2];\n    const aw1 = a[3];\n    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    out[4] = ax * bw + aw * bx + ay * bz - az * by;\n    out[5] = ay * bw + aw * by + az * bx - ax * bz;\n    out[6] = az * bw + aw * bz + ax * by - ay * bx;\n    out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n    return out;\n  }\n\n  /**\n   * Adds two {@link Quat2}s\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    return out;\n  }\n\n  /**\n   * Multiplies two {@link Quat2}s\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns {quat2} out\n   */\n  static multiply(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like {\n    const ax0 = a[0];\n    const ay0 = a[1];\n    const az0 = a[2];\n    const aw0 = a[3];\n    const bx1 = b[4];\n    const by1 = b[5];\n    const bz1 = b[6];\n    const bw1 = b[7];\n    const ax1 = a[4];\n    const ay1 = a[5];\n    const az1 = a[6];\n    const aw1 = a[7];\n    const bx0 = b[0];\n    const by0 = b[1];\n    const bz0 = b[2];\n    const bw0 = b[3];\n    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n    out[4] =\n      ax0 * bw1 +\n      aw0 * bx1 +\n      ay0 * bz1 -\n      az0 * by1 +\n      ax1 * bw0 +\n      aw1 * bx0 +\n      ay1 * bz0 -\n      az1 * by0;\n    out[5] =\n      ay0 * bw1 +\n      aw0 * by1 +\n      az0 * bx1 -\n      ax0 * bz1 +\n      ay1 * bw0 +\n      aw1 * by0 +\n      az1 * bx0 -\n      ax1 * bz0;\n    out[6] =\n      az0 * bw1 +\n      aw0 * bz1 +\n      ax0 * by1 -\n      ay0 * bx1 +\n      az1 * bw0 +\n      aw1 * bz0 +\n      ax1 * by0 -\n      ay1 * bx0;\n    out[7] =\n      aw0 * bw1 -\n      ax0 * bx1 -\n      ay0 * by1 -\n      az0 * bz1 +\n      aw1 * bw0 -\n      ax1 * bx0 -\n      ay1 * by0 -\n      az1 * bz0;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Quat2.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like { return out; }\n\n  /**\n   * Scales a {@link Quat2} by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving dual quaterion\n   * @param a - the dual quaternion to scale\n   * @param b - scalar value to scale the dual quaterion by\n   * @returns `out`\n   */\n  static scale(out: Quat2Like, a: Readonly<Quat2Like>, b: number): Quat2Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Quat2}s (The dot product of the real parts)\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dot(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Performs a linear interpolation between two {@link Quat2}s\n   * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when `t = 0.5`)\n   * @category Static\n   *\n   * @param out - the receiving dual quat\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>, t: number): Quat2Like {\n    const mt = 1 - t;\n    if (Quat2.dot(a, b) < 0) { t = -t; }\n\n    out[0] = a[0] * mt + b[0] * t;\n    out[1] = a[1] * mt + b[1] * t;\n    out[2] = a[2] * mt + b[2] * t;\n    out[3] = a[3] * mt + b[3] * t;\n    out[4] = a[4] * mt + b[4] * t;\n    out[5] = a[5] * mt + b[5] * t;\n    out[6] = a[6] * mt + b[6] * t;\n    out[7] = a[7] * mt + b[7] * t;\n\n    return out;\n  }\n\n  /**\n   * Calculates the inverse of a {@link Quat2}. If they are normalized, conjugate is cheaper\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quat to calculate inverse of\n   * @returns `out`\n   */\n  static invert(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    const sqlen = Quat2.squaredLength(a);\n    out[0] = -a[0] / sqlen;\n    out[1] = -a[1] / sqlen;\n    out[2] = -a[2] / sqlen;\n    out[3] = a[3] / sqlen;\n    out[4] = -a[4] / sqlen;\n    out[5] = -a[5] / sqlen;\n    out[6] = -a[6] / sqlen;\n    out[7] = a[7] / sqlen;\n    return out;\n  }\n\n  /**\n   * Calculates the conjugate of a {@link Quat2}. If the dual quaternion is normalized, this function is faster than\n   * {@link Quat2.invert} and produces the same result.\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quaternion to calculate conjugate of\n   * @returns `out`\n   */\n  static conjugate(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    out[4] = -a[4];\n    out[5] = -a[5];\n    out[6] = -a[6];\n    out[7] = a[7];\n    return out;\n  }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to calculate length of\n   * @returns length of `a`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static magnitude(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Quat2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat2.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Quat2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat2.mag}\n   */\n  static len(a: Readonly<Quat2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to calculate squared length of\n   * @returns squared length of a\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static squaredLength(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<Quat2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Normalize a {@link Quat2}\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quaternion to normalize\n   * @returns `out`\n   */\n  static normalize(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\n    let magnitude = Quat2.squaredLength(a);\n    if (magnitude > 0) {\n      magnitude = Math.sqrt(magnitude);\n\n      const a0 = a[0] / magnitude;\n      const a1 = a[1] / magnitude;\n      const a2 = a[2] / magnitude;\n      const a3 = a[3] / magnitude;\n\n      const b0 = a[4];\n      const b1 = a[5];\n      const b2 = a[6];\n      const b3 = a[7];\n\n      const a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n\n      out[0] = a0;\n      out[1] = a1;\n      out[2] = a2;\n      out[3] = a3;\n\n      out[4] = (b0 - a0 * a_dot_b) / magnitude;\n      out[5] = (b1 - a1 * a_dot_b) / magnitude;\n      out[6] = (b2 - a2 * a_dot_b) / magnitude;\n      out[7] = (b3 - a3 * a_dot_b) / magnitude;\n    }\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Quat2Like>): string {\n    return `Quat2(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether the {@link Quat2}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first dual quaternion.\n   * @param b - The second dual quaternion.\n   * @returns True if the dual quaternions are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7]\n    );\n  }\n\n  /**\n   * Returns whether the {@link Quat2}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first dual quaternion.\n   * @param b - The second dual quaternion.\n   * @returns True if the dual quaternions are equal, false otherwise.\n   */\n  static equals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\n    );\n  }\n}\n\n// Methods which re-use the Quat implementation\n// @ts-expect-error: Ignore type error coercion.\nQuat2.dot = Quat.dot;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.squaredLength = Quat.squaredLength;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.sqrLen = Quat.squaredLength;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.mag = Quat.magnitude;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.length = Quat.magnitude;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.len = Quat.magnitude;\n\n// Static method alias assignments\nQuat2.mul = Quat2.multiply;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2Like, Mat2dLike, Mat3Like, Mat4Like, Vec2Like } from '#gl-matrix/types';\n\n/**\n * 2 Dimensional Vector\n */\nexport class Vec2 extends Float64Array {\n  /**\n   * Create a {@link Vec2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Vec2Like> | ArrayBufferLike, number?] | number[]) {\n    switch (values.length) {\n      case 2:{\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, values[1]!]);\n        } else {\n          super(v as ArrayBufferLike, values[1], 2);\n        }\n        break;\n      }\n      case 1: {\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, v]);\n        } else {\n          super(v as ArrayBufferLike, 0, 2);\n        }\n        break;\n      }\n      default:\n        super(2); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color Components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color Components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec2.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    return Math.hypot(this[0], this[1]);\n  }\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * The squared magnitude (length) of `this`.\n   * Equivalent to `Vec2.squaredMagnitude(this);`\n   *\n   * @category Accessors\n   */\n  get squaredMagnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    return x * x + y * y;\n  }\n\n  /**\n   * Alias for {@link Vec2.squaredMagnitude}\n   *\n   * @category Accessors\n   */\n  get sqrMag(): number { return this.squaredMagnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec2.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Vec2.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Vec2} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec2Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  // Instead of zero(), use a.fill(0) for instances;\n\n  /**\n   * Adds a {@link Vec2} to `this`.\n   * Equivalent to `Vec2.add(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec2Like>): this {\n    this[0] += b[0];\n    this[1] += b[1];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec2} from `this`.\n   * Equivalent to `Vec2.subtract(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec2Like>): this {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec2.subtract}\n   * @category Methods\n   */\n  sub(b: Readonly<Vec2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Multiplies `this` by a {@link Vec2}.\n   * Equivalent to `Vec2.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec2Like>): this {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec2.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Vec2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Divides `this` by a {@link Vec2}.\n   * Equivalent to `Vec2.divide(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec2Like>): this {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec2.divide}\n   * @category Methods\n   */\n  div(b: Readonly<Vec2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec2.scale(this, this, b);`\n   * @category Methods\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): this {\n    this[0] *= b;\n    this[1] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec2.scaleAndAdd(this, this, b, scale);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec2Like>, scale: number): this {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the Euclidean distance between another {@link Vec2} and `this`.\n   * Equivalent to `Vec2.distance(this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec2Like>): number {\n    return Vec2.distance(this, b);\n  }\n  /**\n   * Alias for {@link Vec2.distance}\n   * @category Methods\n   */\n  dist(b: Readonly<Vec2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared Euclidean distance between another {@link Vec2} and `this`.\n   * Equivalent to `Vec2.squaredDistance(this, b);`\n   * @category Methods\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec2Like>): number {\n    return Vec2.squaredDistance(this, b);\n  }\n  /**\n   * Alias for {@link Vec2.squaredDistance}\n   * @category Methods\n   */\n  sqrDist(b: Readonly<Vec2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec2.negate(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  negate(): this {\n    this[0] *= -1;\n    this[1] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec2.inverse(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    return this;\n  }\n\n  /**\n   * Sets each component of `this` to it's absolute value.\n   * Equivalent to `Vec2.abs(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  abs(): this {\n    this[0] = Math.abs(this[0]);\n    this[1] = Math.abs(this[1]);\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec2}.\n   * Equivalent to `Vec2.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec2Like>): number {\n    return this[0] * b[0] + this[1] * b[1];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec2.normalize(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  normalize(): this {\n    return Vec2.normalize(this, this) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Vec2}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 2 * Float64Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, empty {@link Vec2}\n   * @category Static\n   *\n   * @returns A new 2D vector\n   */\n  static create(): Vec2 {\n    return new Vec2();\n  }\n\n  /**\n   * Creates a new {@link Vec2} initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - Vector to clone\n   * @returns A new 2D vector\n   */\n  static clone(a: Readonly<Vec2Like>): Vec2 {\n    return new Vec2(a);\n  }\n\n  /**\n   * Creates a new {@link Vec2} initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @returns A new 2D vector\n   */\n  static fromValues(x: number, y: number): Vec2 {\n    return new Vec2(x, y);\n  }\n\n  /**\n   * Copy the values from one {@link Vec2} to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - The source vector\n   * @returns `out`\n   */\n  static copy(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec2} to the given values\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @returns `out`\n   */\n  static set(out: Vec2Like, x: number, y: number): Vec2Like {\n    out[0] = x;\n    out[1] = y;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static subtract(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec2.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\n\n  /**\n   * Multiplies two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec2.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\n\n  /**\n   * Divides two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static divide(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec2.divide}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static div(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\n\n  /**\n   * Math.ceil the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to ceil\n   * @returns `out`\n   */\n  static ceil(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to floor\n   * @returns `out`\n   */\n  static floor(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static min(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static max(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n  }\n\n  /**\n   * Math.round the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to round\n   * @returns `out`\n   */\n  static round(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n  }\n\n  /**\n   * Scales a {@link Vec2} by a scalar number\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to scale\n   * @param b - Amount to scale the vector by\n   * @returns `out`\n   */\n  static scale(out: Vec2Like, a: Readonly<Vec2Like>, b: number): Vec2Like {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n  }\n\n  /**\n   * Adds two Vec2's after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @param scale - The amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, scale: number): Vec2Like {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the Euclidean distance between two {@link Vec2}s\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns distance between `a` and `b`\n   */\n  static distance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    return Math.hypot(b[0] - a[0], b[1] - a[1]);\n  }\n\n  /**\n   * Alias for {@link Vec2.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\n\n  /**\n   * Calculates the squared Euclidean distance between two {@link Vec2}s\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns Squared distance between `a` and `b`\n   */\n  static squaredDistance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    return x * x + y * y;\n  }\n\n  /**\n   * Alias for {@link Vec2.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrDist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec2}\n   * @category Static\n   *\n   * @param a - Vector to calculate magnitude of\n   * @returns Magnitude of a\n   */\n  static magnitude(a: Readonly<Vec2Like>): number {\n    const x = a[0];\n    const y = a[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec2.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   *\n   * @param a - vector to calculate length of\n   * @returns length of a\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Vec2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec2.mag}\n   */\n  static len(a: Readonly<Vec2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Vec2}\n   * @category Static\n   *\n   * @param a - Vector to calculate squared length of\n   * @returns Squared length of a\n   */\n  static squaredLength(a: Readonly<Vec2Like>): number {\n    const x = a[0];\n    const y = a[1];\n    return x * x + y * y;\n  }\n\n  /**\n   * Alias for {@link Vec2.squaredLength}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrLen(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\n\n  /**\n   * Negates the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to negate\n   * @returns `out`\n   */\n  static negate(out: Vec2Like, a: Readonly<Vec2Like>) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to invert\n   * @returns `out`\n   */\n  static inverse(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n  }\n\n  /**\n   * Returns the absolute value of the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to compute the absolute values of\n   * @returns `out`\n   */\n  static abs(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    return out;\n  }\n\n  /**\n   * Normalize a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to normalize\n   * @returns `out`\n   */\n  static normalize(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\n    const x = a[0];\n    const y = a[1];\n    let len = x * x + y * y;\n    if (len > 0) {\n      // TODO: evaluate use of glm_invsqrt here?\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Vec2}s\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns Dot product of `a` and `b`\n   */\n  static dot(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n\n  /**\n   * Computes the cross product of two {@link Vec2}s\n   * Note that the cross product must by definition produce a 3D vector.\n   * For this reason there is also not instance equivalent for this function.\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static cross(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\n    const z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @param t - Interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, t: number): Vec2Like {\n    const ax = a[0];\n    const ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat2}\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat2(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat2Like>): Vec2Like {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat2d}\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat2d(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat2dLike>): Vec2Like {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat3}\n   * 3rd vector component is implicitly '1'\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat3(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat3Like>): Vec2Like {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat4}\n   * 3rd vector component is implicitly '0'\n   * 4th vector component is implicitly '1'\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat4(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat4Like>): Vec2Like {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n  }\n\n  /**\n   * Rotate a 2D vector\n   * @category Static\n   *\n   * @param out - The receiving {@link Vec2}\n   * @param a - The {@link Vec2} point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotate(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, rad: number): Vec2Like {\n    // Translate point to the origin\n    const p0 = a[0] - b[0];\n    const p1 = a[1] - b[1];\n    const sinC = Math.sin(rad);\n    const cosC = Math.cos(rad);\n\n    // perform rotation and translate to correct position\n    out[0] = p0 * cosC - p1 * sinC + b[0];\n    out[1] = p0 * sinC + p1 * cosC + b[1];\n\n    return out;\n  }\n\n  /**\n   * Get the angle between two 2D vectors\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns The angle in radians\n   */\n  static angle(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    const x1 = a[0];\n    const y1 = a[1];\n    const x2 = b[0];\n    const y2 = b[1];\n    // mag is the product of the magnitudes of a and b\n    const  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2);\n    // mag &&.. short circuits if mag == 0\n    const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n    // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n  }\n\n  /**\n   * Set the components of a {@link Vec2} to zero\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @returns `out`\n   */\n  static zero(out: Vec2Like): Vec2Like {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns whether the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns `true` if the vectors components are ===, `false` otherwise.\n   */\n  static exactEquals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n\n  /**\n   * Returns whether the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns `true` if the vectors are approximately equal, `false` otherwise.\n   */\n  static equals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const b0 = b[0];\n    const b1 = b[1];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n    );\n  }\n\n  /**\n   * Returns a string representation of a vector\n   * @category Static\n   *\n   * @param a - Vector to represent as a string\n   * @returns String representation of the vector\n   */\n  static str(a: Readonly<Vec2Like>): string {\n    return `Vec2(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nVec2.prototype.sub = Vec2.prototype.subtract;             // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.mul = Vec2.prototype.multiply;             // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.div = Vec2.prototype.divide;               // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.dist = Vec2.prototype.distance;            // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.sqrDist = Vec2.prototype.squaredDistance;  // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nVec2.sub = Vec2.subtract;\nVec2.mul = Vec2.multiply;\nVec2.div = Vec2.divide;\nVec2.dist = Vec2.distance;\nVec2.sqrDist = Vec2.squaredDistance;\nVec2.sqrLen = Vec2.squaredLength;\nVec2.mag = Vec2.magnitude;\nVec2.length = Vec2.magnitude;\nVec2.len = Vec2.magnitude;\n"],
  "mappings": "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",
  "names": ["GLM_EPSILON", "Mat2", "_Mat2", "#IDENTITY_2X2", "values", "v", "a", "b", "rad", "out", "a1", "a0", "a2", "a3", "det", "b0", "b1", "b2", "b3", "s", "c", "v0", "v1", "scale", "L", "D", "U", "GLM_EPSILON", "Mat2d", "_Mat2d", "#IDENTITY_2X3", "values", "v", "a", "b", "rad", "out", "aa", "ab", "ac", "ad", "atx", "aty", "det", "a0", "a1", "a2", "a3", "a4", "a5", "b0", "b1", "b2", "b3", "b4", "b5", "v0", "v1", "s", "c", "scale", "GLM_EPSILON", "Mat3", "_Mat3", "#IDENTITY_3X3", "values", "v", "a", "b", "rad", "out", "a01", "a02", "a12", "a00", "a10", "a11", "a20", "a21", "a22", "b01", "b11", "b21", "det", "b0", "b1", "b2", "x", "s", "c", "y", "q", "z", "w", "x2", "y2", "z2", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "a03", "a13", "a23", "a30", "a31", "a32", "a33", "b00", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "ax", "ay", "az", "bx", "by", "bz", "cx", "cy", "cz", "width", "height", "scale", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "b3", "b4", "b5", "b6", "b7", "b8", "GLM_EPSILON", "Mat4", "_Mat4", "#IDENTITY_4X4", "#TMP_VEC3", "values", "v", "a", "b", "rad", "axis", "fovy", "aspect", "near", "far", "left", "right", "bottom", "top", "out", "a01", "a02", "a03", "a12", "a13", "a23", "a00", "a10", "a11", "a20", "a21", "a22", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "x", "y", "z", "len", "s", "c", "t", "b12", "b20", "b21", "b22", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "bx", "by", "bz", "bw", "ax", "ay", "az", "aw", "magnitude", "cx", "cy", "cz", "mat", "m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "out_r", "out_t", "out_s", "sx", "sy", "sz", "o", "ox", "oy", "oz", "out0", "out1", "out2", "out4", "out5", "out6", "out8", "out9", "out10", "yx", "zx", "zy", "rl", "tb", "nf", "f", "fov", "upTan", "downTan", "leftTan", "rightTan", "xScale", "yScale", "lr", "bt", "eye", "center", "up", "eyex", "eyey", "eyez", "upx", "upy", "upz", "centerx", "centery", "centerz", "z0", "z1", "x0", "x1", "y0", "y1", "target", "scale", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a14", "a15", "b13", "b14", "b15", "GLM_EPSILON", "Vec3", "_Vec3", "values", "v", "value", "x", "y", "z", "a", "b", "scale", "out", "len", "ax", "ay", "az", "bx", "by", "bz", "t", "angle", "sinTotal", "ratioA", "ratioB", "c", "d", "factorTimes2", "factor1", "factor2", "factor3", "factor4", "inverseFactor", "inverseFactorTimesTwo", "m", "w", "q", "qx", "qy", "qz", "w2", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "rad", "py", "pz", "px", "mag", "cosine", "a0", "a1", "a2", "b0", "b1", "b2", "GLM_EPSILON", "Vec4", "_Vec4", "values", "v", "value", "x", "y", "z", "w", "a", "b", "scale", "out", "len", "u", "c", "d", "e", "f", "g", "i", "j", "t", "ax", "ay", "az", "aw", "m", "q", "qx", "qy", "qz", "qw", "ix", "iy", "iz", "iw", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "GLM_EPSILON", "Quat", "_Quat", "#DEFAULT_ANGLE_ORDER", "#TMP_QUAT1", "#TMP_QUAT2", "#TMP_MAT3", "#TMP_VEC3", "#X_UNIT_VEC3", "#Y_UNIT_VEC3", "values", "v", "value", "x", "y", "z", "w", "a", "b", "rad", "scale", "out", "axis", "out_axis", "q", "dotproduct", "ax", "ay", "az", "aw", "bx", "by", "bz", "bw", "r", "et", "s", "t", "scale0", "scale1", "cosom", "omega", "sinom", "a0", "a1", "a2", "a3", "dot", "invDot", "m", "fTrace", "fRoot", "j", "k", "order", "halfToRad", "sx", "cx", "sy", "cy", "sz", "cz", "Vec3", "c", "d", "view", "right", "up", "Vec4", "GLM_EPSILON", "Quat2", "_Quat2", "#TMP_QUAT", "#TMP_VEC3", "values", "v", "a", "x1", "y1", "z1", "w1", "x2", "y2", "z2", "w2", "ax", "ay", "az", "out", "q", "t", "bx", "by", "bz", "bw", "Mat4", "aw", "ax1", "ay1", "az1", "aw1", "bx1", "by1", "bz1", "ax2", "ay2", "az2", "aw2", "rad", "Quat", "qx", "qy", "qz", "qw", "axis", "axisLength", "s", "b", "ax0", "ay0", "az0", "aw0", "bw1", "bx0", "by0", "bz0", "bw0", "mt", "sqlen", "magnitude", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "a_dot_b", "a4", "a5", "a6", "a7", "b4", "b5", "b6", "b7", "GLM_EPSILON", "Vec2", "_Vec2", "values", "v", "value", "x", "y", "a", "b", "scale", "out", "len", "z", "t", "ax", "ay", "m", "rad", "p0", "p1", "sinC", "cosC", "x1", "y1", "x2", "y2", "mag", "cosine", "a0", "a1", "b0", "b1"]
}
