{
  "version": 3,
  "sources": ["../../src/types/index.ts"],
  "sourcesContent": ["/**\r\n * Provides all common type declarations shared across `gl-matrix`.\r\n *\r\n * ```ts\r\n * import { Vec3 } from 'gl-matrix';\r\n * import type { Vec3Like } from 'gl-matrix/types';\r\n *\r\n * const vec: Vec3Like = new Vec3(0, 1, 2);\r\n * ```\r\n *\r\n * For JSDoc using the new Typescript 5.5 `@import` tag:\r\n * ```js\r\n * /**\r\n *  * @import { Vec3Like } from 'gl-matrix/types'\r\n *  *\\/\r\n * ```\r\n *\r\n * For JSDoc using the older `import types` Typescript mechanism:\r\n * ```js\r\n * /**\r\n *  * @type {import('gl-matrix/types').Vec3Like}\r\n *  *\\/\r\n * ```\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * The floating-point typed arrays that can be used in place of a vector, matrix, or quaternion.\r\n */\r\ntype FloatArray = Float32Array | Float64Array;\r\n\r\n/**\r\n * A 2x2 Matrix given as a {@link Mat2}, a 4-element floating-point TypedArray, or an array of 4 numbers.\r\n */\r\ntype Mat2Like = [\r\n  number, number,\r\n  number, number\r\n] | FloatArray;\r\n\r\n/**\r\n * A 2x3 Matrix given as a {@link Mat2d}, a 6-element floating-point TypedArray, or an array of 6 numbers.\r\n */\r\ntype Mat2dLike = [\r\n  number, number,\r\n  number, number,\r\n  number, number\r\n] | FloatArray;\r\n\r\n/**\r\n * A 3x3 Matrix given as a {@link Mat3}, a 9-element floating-point TypedArray, or an array of 9 numbers.\r\n */\r\ntype Mat3Like = [\r\n  number, number, number,\r\n  number, number, number,\r\n  number, number, number\r\n] | FloatArray;\r\n\r\n/**\r\n * A 4x4 Matrix given as a {@link Mat4}, a 16-element floating-point TypedArray, or an array of 16 numbers.\r\n */\r\ntype Mat4Like = [\r\n  number, number, number, number,\r\n  number, number, number, number,\r\n  number, number, number, number,\r\n  number, number, number, number\r\n] | FloatArray;\r\n\r\n/**\r\n * A Quaternion given as a {@link Quat}, a 4-element floating-point TypedArray, or an array of 4 numbers.\r\n */\r\ntype QuatLike = Vec4Like;\r\n\r\n/**\r\n * A Dual Quaternion given as a {@link Quat2}, an 8-element floating-point TypedArray, or an array of 8 numbers.\r\n */\r\ntype Quat2Like = [\r\n  number, number, number, number,\r\n  number, number, number, number\r\n] | FloatArray;\r\n\r\n/**\r\n * A 2-dimensional vector given as a {@link Vec2}, a 2-element floating-point TypedArray, or an array of 2 numbers.\r\n */\r\ntype Vec2Like = [number, number] | FloatArray;\r\n\r\n/**\r\n * A 3-dimensional vector given as a {@link Vec3}, a 3-element floating-point TypedArray, or an array of 3 numbers.\r\n */\r\ntype Vec3Like = [number, number, number] | FloatArray;\r\n\r\n/**\r\n * A 4-dimensional vector given as a {@link Vec4}, a 4-element floating-point TypedArray, or an array of 4 numbers.\r\n */\r\ntype Vec4Like = [number, number, number, number] | FloatArray;\r\n\r\nexport {\r\n  FloatArray,\r\n  Mat2Like,\r\n  Mat2dLike,\r\n  Mat3Like,\r\n  Mat4Like,\r\n  QuatLike,\r\n  Quat2Like,\r\n  Vec2Like,\r\n  Vec3Like,\r\n  Vec4Like\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;;",
  "names": []
}
