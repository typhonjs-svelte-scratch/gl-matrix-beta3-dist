{
  "version": 3,
  "sources": ["../src/index.ts", "../src/_lib/f32/Mat2.ts", "../src/_lib/f32/Mat2d.ts", "../src/_lib/f32/Mat3.ts", "../src/_lib/f32/Mat4.ts", "../src/_lib/f32/Vec3.ts", "../src/_lib/f32/Vec4.ts", "../src/_lib/f32/Quat.ts", "../src/_lib/f32/Quat2.ts", "../src/_lib/f32/Vec2.ts"],
  "sourcesContent": ["/**\r\n * Provides the modern `gl-matrix` API (32-bit). All classes extend from `Float32Array`.\r\n *\r\n * ```js\r\n * import { Vec3 } from 'gl-matrix';\r\n *\r\n * const vec = new Vec3(0, 1, 2);\r\n * ```\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\nexport * from './_lib/f32/index.js';\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat2Like, Vec2Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * A 2x2 Matrix\r\n */\r\nexport class Mat2 extends Float32Array {\r\n  static #IDENTITY_2X2 = new Float32Array([\r\n    1, 0,\r\n    0, 1\r\n  ]);\r\n\r\n  /**\r\n   * Create a {@link Mat2}.\r\n   */\r\n  constructor(...values: [Readonly<Mat2Like> | ArrayBufferLike, number?] | number[] ) {\r\n    switch(values.length) {\r\n      case 4:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\r\n      case 1:\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([\r\n            v, v,\r\n            v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 4);\r\n        }\r\n        break;\r\n      default:\r\n        super(Mat2.#IDENTITY_2X2); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Mat2.str(this);`\r\n   */\r\n   get str(): string {\r\n    return Mat2.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instance methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Mat2} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Mat2Like>): Mat2 {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set `this` to the identity matrix\r\n   * Equivalent to Mat2.identity(this)\r\n   *\r\n   * @returns `this`\r\n   */\r\n  identity(): Mat2 {\r\n    this.set(Mat2.#IDENTITY_2X2);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies this {@link Mat2} against another one\r\n   * Equivalent to `Mat2.multiply(this, this, b);`\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Mat2Like>): Mat2 {\r\n    return Mat2.multiply(this, this, b) as Mat2;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat2.multiply}\r\n   */\r\n  mul(b: Readonly<Mat2Like>): Mat2 { return this; }\r\n\r\n  /**\r\n   * Transpose this {@link Mat2}\r\n   * Equivalent to `Mat2.transpose(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  transpose(): Mat2 {\r\n    return Mat2.transpose(this, this) as Mat2;\r\n  }\r\n\r\n  /**\r\n   * Inverts this {@link Mat2}\r\n   * Equivalent to `Mat4.invert(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Mat2 {\r\n    return Mat2.invert(this, this) as Mat2;\r\n  }\r\n\r\n  /**\r\n   * Scales this {@link Mat2} by the dimensions in the given vec3 not using vectorization\r\n   * Equivalent to `Mat2.scale(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec2} to scale the matrix by\r\n   * @returns `this`\r\n   */\r\n  scale(v: Readonly<Vec2Like>): Mat2 {\r\n    return Mat2.scale(this, this, v) as Mat2;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat2} by the given angle around the given axis\r\n   * Equivalent to `Mat2.rotate(this, this, rad);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  rotate(rad: number): Mat2 {\r\n    return Mat2.rotate(this, this, rad) as Mat2;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Mat2}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 4 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, identity {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @returns A new {@link Mat2}\r\n   */\r\n  static create(): Mat2 {\r\n    return new Mat2();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Mat2} initialized with values from an existing matrix\r\n   * @category Static\r\n   *\r\n   * @param a - Matrix to clone\r\n   * @returns A new {@link Mat2}\r\n   */\r\n  static clone(a: Readonly<Mat2Like>): Mat2 {\r\n    return new Mat2(a);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Mat2} to another\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - Matrix to copy\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Mat2Like, a: Readonly<Mat2Like>): Mat2Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link Mat2} with the given values\r\n   * @category Static\r\n   *\r\n   * @param values - Matrix components\r\n   * @returns A new {@link Mat2}\r\n   */\r\n  static fromValues(...values: number[]): Mat2 {\r\n    return new Mat2(...values);\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Mat2} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @param values - Matrix components\r\n   * @returns `out`\r\n   */\r\n  static set(out: Mat2Like, ...values: number[]): Mat2Like {\r\n    out[0] = values[0];\r\n    out[1] = values[1];\r\n    out[2] = values[2];\r\n    out[3] = values[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Mat2} to the identity matrix\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @returns `out`\r\n   */\r\n  static identity(out: Mat2Like): Mat2Like {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transpose the values of a {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out`\r\n   */\r\n  static transpose(out: Mat2Like, a: Readonly<Mat2Like>): Mat2Like {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache\r\n    // some values\r\n    if (out === a) {\r\n      let a1 = a[1];\r\n      out[1] = a[2];\r\n      out[2] = a1;\r\n    } else {\r\n      out[0] = a[0];\r\n      out[1] = a[2];\r\n      out[2] = a[1];\r\n      out[3] = a[3];\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Inverts a {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out` or `null` if the matrix is not invertable\r\n   */\r\n  static invert(out: Mat2Like, a: Mat2Like): Mat2Like | null {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n\r\n    // Calculate the determinant\r\n    let det = a0 * a3 - a2 * a1;\r\n\r\n    if (!det) {\r\n      return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = a3 * det;\r\n    out[1] = -a1 * det;\r\n    out[2] = -a2 * det;\r\n    out[3] = a0 * det;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjugate of a {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out`\r\n   */\r\n  static adjoint(out: Mat2Like, a: Mat2Like): Mat2Like {\r\n    // Caching this value is necessary if out == a\r\n    const a0 = a[0];\r\n    out[0] = a[3];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the determinant of a {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @param a - the source matrix\r\n   * @returns determinant of a\r\n   */\r\n  static determinant(a: Readonly<Mat2Like>): number {\r\n    return a[0] * a[3] - a[2] * a[1];\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat2}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts matrix b from matrix a\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat2.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like { return out; }\r\n\r\n  /**\r\n   * Multiplies two {@link Mat2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    out[0] = a0 * b0 + a2 * b1;\r\n    out[1] = a1 * b0 + a3 * b1;\r\n    out[2] = a0 * b2 + a2 * b3;\r\n    out[3] = a1 * b2 + a3 * b3;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat2.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): Mat2Like { return out; }\r\n\r\n  /**\r\n   * Rotates a {@link Mat2} by the given angle\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static rotate(out: Mat2Like, a: Readonly<Mat2Like>, rad: number): Mat2Like {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n    out[0] = a0 * c + a2 * s;\r\n    out[1] = a1 * c + a3 * s;\r\n    out[2] = a0 * -s + a2 * c;\r\n    out[3] = a1 * -s + a3 * c;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales the {@link Mat2} by the dimensions in the given {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param v - the {@link Vec2} to scale the matrix by\r\n   * @returns `out`\r\n   **/\r\n  static scale(out: Mat2Like, a: Readonly<Mat2Like>, v: Readonly<Vec2Like>): Mat2Like {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const v0 = v[0];\r\n    const v1 = v[1];\r\n    out[0] = a0 * v0;\r\n    out[1] = a1 * v0;\r\n    out[2] = a2 * v1;\r\n    out[3] = a3 * v1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat2} from a given angle around a given axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat2.identity(dest);\r\n   *     mat2.rotate(dest, dest, rad);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat2} receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static fromRotation(out: Mat2Like, rad: number): Mat2Like {\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n    out[0] = c;\r\n    out[1] = s;\r\n    out[2] = -s;\r\n    out[3] = c;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat2} from a vector scaling\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat2.identity(dest);\r\n   *     mat2.scale(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat2} receiving operation result\r\n   * @param v - Scaling vector\r\n   * @returns `out`\r\n   */\r\n  static fromScaling(out: Mat2Like, v: Readonly<Vec2Like>): Mat2Like {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = v[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns Frobenius norm of a {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @param a - the matrix to calculate Frobenius norm of\r\n   * @returns Frobenius norm\r\n   */\r\n  static frob(a: Readonly<Mat2Like>): number {\r\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);\r\n  }\r\n\r\n  /**\r\n   * Multiply each element of a {@link Mat2} by a scalar.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param b - amount to scale the matrix's elements by\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalar(out: Mat2Like, a: Readonly<Mat2Like>, b: number): Mat2Like {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat2}'s after multiplying each element of the second operand by a scalar value.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param scale - the amount to scale b's elements by before adding\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalarAndAdd(out: Mat2Like, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>, scale: number): Mat2Like {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    out[2] = a[2] + b[2] * scale;\r\n    out[3] = a[3] + b[3] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n   * @category Static\r\n   *\r\n   * @param L - the lower triangular matrix\r\n   * @param D - the diagonal matrix\r\n   * @param U - the upper triangular matrix\r\n   * @param a - the input matrix to factorize\r\n   */\r\n\r\n  static LDU(L: Mat2Like, D: Readonly<Mat2Like>, U: Mat2Like, a: Readonly<Mat2Like>) {\r\n    L[2] = a[2] / a[0];\r\n    U[0] = a[0];\r\n    U[1] = a[1];\r\n    U[3] = a[3] - L[2] * U[1];\r\n    return [L, D, U];\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat2}s have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\r\n    return (\r\n      a[0] === b[0] &&\r\n      a[1] === b[1] &&\r\n      a[2] === b[2] &&\r\n      a[3] === b[3]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat2}s have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\r\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a {@link Mat2}\r\n   * @category Static\r\n   *\r\n   * @param a - matrix to represent as a string\r\n   * @returns string representation of the matrix\r\n   */\r\n  static str(a: Readonly<Mat2Like>): string {\r\n    return `Mat2(${a.join(', ')})`;\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nMat2.prototype.mul = Mat2.prototype.multiply;\r\n\r\n// Static method alias assignments\r\nMat2.mul = Mat2.multiply;\r\nMat2.sub = Mat2.subtract;\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat2dLike, Vec2Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * A 2x3 Matrix\r\n */\r\nexport class Mat2d extends Float32Array {\r\n  static #IDENTITY_2X3 = new Float32Array([\r\n    1, 0,\r\n    0, 1,\r\n    0, 0,\r\n  ]);\r\n\r\n  /**\r\n   * Create a {@link Mat2}.\r\n   */\r\n  constructor(...values: [Readonly<Mat2dLike> | ArrayBufferLike, number?] | number[] ) {\r\n    switch(values.length) {\r\n      case 6:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 6); break;\r\n      case 1:\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([\r\n            v, v,\r\n            v, v,\r\n            v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 6);\r\n        }\r\n        break;\r\n      default:\r\n        super(Mat2d.#IDENTITY_2X3); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Mat2d.str(this);`\r\n   */\r\n   get str(): string {\r\n    return Mat2d.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Mat2d} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Mat2dLike>): Mat2d {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set `this` to the identity matrix\r\n   * Equivalent to Mat2d.identity(this)\r\n   *\r\n   * @returns `this`\r\n   */\r\n  identity(): Mat2d {\r\n    this.set(Mat2d.#IDENTITY_2X3);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies this {@link Mat2d} against another one\r\n   * Equivalent to `Mat2d.multiply(this, this, b);`\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Mat2dLike>): Mat2d {\r\n    return Mat2d.multiply(this, this, b) as Mat2d;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat2d.multiply}\r\n   */\r\n  mul(b: Readonly<Mat2dLike>): Mat2d { return this; }\r\n\r\n  /**\r\n   * Translate this {@link Mat2d} by the given vector\r\n   * Equivalent to `Mat2d.translate(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec2} to translate by\r\n   * @returns `this`\r\n   */\r\n  translate(v: Readonly<Vec2Like>): Mat2d {\r\n    return Mat2d.translate(this, this, v) as Mat2d;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat2d} by the given angle around the given axis\r\n   * Equivalent to `Mat2d.rotate(this, this, rad);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  rotate(rad: number): Mat2d {\r\n    return Mat2d.rotate(this, this, rad) as Mat2d;\r\n  }\r\n\r\n  /**\r\n   * Scales this {@link Mat2d} by the dimensions in the given vec3 not using vectorization\r\n   * Equivalent to `Mat2d.scale(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec2} to scale the matrix by\r\n   * @returns `this`\r\n   */\r\n  scale(v: Readonly<Vec2Like>): Mat2d {\r\n    return Mat2d.scale(this, this, v) as Mat2d;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Mat2d}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 6 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, identity {@link Mat2d}\r\n   * @category Static\r\n   *\r\n   * @returns A new {@link Mat2d}\r\n   */\r\n  static create(): Mat2d {\r\n    return new Mat2d();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Mat2d} initialized with values from an existing matrix\r\n   * @category Static\r\n   *\r\n   * @param a - Matrix to clone\r\n   * @returns A new {@link Mat2d}\r\n   */\r\n  static clone(a: Readonly<Mat2dLike>): Mat2d {\r\n    return new Mat2d(a);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Mat2d} to another\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - Matrix to copy\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Mat2dLike, a: Readonly<Mat2dLike>): Mat2dLike {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link Mat2d} with the given values\r\n   * @category Static\r\n   *\r\n   * @param values - Matrix components\r\n   * @returns A new {@link Mat2d}\r\n   */\r\n  static fromValues(...values: number[]): Mat2d {\r\n    return new Mat2d(...values);\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Mat2d} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @param values - Matrix components\r\n   * @returns `out`\r\n   */\r\n  static set(out: Mat2dLike, ...values: number[]): Mat2dLike {\r\n    out[0] = values[0];\r\n    out[1] = values[1];\r\n    out[2] = values[2];\r\n    out[3] = values[3];\r\n    out[4] = values[4];\r\n    out[5] = values[5];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Mat2d} to the identity matrix\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @returns `out`\r\n   */\r\n  static identity(out: Mat2dLike): Mat2dLike {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Inverts a {@link Mat2d}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out` or `null` if the matrix is not invertable\r\n   */\r\n  static invert(out: Mat2dLike, a: Mat2dLike): Mat2dLike | null {\r\n    const aa = a[0];\r\n    const ab = a[1];\r\n    const ac = a[2];\r\n    const ad = a[3];\r\n    const atx = a[4];\r\n    const aty = a[5];\r\n\r\n    let det = aa * ad - ab * ac;\r\n    if (!det) {\r\n      return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = ad * det;\r\n    out[1] = -ab * det;\r\n    out[2] = -ac * det;\r\n    out[3] = aa * det;\r\n    out[4] = (ac * aty - ad * atx) * det;\r\n    out[5] = (ab * atx - aa * aty) * det;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the determinant of a {@link Mat2d}\r\n   * @category Static\r\n   *\r\n   * @param a - the source matrix\r\n   * @returns determinant of a\r\n   */\r\n  static determinant(a: Readonly<Mat2dLike>): number {\r\n    return a[0] * a[3] - a[1] * a[2];\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat2d}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts matrix b from matrix a\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat2d.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\r\n\r\n  /**\r\n   * Multiplies two {@link Mat2d}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    const b4 = b[4];\r\n    const b5 = b[5];\r\n    out[0] = a0 * b0 + a2 * b1;\r\n    out[1] = a1 * b0 + a3 * b1;\r\n    out[2] = a0 * b2 + a2 * b3;\r\n    out[3] = a1 * b2 + a3 * b3;\r\n    out[4] = a0 * b4 + a2 * b5 + a4;\r\n    out[5] = a1 * b4 + a3 * b5 + a5;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat2d.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\r\n\r\n  /**\r\n   * Translate a {@link Mat2d} by the given vector\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to translate\r\n   * @param v - vector to translate by\r\n   * @returns `out`\r\n   */\r\n  static translate(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const v0 = v[0];\r\n    const v1 = v[1];\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n    out[4] = a0 * v0 + a2 * v1 + a4;\r\n    out[5] = a1 * v0 + a3 * v1 + a5;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Mat2d} by the given angle\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static rotate(out: Mat2dLike, a: Readonly<Mat2dLike>, rad: number): Mat2dLike {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n    out[0] = a0 * c + a2 * s;\r\n    out[1] = a1 * c + a3 * s;\r\n    out[2] = a0 * -s + a2 * c;\r\n    out[3] = a1 * -s + a3 * c;\r\n    out[4] = a4;\r\n    out[5] = a5;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales the {@link Mat2d} by the dimensions in the given {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param v - the {@link Vec2} to scale the matrix by\r\n   * @returns `out`\r\n   **/\r\n  static scale(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const v0 = v[0];\r\n    const v1 = v[1];\r\n    out[0] = a0 * v0;\r\n    out[1] = a1 * v0;\r\n    out[2] = a2 * v1;\r\n    out[3] = a3 * v1;\r\n    out[4] = a4;\r\n    out[5] = a5;\r\n    return out;\r\n  }\r\n\r\n  // TODO: Got to fromRotation\r\n\r\n  /**\r\n   * Creates a {@link Mat2d} from a vector translation\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     Mat2d.identity(dest);\r\n   *     Mat2d.translate(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat2d} receiving operation result\r\n   * @param v - Translation vector\r\n   * @returns `out`\r\n   */\r\n  static fromTranslation(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    out[4] = v[0];\r\n    out[5] = v[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat2d} from a given angle around a given axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     Mat2d.identity(dest);\r\n   *     Mat2d.rotate(dest, dest, rad);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat2d} receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static fromRotation(out: Mat2dLike, rad: number): Mat2dLike {\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n    out[0] = c;\r\n    out[1] = s;\r\n    out[2] = -s;\r\n    out[3] = c;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat2d} from a vector scaling\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     Mat2d.identity(dest);\r\n   *     Mat2d.scale(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat2d} receiving operation result\r\n   * @param v - Scaling vector\r\n   * @returns `out`\r\n   */\r\n  static fromScaling(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = v[1];\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns Frobenius norm of a {@link Mat2d}\r\n   * @category Static\r\n   *\r\n   * @param a - the matrix to calculate Frobenius norm of\r\n   * @returns Frobenius norm\r\n   */\r\n  static frob(a: Readonly<Mat2dLike>): number {\r\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + 1);\r\n  }\r\n\r\n  /**\r\n   * Multiply each element of a {@link Mat2d} by a scalar.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param b - amount to scale the matrix's elements by\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalar(out: Mat2dLike, a: Readonly<Mat2dLike>, b: number): Mat2dLike {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat2d}'s after multiplying each element of the second operand by a scalar value.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param scale - the amount to scale b's elements by before adding\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalarAndAdd(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>, scale: number): Mat2dLike {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    out[2] = a[2] + b[2] * scale;\r\n    out[3] = a[3] + b[3] * scale;\r\n    out[4] = a[4] + b[4] * scale;\r\n    out[5] = a[5] + b[5] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat2d}s have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\r\n    return (\r\n      a[0] === b[0] &&\r\n      a[1] === b[1] &&\r\n      a[2] === b[2] &&\r\n      a[3] === b[3] &&\r\n      a[4] === b[4] &&\r\n      a[5] === b[5]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat2d}s have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    const b4 = b[4];\r\n    const b5 = b[5];\r\n\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\r\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\r\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\r\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a {@link Mat2d}\r\n   * @category Static\r\n   *\r\n   * @param a - matrix to represent as a string\r\n   * @returns string representation of the matrix\r\n   */\r\n  static str(a: Readonly<Mat2dLike>): string {\r\n    return `Mat2d(${a.join(', ')})`;\r\n  }\r\n}\r\n\r\n// Static method alias assignments\r\nMat2d.mul = Mat2d.multiply;\r\nMat2d.sub = Mat2d.subtract;\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat2dLike, Mat3Like, Mat4Like, Vec2Like, QuatLike } from '#gl-matrix/types';\r\n\r\n/**\r\n * A 3x3 Matrix\r\n */\r\nexport class Mat3 extends Float32Array {\r\n  static #IDENTITY_3X3 = new Float32Array([\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n  ]);\r\n\r\n  /**\r\n   * Create a {@link Mat3}.\r\n   */\r\n  constructor(...values: [Readonly<Mat3Like> | ArrayBufferLike, number?] | number[] ) {\r\n    switch(values.length) {\r\n      case 9:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 9); break;\r\n      case 1:\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([\r\n            v, v, v,\r\n            v, v, v,\r\n            v, v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 9);\r\n        }\r\n        break;\r\n      default:\r\n        super(Mat3.#IDENTITY_3X3); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Mat3.str(this);`\r\n   */\r\n   get str(): string {\r\n    return Mat3.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instance methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Mat3} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Mat3Like>): Mat3 {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set `this` to the identity matrix\r\n   * Equivalent to Mat3.identity(this)\r\n   *\r\n   * @returns `this`\r\n   */\r\n  identity(): Mat3 {\r\n    this.set(Mat3.#IDENTITY_3X3);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies this {@link Mat3} against another one\r\n   * Equivalent to `Mat3.multiply(this, this, b);`\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Mat3Like>): Mat3 {\r\n    return Mat3.multiply(this, this, b) as Mat3;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat3.multiply}\r\n   */\r\n  mul(b: Readonly<Mat3Like>): Mat3 { return this; }\r\n\r\n  /**\r\n   * Transpose this {@link Mat3}\r\n   * Equivalent to `Mat3.transpose(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  transpose(): Mat3 {\r\n    return Mat3.transpose(this, this) as Mat3;\r\n  }\r\n\r\n  /**\r\n   * Inverts this {@link Mat3}\r\n   * Equivalent to `Mat4.invert(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Mat3 {\r\n    return Mat3.invert(this, this) as Mat3;\r\n  }\r\n\r\n  /**\r\n   * Translate this {@link Mat3} by the given vector\r\n   * Equivalent to `Mat3.translate(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec2} to translate by\r\n   * @returns `this`\r\n   */\r\n  translate(v: Readonly<Vec2Like>): Mat3 {\r\n    return Mat3.translate(this, this, v) as Mat3;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat3} by the given angle around the given axis\r\n   * Equivalent to `Mat3.rotate(this, this, rad);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  rotate(rad: number): Mat3 {\r\n    return Mat3.rotate(this, this, rad) as Mat3;\r\n  }\r\n\r\n  /**\r\n   * Scales this {@link Mat3} by the dimensions in the given vec3 not using vectorization\r\n   * Equivalent to `Mat3.scale(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec2} to scale the matrix by\r\n   * @returns `this`\r\n   */\r\n  scale(v: Readonly<Vec2Like>): Mat3 {\r\n    return Mat3.scale(this, this, v) as Mat3;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Mat3}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 9 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, identity {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @returns A new {@link Mat3}\r\n   */\r\n  static create(): Mat3 {\r\n    return new Mat3();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Mat3} initialized with values from an existing matrix\r\n   * @category Static\r\n   *\r\n   * @param a - Matrix to clone\r\n   * @returns A new {@link Mat3}\r\n   */\r\n  static clone(a: Readonly<Mat3Like>): Mat3 {\r\n    return new Mat3(a);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Mat3} to another\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - Matrix to copy\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Mat3Like, a: Readonly<Mat3Like>): Mat3Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link Mat3} with the given values\r\n   * @category Static\r\n   *\r\n   * @param values - Matrix components\r\n   * @returns A new {@link Mat3}\r\n   */\r\n  static fromValues(...values: number[]): Mat3 {\r\n    return new Mat3(...values);\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Mat3} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @param values - Matrix components\r\n   * @returns `out`\r\n   */\r\n  static set(out: Mat3Like, ...values: number[]): Mat3Like {\r\n    out[0] = values[0];\r\n    out[1] = values[1];\r\n    out[2] = values[2];\r\n    out[3] = values[3];\r\n    out[4] = values[4];\r\n    out[5] = values[5];\r\n    out[6] = values[6];\r\n    out[7] = values[7];\r\n    out[8] = values[8];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Mat3} to the identity matrix\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @returns `out`\r\n   */\r\n  static identity(out: Mat3Like): Mat3Like {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 1;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transpose the values of a {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out`\r\n   */\r\n  static transpose(out: Mat3Like, a: Readonly<Mat3Like>): Mat3Like {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n    if (out === a) {\r\n      const a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n      out[1] = a[3];\r\n      out[2] = a[6];\r\n      out[3] = a01;\r\n      out[5] = a[7];\r\n      out[6] = a02;\r\n      out[7] = a12;\r\n    } else {\r\n      out[0] = a[0];\r\n      out[1] = a[3];\r\n      out[2] = a[6];\r\n      out[3] = a[1];\r\n      out[4] = a[4];\r\n      out[5] = a[7];\r\n      out[6] = a[2];\r\n      out[7] = a[5];\r\n      out[8] = a[8];\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Inverts a {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out` or `null` if the matrix is not invertable\r\n   */\r\n  static invert(out: Mat3Like, a: Mat3Like): Mat3Like | null {\r\n    const a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n    const a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n    const a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n    const b01 = a22 * a11 - a12 * a21;\r\n    const b11 = -a22 * a10 + a12 * a20;\r\n    const b21 = a21 * a10 - a11 * a20;\r\n\r\n    // Calculate the determinant\r\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n    if (!det) {\r\n      return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = b01 * det;\r\n    out[1] = (-a22 * a01 + a02 * a21) * det;\r\n    out[2] = (a12 * a01 - a02 * a11) * det;\r\n    out[3] = b11 * det;\r\n    out[4] = (a22 * a00 - a02 * a20) * det;\r\n    out[5] = (-a12 * a00 + a02 * a10) * det;\r\n    out[6] = b21 * det;\r\n    out[7] = (-a21 * a00 + a01 * a20) * det;\r\n    out[8] = (a11 * a00 - a01 * a10) * det;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjugate of a {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out`\r\n   */\r\n  static adjoint(out: Mat3Like, a: Mat3Like): Mat3Like {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a10 = a[3];\r\n    const a11 = a[4];\r\n    const a12 = a[5];\r\n    const a20 = a[6];\r\n    const a21 = a[7];\r\n    const a22 = a[8];\r\n\r\n    out[0] = a11 * a22 - a12 * a21;\r\n    out[1] = a02 * a21 - a01 * a22;\r\n    out[2] = a01 * a12 - a02 * a11;\r\n    out[3] = a12 * a20 - a10 * a22;\r\n    out[4] = a00 * a22 - a02 * a20;\r\n    out[5] = a02 * a10 - a00 * a12;\r\n    out[6] = a10 * a21 - a11 * a20;\r\n    out[7] = a01 * a20 - a00 * a21;\r\n    out[8] = a00 * a11 - a01 * a10;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the determinant of a {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @param a - the source matrix\r\n   * @returns determinant of a\r\n   */\r\n  static determinant(a: Readonly<Mat3Like>): number {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a10 = a[3];\r\n    const a11 = a[4];\r\n    const a12 = a[5];\r\n    const a20 = a[6];\r\n    const a21 = a[7];\r\n    const a22 = a[8];\r\n\r\n    return (\r\n      a00 * (a22 * a11 - a12 * a21) +\r\n      a01 * (-a22 * a10 + a12 * a20) +\r\n      a02 * (a21 * a10 - a11 * a20)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat3}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    out[8] = a[8] + b[8];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts matrix b from matrix a\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    out[6] = a[6] - b[6];\r\n    out[7] = a[7] - b[7];\r\n    out[8] = a[8] - b[8];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat3.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like { return out; }\r\n\r\n  /**\r\n   * Multiplies two {@link Mat3}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a10 = a[3];\r\n    const a11 = a[4];\r\n    const a12 = a[5];\r\n    const a20 = a[6];\r\n    const a21 = a[7];\r\n    const a22 = a[8];\r\n\r\n    let b0 = b[0];\r\n    let b1 = b[1];\r\n    let b2 = b[2];\r\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20;\r\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21;\r\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22;\r\n\r\n    b0 = b[3];\r\n    b1 = b[4];\r\n    b2 = b[5];\r\n    out[3] = b0 * a00 + b1 * a10 + b2 * a20;\r\n    out[4] = b0 * a01 + b1 * a11 + b2 * a21;\r\n    out[5] = b0 * a02 + b1 * a12 + b2 * a22;\r\n\r\n    b0 = b[6];\r\n    b1 = b[7];\r\n    b2 = b[8];\r\n    out[6] = b0 * a00 + b1 * a10 + b2 * a20;\r\n    out[7] = b0 * a01 + b1 * a11 + b2 * a21;\r\n    out[8] = b0 * a02 + b1 * a12 + b2 * a22;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat3.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): Mat3Like { return out; }\r\n\r\n  /**\r\n   * Translate a {@link Mat3} by the given vector\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to translate\r\n   * @param v - vector to translate by\r\n   * @returns `out`\r\n   */\r\n  static translate(out: Mat3Like, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): Mat3Like {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a10 = a[3];\r\n    const a11 = a[4];\r\n    const a12 = a[5];\r\n    const a20 = a[6];\r\n    const a21 = a[7];\r\n    const a22 = a[8];\r\n    const x = v[0];\r\n    const y = v[1];\r\n\r\n    out[0] = a00;\r\n    out[1] = a01;\r\n    out[2] = a02;\r\n\r\n    out[3] = a10;\r\n    out[4] = a11;\r\n    out[5] = a12;\r\n\r\n    out[6] = x * a00 + y * a10 + a20;\r\n    out[7] = x * a01 + y * a11 + a21;\r\n    out[8] = x * a02 + y * a12 + a22;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Mat3} by the given angle\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static rotate(out: Mat3Like, a: Readonly<Mat3Like>, rad: number): Mat3Like {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a10 = a[3];\r\n    const a11 = a[4];\r\n    const a12 = a[5];\r\n    const a20 = a[6];\r\n    const a21 = a[7];\r\n    const a22 = a[8];\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n\r\n    out[0] = c * a00 + s * a10;\r\n    out[1] = c * a01 + s * a11;\r\n    out[2] = c * a02 + s * a12;\r\n\r\n    out[3] = c * a10 - s * a00;\r\n    out[4] = c * a11 - s * a01;\r\n    out[5] = c * a12 - s * a02;\r\n\r\n    out[6] = a20;\r\n    out[7] = a21;\r\n    out[8] = a22;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales the {@link Mat3} by the dimensions in the given {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param v - the {@link Vec2} to scale the matrix by\r\n   * @returns `out`\r\n   **/\r\n  static scale(out: Mat3Like, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): Mat3Like {\r\n    const x = v[0];\r\n    const y = v[1];\r\n\r\n    out[0] = x * a[0];\r\n    out[1] = x * a[1];\r\n    out[2] = x * a[2];\r\n\r\n    out[3] = y * a[3];\r\n    out[4] = y * a[4];\r\n    out[5] = y * a[5];\r\n\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat3} from a vector translation\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat3.identity(dest);\r\n   *     mat3.translate(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat3} receiving operation result\r\n   * @param v - Translation vector\r\n   * @returns `out`\r\n   */\r\n  static fromTranslation(out: Mat3Like, v: Readonly<Vec2Like>): Mat3Like {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 1;\r\n    out[5] = 0;\r\n    out[6] = v[0];\r\n    out[7] = v[1];\r\n    out[8] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat3} from a given angle around a given axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat3.identity(dest);\r\n   *     mat3.rotate(dest, dest, rad);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat3} receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static fromRotation(out: Mat3Like, rad: number): Mat3Like {\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n\r\n    out[0] = c;\r\n    out[1] = s;\r\n    out[2] = 0;\r\n\r\n    out[3] = -s;\r\n    out[4] = c;\r\n    out[5] = 0;\r\n\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat3} from a vector scaling\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat3.identity(dest);\r\n   *     mat3.scale(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat3} receiving operation result\r\n   * @param v - Scaling vector\r\n   * @returns `out`\r\n   */\r\n  static fromScaling(out: Mat3Like, v: Readonly<Vec2Like>): Mat3Like {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n\r\n    out[3] = 0;\r\n    out[4] = v[1];\r\n    out[5] = 0;\r\n\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Copies the upper-left 3x3 values of a {@link Mat2d} into the given\r\n   * {@link Mat3}.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving 3x3 matrix\r\n   * @param a - the source 2x3 matrix\r\n   * @returns `out`\r\n   */\r\n  static fromMat2d(out: Mat3Like, a: Readonly<Mat2dLike>): Mat3Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = 0;\r\n\r\n    out[3] = a[2];\r\n    out[4] = a[3];\r\n    out[5] = 0;\r\n\r\n    out[6] = a[4];\r\n    out[7] = a[5];\r\n    out[8] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates a {@link Mat3} from the given quaternion\r\n   *\r\n   * @param out - {@link Mat3} receiving operation result\r\n   * @param q - {@link Quat} to create matrix from\r\n   * @returns `out`\r\n   */\r\n  static fromQuat(out: Mat3Like, q: Readonly<QuatLike>): Mat3Like {\r\n    const x = q[0];\r\n    const y = q[1];\r\n    const z = q[2];\r\n    const w = q[3];\r\n    const x2 = x + x;\r\n    const y2 = y + y;\r\n    const z2 = z + z;\r\n\r\n    const xx = x * x2;\r\n    const yx = y * x2;\r\n    const yy = y * y2;\r\n    const zx = z * x2;\r\n    const zy = z * y2;\r\n    const zz = z * z2;\r\n    const wx = w * x2;\r\n    const wy = w * y2;\r\n    const wz = w * z2;\r\n\r\n    out[0] = 1 - yy - zz;\r\n    out[3] = yx - wz;\r\n    out[6] = zx + wy;\r\n\r\n    out[1] = yx + wz;\r\n    out[4] = 1 - xx - zz;\r\n    out[7] = zy - wx;\r\n\r\n    out[2] = zx - wy;\r\n    out[5] = zy + wx;\r\n    out[8] = 1 - xx - yy;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Copies the upper-left 3x3 values of a {@link Mat4} into the given\r\n   * {@link Mat3}.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving 3x3 matrix\r\n   * @param a - the source 4x4 matrix\r\n   * @returns `out`\r\n   */\r\n  static fromMat4(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[4];\r\n    out[4] = a[5];\r\n    out[5] = a[6];\r\n    out[6] = a[8];\r\n    out[7] = a[9];\r\n    out[8] = a[10];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n   * @category Static\r\n   *\r\n   * @param {mat3} out mat3 receiving operation result\r\n   * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n   * @returns `out` or `null` if the matrix is not invertable\r\n   */\r\n  static normalFromMat4(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like | null {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a03 = a[3];\r\n    const a10 = a[4];\r\n    const a11 = a[5];\r\n    const a12 = a[6];\r\n    const a13 = a[7];\r\n    const a20 = a[8];\r\n    const a21 = a[9];\r\n    const a22 = a[10];\r\n    const a23 = a[11];\r\n    const a30 = a[12];\r\n    const a31 = a[13];\r\n    const a32 = a[14];\r\n    const a33 = a[15];\r\n\r\n    const b00 = a00 * a11 - a01 * a10;\r\n    const b01 = a00 * a12 - a02 * a10;\r\n    const b02 = a00 * a13 - a03 * a10;\r\n    const b03 = a01 * a12 - a02 * a11;\r\n    const b04 = a01 * a13 - a03 * a11;\r\n    const b05 = a02 * a13 - a03 * a12;\r\n    const b06 = a20 * a31 - a21 * a30;\r\n    const b07 = a20 * a32 - a22 * a30;\r\n    const b08 = a20 * a33 - a23 * a30;\r\n    const b09 = a21 * a32 - a22 * a31;\r\n    const b10 = a21 * a33 - a23 * a31;\r\n    const b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det =\r\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n      return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates a {@link Mat3} normal matrix (transpose inverse) from a {@link Mat4}\r\n   * This version omits the calculation of the constant factor (1/determinant), so\r\n   * any normals transformed with it will need to be renormalized.\r\n   * From https://stackoverflow.com/a/27616419/25968\r\n   * @category Static\r\n   *\r\n   * @param out - Matrix receiving operation result\r\n   * @param a - Mat4 to derive the normal matrix from\r\n   * @returns `out`\r\n   */\r\n  static normalFromMat4Fast(out: Mat3Like, a: Readonly<Mat4Like>): Mat3Like {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n\r\n    const bx = a[4];\r\n    const by = a[5];\r\n    const bz = a[6];\r\n\r\n    const cx = a[8];\r\n    const cy = a[9];\r\n    const cz = a[10];\r\n\r\n    out[0] = by * cz - cz * cy;\r\n    out[1] = bz * cx - cx * cz;\r\n    out[2] = bx * cy - cy * cx;\r\n\r\n    out[3] = cy * az - cz * ay;\r\n    out[4] = cz * ax - cx * az;\r\n    out[5] = cx * ay - cy * ax;\r\n\r\n    out[6] = ay * bz - az * by;\r\n    out[7] = az * bx - ax * bz;\r\n    out[8] = ax * by - ay * bx;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a 2D projection matrix with the given bounds\r\n   * @category Static\r\n   *\r\n   * @param out mat3 frustum matrix will be written into\r\n   * @param width Width of your gl context\r\n   * @param height Height of gl context\r\n   * @returns `out`\r\n   */\r\n  static projection(out: Mat3Like, width: number, height: number): Mat3Like {\r\n    out[0] = 2 / width;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -2 / height;\r\n    out[5] = 0;\r\n    out[6] = -1;\r\n    out[7] = 1;\r\n    out[8] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns Frobenius norm of a {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @param a - the matrix to calculate Frobenius norm of\r\n   * @returns Frobenius norm\r\n   */\r\n  static frob(a: Readonly<Mat3Like>): number {\r\n    return Math.sqrt(\r\n      a[0] * a[0] +\r\n      a[1] * a[1] +\r\n      a[2] * a[2] +\r\n      a[3] * a[3] +\r\n      a[4] * a[4] +\r\n      a[5] * a[5] +\r\n      a[6] * a[6] +\r\n      a[7] * a[7] +\r\n      a[8] * a[8]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Multiply each element of a {@link Mat3} by a scalar.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param b - amount to scale the matrix's elements by\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalar(out: Mat3Like, a: Readonly<Mat3Like>, b: number): Mat3Like {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    out[8] = a[8] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat3}'s after multiplying each element of the second operand by a scalar value.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param scale - the amount to scale b's elements by before adding\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalarAndAdd(out: Mat3Like, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>, scale: number): Mat3Like {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    out[2] = a[2] + b[2] * scale;\r\n    out[3] = a[3] + b[3] * scale;\r\n    out[4] = a[4] + b[4] * scale;\r\n    out[5] = a[5] + b[5] * scale;\r\n    out[6] = a[6] + b[6] * scale;\r\n    out[7] = a[7] + b[7] * scale;\r\n    out[8] = a[8] + b[8] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat3}s have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\r\n    return (\r\n      a[0] === b[0] &&\r\n      a[1] === b[1] &&\r\n      a[2] === b[2] &&\r\n      a[3] === b[3] &&\r\n      a[4] === b[4] &&\r\n      a[5] === b[5] &&\r\n      a[6] === b[6] &&\r\n      a[7] === b[7] &&\r\n      a[8] === b[8]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat3}s have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const a6 = a[6];\r\n    const a7 = a[7];\r\n    const a8 = a[8];\r\n\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    const b4 = b[4];\r\n    const b5 = b[5];\r\n    const b6 = b[6];\r\n    const b7 = b[7];\r\n    const b8 = b[8];\r\n\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\r\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\r\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\r\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\r\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\r\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\r\n      Math.abs(a8 - b8) <= GLM_EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a {@link Mat3}\r\n   * @category Static\r\n   *\r\n   * @param a - matrix to represent as a string\r\n   * @returns string representation of the matrix\r\n   */\r\n  static str(a: Readonly<Mat3Like>): string {\r\n    return `Mat3(${a.join(', ')})`;\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nMat3.prototype.mul = Mat3.prototype.multiply;\r\n\r\n// Static method alias assignments\r\nMat3.mul = Mat3.multiply;\r\nMat3.sub = Mat3.subtract;\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat4Like, QuatLike, Quat2Like, Vec3Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * A 4x4 Matrix\r\n */\r\nexport class Mat4 extends Float32Array {\r\n  static #IDENTITY_4X4 = new Float32Array([\r\n    1, 0, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 0, 1,\r\n  ]);\r\n\r\n  /**\r\n   * Temporary variable to prevent repeated allocations in the algorithms within Mat4.\r\n   * These are declared as TypedArrays to aid in tree-shaking.\r\n   */\r\n  static #TMP_VEC3 = new Float32Array(3);\r\n\r\n  /**\r\n   * Create a {@link Mat4}.\r\n   */\r\n  constructor(...values: [Readonly<Mat4Like> | ArrayBufferLike, number?] | number[] ) {\r\n    switch(values.length) {\r\n      case 16:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 16); break;\r\n      case 1:\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([\r\n            v, v, v, v,\r\n            v, v, v, v,\r\n            v, v, v, v,\r\n            v, v, v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 16);\r\n        }\r\n        break;\r\n      default:\r\n        super(Mat4.#IDENTITY_4X4); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Mat4.str(this);`\r\n   */\r\n   get str(): string {\r\n    return Mat4.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instance methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Mat4} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Mat4Like>): Mat4 {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set `this` to the identity matrix\r\n   * Equivalent to Mat4.identity(this)\r\n   *\r\n   * @returns `this`\r\n   */\r\n  identity(): Mat4 {\r\n    this.set(Mat4.#IDENTITY_4X4);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies this {@link Mat4} against another one\r\n   * Equivalent to `Mat4.multiply(this, this, b);`\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Mat4Like>): Mat4 {\r\n    return Mat4.multiply(this, this, b) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat4.multiply}\r\n   */\r\n  mul(b: Readonly<Mat4Like>): Mat4 { return this; }\r\n\r\n  /**\r\n   * Transpose this {@link Mat4}\r\n   * Equivalent to `Mat4.transpose(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  transpose(): Mat4 {\r\n    return Mat4.transpose(this, this) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Inverts this {@link Mat4}\r\n   * Equivalent to `Mat4.invert(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Mat4 {\r\n    return Mat4.invert(this, this) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Translate this {@link Mat4} by the given vector\r\n   * Equivalent to `Mat4.translate(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec3} to translate by\r\n   * @returns `this`\r\n   */\r\n  translate(v: Readonly<Vec3Like>): Mat4 {\r\n    return Mat4.translate(this, this, v) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat4} by the given angle around the given axis\r\n   * Equivalent to `Mat4.rotate(this, this, rad, axis);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @param axis - the axis to rotate around\r\n   * @returns `out`\r\n   */\r\n  rotate(rad: number, axis: Readonly<Vec3Like>): Mat4 {\r\n    return Mat4.rotate(this, this, rad, axis) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Scales this {@link Mat4} by the dimensions in the given vec3 not using vectorization\r\n   * Equivalent to `Mat4.scale(this, this, v);`\r\n   *\r\n   * @param v - The {@link Vec3} to scale the matrix by\r\n   * @returns `this`\r\n   */\r\n  scale(v: Readonly<Vec3Like>): Mat4 {\r\n    return Mat4.scale(this, this, v) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat4} by the given angle around the X axis\r\n   * Equivalent to `Mat4.rotateX(this, this, rad);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `this`\r\n   */\r\n  rotateX(rad: number): Mat4 {\r\n    return Mat4.rotateX(this, this, rad) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat4} by the given angle around the Y axis\r\n   * Equivalent to `Mat4.rotateY(this, this, rad);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `this`\r\n   */\r\n  rotateY(rad: number): Mat4 {\r\n    return Mat4.rotateY(this, this, rad) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Rotates this {@link Mat4} by the given angle around the Z axis\r\n   * Equivalent to `Mat4.rotateZ(this, this, rad);`\r\n   *\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `this`\r\n   */\r\n  rotateZ(rad: number): Mat4 {\r\n    return Mat4.rotateZ(this, this, rad) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Generates a perspective projection matrix with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n   * which matches WebGL/OpenGL's clip volume.\r\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n   * Equivalent to `Mat4.perspectiveNO(this, fovy, aspect, near, far);`\r\n   *\r\n   * @param fovy - Vertical field of view in radians\r\n   * @param aspect - Aspect ratio. typically viewport width/height\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum, can be null or Infinity\r\n   * @returns `this`\r\n   */\r\n  perspectiveNO(fovy: number, aspect: number, near: number, far: number): Mat4 {\r\n    return Mat4.perspectiveNO(this, fovy, aspect, near, far) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n   * Equivalent to `Mat4.perspectiveZO(this, fovy, aspect, near, far);`\r\n   *\r\n   * @param fovy - Vertical field of view in radians\r\n   * @param aspect - Aspect ratio. typically viewport width/height\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum, can be null or Infinity\r\n   * @returns `this`\r\n   */\r\n  perspectiveZO(fovy: number, aspect: number, near: number, far: number): Mat4 {\r\n    return Mat4.perspectiveZO(this, fovy, aspect, near, far) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Generates a orthogonal projection matrix with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n   * which matches WebGL/OpenGL's clip volume.\r\n   * Equivalent to `Mat4.orthoNO(this, left, right, bottom, top, near, far);`\r\n   *\r\n   * @param left - Left bound of the frustum\r\n   * @param right - Right bound of the frustum\r\n   * @param bottom - Bottom bound of the frustum\r\n   * @param top - Top bound of the frustum\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum\r\n   * @returns `this`\r\n   */\r\n  orthoNO(left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4 {\r\n    return Mat4.orthoNO(this, left, right, bottom, top, near, far) as Mat4;\r\n  }\r\n\r\n  /**\r\n   * Generates a orthogonal projection matrix with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n   * Equivalent to `Mat4.orthoZO(this, left, right, bottom, top, near, far);`\r\n   *\r\n   * @param left - Left bound of the frustum\r\n   * @param right - Right bound of the frustum\r\n   * @param bottom - Bottom bound of the frustum\r\n   * @param top - Top bound of the frustum\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum\r\n   * @returns `this`\r\n   */\r\n  orthoZO(left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4 {\r\n    return Mat4.orthoZO(this, left, right, bottom, top, near, far) as Mat4;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Mat4}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 16 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, identity {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @returns A new {@link Mat4}\r\n   */\r\n  static create(): Mat4 {\r\n    return new Mat4();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Mat4} initialized with values from an existing matrix\r\n   * @category Static\r\n   *\r\n   * @param a - Matrix to clone\r\n   * @returns A new {@link Mat4}\r\n   */\r\n  static clone(a: Readonly<Mat4Like>): Mat4 {\r\n    return new Mat4(a);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Mat4} to another\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - Matrix to copy\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Create a new mat4 with the given values\r\n   * @category Static\r\n   *\r\n   * @param values - Matrix components\r\n   * @returns A new {@link Mat4}\r\n   */\r\n  static fromValues(...values: number[]): Mat4 {\r\n    return new Mat4(...values);\r\n  }\r\n\r\n  /**\r\n   * Set the components of a mat4 to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving matrix\r\n   * @param values - Matrix components\r\n   * @returns `out`\r\n   */\r\n  static set(out: Mat4Like, ...values: number[]): Mat4Like {\r\n    out[0] = values[0];\r\n    out[1] = values[1];\r\n    out[2] = values[2];\r\n    out[3] = values[3];\r\n    out[4] = values[4];\r\n    out[5] = values[5];\r\n    out[6] = values[6];\r\n    out[7] = values[7];\r\n    out[8] = values[8];\r\n    out[9] = values[9];\r\n    out[10] = values[10];\r\n    out[11] = values[11];\r\n    out[12] = values[12];\r\n    out[13] = values[13];\r\n    out[14] = values[14];\r\n    out[15] = values[15];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Mat4} to the identity matrix\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @returns `out`\r\n   */\r\n   static identity(out: Mat4Like): Mat4Like {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transpose the values of a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out`\r\n   */\r\n  static transpose(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n    if (out === a) {\r\n      const a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n      const a12 = a[6],\r\n        a13 = a[7];\r\n      const a23 = a[11];\r\n\r\n      out[1] = a[4];\r\n      out[2] = a[8];\r\n      out[3] = a[12];\r\n      out[4] = a01;\r\n      out[6] = a[9];\r\n      out[7] = a[13];\r\n      out[8] = a02;\r\n      out[9] = a12;\r\n      out[11] = a[14];\r\n      out[12] = a03;\r\n      out[13] = a13;\r\n      out[14] = a23;\r\n    } else {\r\n      out[0] = a[0];\r\n      out[1] = a[4];\r\n      out[2] = a[8];\r\n      out[3] = a[12];\r\n      out[4] = a[1];\r\n      out[5] = a[5];\r\n      out[6] = a[9];\r\n      out[7] = a[13];\r\n      out[8] = a[2];\r\n      out[9] = a[6];\r\n      out[10] = a[10];\r\n      out[11] = a[14];\r\n      out[12] = a[3];\r\n      out[13] = a[7];\r\n      out[14] = a[11];\r\n      out[15] = a[15];\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Inverts a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out` or `null` if the matrix is not invertable\r\n   */\r\n  static invert(out: Mat4Like, a: Mat4Like): Mat4Like | null {\r\n    const a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n    const a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n    const a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n    const a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n    const b00 = a00 * a11 - a01 * a10;\r\n    const b01 = a00 * a12 - a02 * a10;\r\n    const b02 = a00 * a13 - a03 * a10;\r\n    const b03 = a01 * a12 - a02 * a11;\r\n    const b04 = a01 * a13 - a03 * a11;\r\n    const b05 = a02 * a13 - a03 * a12;\r\n    const b06 = a20 * a31 - a21 * a30;\r\n    const b07 = a20 * a32 - a22 * a30;\r\n    const b08 = a20 * a33 - a23 * a30;\r\n    const b09 = a21 * a32 - a22 * a31;\r\n    const b10 = a21 * a33 - a23 * a31;\r\n    const b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det =\r\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n      return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjugate of a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the source matrix\r\n   * @returns `out`\r\n   */\r\n  static adjoint(out: Mat4Like, a: Mat4Like): Mat4Like {\r\n    const a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n    const a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n    const a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n    const a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n    const b00 = a00 * a11 - a01 * a10;\r\n    const b01 = a00 * a12 - a02 * a10;\r\n    const b02 = a00 * a13 - a03 * a10;\r\n    const b03 = a01 * a12 - a02 * a11;\r\n    const b04 = a01 * a13 - a03 * a11;\r\n    const b05 = a02 * a13 - a03 * a12;\r\n    const b06 = a20 * a31 - a21 * a30;\r\n    const b07 = a20 * a32 - a22 * a30;\r\n    const b08 = a20 * a33 - a23 * a30;\r\n    const b09 = a21 * a32 - a22 * a31;\r\n    const b10 = a21 * a33 - a23 * a31;\r\n    const b11 = a22 * a33 - a23 * a32;\r\n\r\n    out[0] = a11 * b11 - a12 * b10 + a13 * b09;\r\n    out[1] = a02 * b10 - a01 * b11 - a03 * b09;\r\n    out[2] = a31 * b05 - a32 * b04 + a33 * b03;\r\n    out[3] = a22 * b04 - a21 * b05 - a23 * b03;\r\n    out[4] = a12 * b08 - a10 * b11 - a13 * b07;\r\n    out[5] = a00 * b11 - a02 * b08 + a03 * b07;\r\n    out[6] = a32 * b02 - a30 * b05 - a33 * b01;\r\n    out[7] = a20 * b05 - a22 * b02 + a23 * b01;\r\n    out[8] = a10 * b10 - a11 * b08 + a13 * b06;\r\n    out[9] = a01 * b08 - a00 * b10 - a03 * b06;\r\n    out[10] = a30 * b04 - a31 * b02 + a33 * b00;\r\n    out[11] = a21 * b02 - a20 * b04 - a23 * b00;\r\n    out[12] = a11 * b07 - a10 * b09 - a12 * b06;\r\n    out[13] = a00 * b09 - a01 * b07 + a02 * b06;\r\n    out[14] = a31 * b01 - a30 * b03 - a32 * b00;\r\n    out[15] = a20 * b03 - a21 * b01 + a22 * b00;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the determinant of a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param a - the source matrix\r\n   * @returns determinant of a\r\n   */\r\n  static determinant(a: Readonly<Mat4Like>): number {\r\n    const a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n    const a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n    const a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n    const a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n    const b0 = a00 * a11 - a01 * a10;\r\n    const b1 = a00 * a12 - a02 * a10;\r\n    const b2 = a01 * a12 - a02 * a11;\r\n    const b3 = a20 * a31 - a21 * a30;\r\n    const b4 = a20 * a32 - a22 * a30;\r\n    const b5 = a21 * a32 - a22 * a31;\r\n    const b6 = a00 * b5 - a01 * b4 + a02 * b3;\r\n    const b7 = a10 * b5 - a11 * b4 + a12 * b3;\r\n    const b8 = a20 * b2 - a21 * b1 + a22 * b0;\r\n    const b9 = a30 * b2 - a31 * b1 + a32 * b0;\r\n\r\n    // Calculate the determinant\r\n    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\r\n  }\r\n\r\n  /**\r\n   * Multiplies two {@link Mat4}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving Matrix\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a03 = a[3];\r\n    const a10 = a[4];\r\n    const a11 = a[5];\r\n    const a12 = a[6];\r\n    const a13 = a[7];\r\n    const a20 = a[8];\r\n    const a21 = a[9];\r\n    const a22 = a[10];\r\n    const a23 = a[11];\r\n    const a30 = a[12];\r\n    const a31 = a[13];\r\n    const a32 = a[14];\r\n    const a33 = a[15];\r\n\r\n    // Cache only the current line of the second matrix\r\n    let b0 = b[0];\r\n    let b1 = b[1];\r\n    let b2 = b[2];\r\n    let b3 = b[3];\r\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[4];\r\n    b1 = b[5];\r\n    b2 = b[6];\r\n    b3 = b[7];\r\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[8];\r\n    b1 = b[9];\r\n    b2 = b[10];\r\n    b3 = b[11];\r\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[12];\r\n    b1 = b[13];\r\n    b2 = b[14];\r\n    b3 = b[15];\r\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat4.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like { return out; }\r\n\r\n  /**\r\n   * Translate a {@link Mat4} by the given vector\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to translate\r\n   * @param v - vector to translate by\r\n   * @returns `out`\r\n   */\r\n  static translate(out: Mat4Like, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): Mat4Like {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n\r\n    if (a === out) {\r\n      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n    } else {\r\n      const a00 = a[0];\r\n      const a01 = a[1];\r\n      const a02 = a[2];\r\n      const a03 = a[3];\r\n      const a10 = a[4];\r\n      const a11 = a[5];\r\n      const a12 = a[6];\r\n      const a13 = a[7];\r\n      const a20 = a[8];\r\n      const a21 = a[9];\r\n      const a22 = a[10];\r\n      const a23 = a[11];\r\n\r\n      out[0] = a00;\r\n      out[1] = a01;\r\n      out[2] = a02;\r\n      out[3] = a03;\r\n      out[4] = a10;\r\n      out[5] = a11;\r\n      out[6] = a12;\r\n      out[7] = a13;\r\n      out[8] = a20;\r\n      out[9] = a21;\r\n      out[10] = a22;\r\n      out[11] = a23;\r\n\r\n      out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n      out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n      out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n      out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales the {@link Mat4} by the dimensions in the given {@link Vec3} not using vectorization\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param v - the {@link Vec3} to scale the matrix by\r\n   * @returns `out`\r\n   **/\r\n  static scale(out: Mat4Like, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): Mat4Like {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n\r\n    out[0] = a[0] * x;\r\n    out[1] = a[1] * x;\r\n    out[2] = a[2] * x;\r\n    out[3] = a[3] * x;\r\n    out[4] = a[4] * y;\r\n    out[5] = a[5] * y;\r\n    out[6] = a[6] * y;\r\n    out[7] = a[7] * y;\r\n    out[8] = a[8] * z;\r\n    out[9] = a[9] * z;\r\n    out[10] = a[10] * z;\r\n    out[11] = a[11] * z;\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Mat4} by the given angle around the given axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @param axis - the axis to rotate around\r\n   * @returns `out` or `null` if axis has a length of 0\r\n   */\r\n  static rotate(out: Mat4Like, a: Readonly<Mat4Like>, rad: number, axis: Readonly<Vec3Like>): Mat4Like | null {\r\n    let x = axis[0];\r\n    let y = axis[1];\r\n    let z = axis[2];\r\n    let len = Math.sqrt(x * x + y * y + z * z);\r\n\r\n    if (len < GLM_EPSILON) {\r\n      return null;\r\n    }\r\n\r\n    len = 1 / len;\r\n    x *= len;\r\n    y *= len;\r\n    z *= len;\r\n\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n    const t = 1 - c;\r\n\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a03 = a[3];\r\n    const a10 = a[4];\r\n    const a11 = a[5];\r\n    const a12 = a[6];\r\n    const a13 = a[7];\r\n    const a20 = a[8];\r\n    const a21 = a[9];\r\n    const a22 = a[10];\r\n    const a23 = a[11];\r\n\r\n    // Construct the elements of the rotation matrix\r\n    const b00 = x * x * t + c;\r\n    const b01 = y * x * t + z * s;\r\n    const b02 = z * x * t - y * s;\r\n    const b10 = x * y * t - z * s;\r\n    const b11 = y * y * t + c;\r\n    const b12 = z * y * t + x * s;\r\n    const b20 = x * z * t + y * s;\r\n    const b21 = y * z * t - x * s;\r\n    const b22 = z * z * t + c;\r\n\r\n    // Perform rotation-specific matrix multiplication\r\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n    if (a !== out) {\r\n      // If the source and destination differ, copy the unchanged last row\r\n      out[12] = a[12];\r\n      out[13] = a[13];\r\n      out[14] = a[14];\r\n      out[15] = a[15];\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a matrix by the given angle around the X axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static rotateX(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\r\n    let s = Math.sin(rad);\r\n    let c = Math.cos(rad);\r\n    let a10 = a[4];\r\n    let a11 = a[5];\r\n    let a12 = a[6];\r\n    let a13 = a[7];\r\n    let a20 = a[8];\r\n    let a21 = a[9];\r\n    let a22 = a[10];\r\n    let a23 = a[11];\r\n\r\n    if (a !== out) {\r\n      // If the source and destination differ, copy the unchanged rows\r\n      out[0] = a[0];\r\n      out[1] = a[1];\r\n      out[2] = a[2];\r\n      out[3] = a[3];\r\n      out[12] = a[12];\r\n      out[13] = a[13];\r\n      out[14] = a[14];\r\n      out[15] = a[15];\r\n    }\r\n\r\n    // Perform axis-specific matrix multiplication\r\n    out[4] = a10 * c + a20 * s;\r\n    out[5] = a11 * c + a21 * s;\r\n    out[6] = a12 * c + a22 * s;\r\n    out[7] = a13 * c + a23 * s;\r\n    out[8] = a20 * c - a10 * s;\r\n    out[9] = a21 * c - a11 * s;\r\n    out[10] = a22 * c - a12 * s;\r\n    out[11] = a23 * c - a13 * s;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a matrix by the given angle around the Y axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static rotateY(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\r\n    let s = Math.sin(rad);\r\n    let c = Math.cos(rad);\r\n    let a00 = a[0];\r\n    let a01 = a[1];\r\n    let a02 = a[2];\r\n    let a03 = a[3];\r\n    let a20 = a[8];\r\n    let a21 = a[9];\r\n    let a22 = a[10];\r\n    let a23 = a[11];\r\n\r\n    if (a !== out) {\r\n      // If the source and destination differ, copy the unchanged rows\r\n      out[4] = a[4];\r\n      out[5] = a[5];\r\n      out[6] = a[6];\r\n      out[7] = a[7];\r\n      out[12] = a[12];\r\n      out[13] = a[13];\r\n      out[14] = a[14];\r\n      out[15] = a[15];\r\n    }\r\n\r\n    // Perform axis-specific matrix multiplication\r\n    out[0] = a00 * c - a20 * s;\r\n    out[1] = a01 * c - a21 * s;\r\n    out[2] = a02 * c - a22 * s;\r\n    out[3] = a03 * c - a23 * s;\r\n    out[8] = a00 * s + a20 * c;\r\n    out[9] = a01 * s + a21 * c;\r\n    out[10] = a02 * s + a22 * c;\r\n    out[11] = a03 * s + a23 * c;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a matrix by the given angle around the Z axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to rotate\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static rotateZ(out: Mat4Like, a: Readonly<Mat4Like>, rad: number): Mat4Like {\r\n    let s = Math.sin(rad);\r\n    let c = Math.cos(rad);\r\n    let a00 = a[0];\r\n    let a01 = a[1];\r\n    let a02 = a[2];\r\n    let a03 = a[3];\r\n    let a10 = a[4];\r\n    let a11 = a[5];\r\n    let a12 = a[6];\r\n    let a13 = a[7];\r\n\r\n    if (a !== out) {\r\n      // If the source and destination differ, copy the unchanged last row\r\n      out[8] = a[8];\r\n      out[9] = a[9];\r\n      out[10] = a[10];\r\n      out[11] = a[11];\r\n      out[12] = a[12];\r\n      out[13] = a[13];\r\n      out[14] = a[14];\r\n      out[15] = a[15];\r\n    }\r\n\r\n    // Perform axis-specific matrix multiplication\r\n    out[0] = a00 * c + a10 * s;\r\n    out[1] = a01 * c + a11 * s;\r\n    out[2] = a02 * c + a12 * s;\r\n    out[3] = a03 * c + a13 * s;\r\n    out[4] = a10 * c - a00 * s;\r\n    out[5] = a11 * c - a01 * s;\r\n    out[6] = a12 * c - a02 * s;\r\n    out[7] = a13 * c - a03 * s;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat4} from a vector translation\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.translate(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat4} receiving operation result\r\n   * @param v - Translation vector\r\n   * @returns `out`\r\n   */\r\n  static fromTranslation(out: Mat4Like, v: Readonly<Vec3Like>): Mat4Like {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = v[0];\r\n    out[13] = v[1];\r\n    out[14] = v[2];\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat4} from a vector scaling\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.scale(dest, dest, vec);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat4} receiving operation result\r\n   * @param v - Scaling vector\r\n   * @returns `out`\r\n   */\r\n  static fromScaling(out: Mat4Like, v: Readonly<Vec3Like>): Mat4Like {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = v[1];\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = v[2];\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat4} from a given angle around a given axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.rotate(dest, dest, rad, axis);\r\n   * @category Static\r\n   *\r\n   * @param out - {@link Mat4} receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @param axis - the axis to rotate around\r\n   * @returns `out` or `null` if `axis` has a length of 0\r\n   */\r\n  static fromRotation(out: Mat4Like, rad: number, axis: Readonly<Vec3Like>): Mat4Like | null {\r\n    let x = axis[0];\r\n    let y = axis[1];\r\n    let z = axis[2];\r\n    let len = Math.sqrt(x * x + y * y + z * z);\r\n\r\n    if (len < GLM_EPSILON) {\r\n      return null;\r\n    }\r\n\r\n    len = 1 / len;\r\n    x *= len;\r\n    y *= len;\r\n    z *= len;\r\n\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n    const t = 1 - c;\r\n\r\n    // Perform rotation-specific matrix multiplication\r\n    out[0] = x * x * t + c;\r\n    out[1] = y * x * t + z * s;\r\n    out[2] = z * x * t - y * s;\r\n    out[3] = 0;\r\n    out[4] = x * y * t - z * s;\r\n    out[5] = y * y * t + c;\r\n    out[6] = z * y * t + x * s;\r\n    out[7] = 0;\r\n    out[8] = x * z * t + y * s;\r\n    out[9] = y * z * t - x * s;\r\n    out[10] = z * z * t + c;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a matrix from the given angle around the X axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.rotateX(dest, dest, rad);\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static fromXRotation(out: Mat4Like, rad: number): Mat4Like {\r\n    let s = Math.sin(rad);\r\n    let c = Math.cos(rad);\r\n\r\n    // Perform axis-specific matrix multiplication\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = c;\r\n    out[6] = s;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = -s;\r\n    out[10] = c;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a matrix from the given angle around the Y axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.rotateY(dest, dest, rad);\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static fromYRotation(out: Mat4Like, rad: number): Mat4Like {\r\n    let s = Math.sin(rad);\r\n    let c = Math.cos(rad);\r\n\r\n    // Perform axis-specific matrix multiplication\r\n    out[0] = c;\r\n    out[1] = 0;\r\n    out[2] = -s;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = s;\r\n    out[9] = 0;\r\n    out[10] = c;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a matrix from the given angle around the Z axis\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.rotateZ(dest, dest, rad);\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param rad - the angle to rotate the matrix by\r\n   * @returns `out`\r\n   */\r\n  static fromZRotation(out: Mat4Like, rad: number): Mat4Like {\r\n    const s = Math.sin(rad);\r\n    const c = Math.cos(rad);\r\n\r\n    // Perform axis-specific matrix multiplication\r\n    out[0] = c;\r\n    out[1] = s;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -s;\r\n    out[5] = c;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a matrix from a quaternion rotation and vector translation\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.translate(dest, vec);\r\n   *     let quatMat = mat4.create();\r\n   *     quat4.toMat4(quat, quatMat);\r\n   *     mat4.multiply(dest, quatMat);\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param q - Rotation quaternion\r\n   * @param v - Translation vector\r\n   * @returns `out`\r\n   */\r\n  static fromRotationTranslation(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>): Mat4Like {\r\n    // Quaternion math\r\n    const x = q[0];\r\n    const y = q[1];\r\n    const z = q[2];\r\n    const w = q[3];\r\n    const x2 = x + x;\r\n    const y2 = y + y;\r\n    const z2 = z + z;\r\n\r\n    const xx = x * x2;\r\n    const xy = x * y2;\r\n    const xz = x * z2;\r\n    const yy = y * y2;\r\n    const yz = y * z2;\r\n    const zz = z * z2;\r\n    const wx = w * x2;\r\n    const wy = w * y2;\r\n    const wz = w * z2;\r\n\r\n    out[0] = 1 - (yy + zz);\r\n    out[1] = xy + wz;\r\n    out[2] = xz - wy;\r\n    out[3] = 0;\r\n    out[4] = xy - wz;\r\n    out[5] = 1 - (xx + zz);\r\n    out[6] = yz + wx;\r\n    out[7] = 0;\r\n    out[8] = xz + wy;\r\n    out[9] = yz - wx;\r\n    out[10] = 1 - (xx + yy);\r\n    out[11] = 0;\r\n    out[12] = v[0];\r\n    out[13] = v[1];\r\n    out[14] = v[2];\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link Mat4} from a {@link Quat2}.\r\n   * @category Static\r\n   *\r\n   * @param out - Matrix\r\n   * @param a - Dual Quaternion\r\n   * @returns `out`\r\n   */\r\n  static fromQuat2(out: Mat4Like, a: Quat2Like): Mat4Like {\r\n    const bx = -a[0];\r\n    const by = -a[1];\r\n    const bz = -a[2];\r\n    const bw = a[3];\r\n    const ax = a[4];\r\n    const ay = a[5];\r\n    const az = a[6];\r\n    const aw = a[7];\r\n\r\n    let magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n    //Only scale if it makes sense\r\n    if (magnitude > 0) {\r\n      Mat4.#TMP_VEC3[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\r\n      Mat4.#TMP_VEC3[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\r\n      Mat4.#TMP_VEC3[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\r\n    } else {\r\n      Mat4.#TMP_VEC3[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n      Mat4.#TMP_VEC3[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n      Mat4.#TMP_VEC3[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n    }\r\n    Mat4.fromRotationTranslation(out, a as QuatLike, Mat4.#TMP_VEC3);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates a {@link Mat4} normal matrix (transpose inverse) from a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param out - Matrix receiving operation result\r\n   * @param a - Mat4 to derive the normal matrix from\r\n   * @returns `out` or `null` if the matrix is not invertable\r\n   */\r\n  static normalFromMat4(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like | null {\r\n    const a00 = a[0];\r\n    const a01 = a[1];\r\n    const a02 = a[2];\r\n    const a03 = a[3];\r\n    const a10 = a[4];\r\n    const a11 = a[5];\r\n    const a12 = a[6];\r\n    const a13 = a[7];\r\n    const a20 = a[8];\r\n    const a21 = a[9];\r\n    const a22 = a[10];\r\n    const a23 = a[11];\r\n    const a30 = a[12];\r\n    const a31 = a[13];\r\n    const a32 = a[14];\r\n    const a33 = a[15];\r\n\r\n    const b00 = a00 * a11 - a01 * a10;\r\n    const b01 = a00 * a12 - a02 * a10;\r\n    const b02 = a00 * a13 - a03 * a10;\r\n    const b03 = a01 * a12 - a02 * a11;\r\n    const b04 = a01 * a13 - a03 * a11;\r\n    const b05 = a02 * a13 - a03 * a12;\r\n    const b06 = a20 * a31 - a21 * a30;\r\n    const b07 = a20 * a32 - a22 * a30;\r\n    const b08 = a20 * a33 - a23 * a30;\r\n    const b09 = a21 * a32 - a22 * a31;\r\n    const b10 = a21 * a33 - a23 * a31;\r\n    const b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det =\r\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n      return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n    out[3] = 0;\r\n\r\n    out[4] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[6] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n    out[7] = 0;\r\n\r\n    out[8] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[9] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n    out[11] = 0;\r\n\r\n    // No translation\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates a {@link Mat4} normal matrix (transpose inverse) from a {@link Mat4}\r\n   * This version omits the calculation of the constant factor (1/determinant), so\r\n   * any normals transformed with it will need to be renormalized.\r\n   * From https://stackoverflow.com/a/27616419/25968\r\n   * @category Static\r\n   *\r\n   * @param out - Matrix receiving operation result\r\n   * @param a - Mat4 to derive the normal matrix from\r\n   * @returns `out`\r\n   */\r\n  static normalFromMat4Fast(out: Mat4Like, a: Readonly<Mat4Like>): Mat4Like {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n\r\n    const bx = a[4];\r\n    const by = a[5];\r\n    const bz = a[6];\r\n\r\n    const cx = a[8];\r\n    const cy = a[9];\r\n    const cz = a[10];\r\n\r\n    out[0] = by * cz - cz * cy;\r\n    out[1] = bz * cx - cx * cz;\r\n    out[2] = bx * cy - cy * cx;\r\n    out[3] = 0;\r\n\r\n    out[4] = cy * az - cz * ay;\r\n    out[5] = cz * ax - cx * az;\r\n    out[6] = cx * ay - cy * ax;\r\n    out[7] = 0;\r\n\r\n    out[8] = ay * bz - az * by;\r\n    out[9] = az * bx - ax * bz;\r\n    out[10] = ax * by - ay * bx;\r\n    out[11] = 0;\r\n\r\n    // No translation\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the translation vector component of a transformation\r\n   * matrix. If a matrix is built with fromRotationTranslation,\r\n   * the returned vector will be the same as the translation vector\r\n   * originally supplied.\r\n   * @category Static\r\n   *\r\n   * @param  {vec3} out Vector to receive translation component\r\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n   * @return {vec3} out\r\n   */\r\n  static getTranslation(out: Vec3Like, mat: Readonly<Mat4Like>): Vec3Like {\r\n    out[0] = mat[12];\r\n    out[1] = mat[13];\r\n    out[2] = mat[14];\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the scaling factor component of a transformation\r\n   * matrix. If a matrix is built with fromRotationTranslationScale\r\n   * with a normalized Quaternion parameter, the returned vector will be\r\n   * the same as the scaling vector\r\n   * originally supplied.\r\n   * @category Static\r\n   *\r\n   * @param  {vec3} out Vector to receive scaling factor component\r\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n   * @return {vec3} out\r\n   */\r\n  static getScaling(out: Vec3Like, mat: Readonly<Mat4Like>): Vec3Like {\r\n    const m11 = mat[0];\r\n    const m12 = mat[1];\r\n    const m13 = mat[2];\r\n    const m21 = mat[4];\r\n    const m22 = mat[5];\r\n    const m23 = mat[6];\r\n    const m31 = mat[8];\r\n    const m32 = mat[9];\r\n    const m33 = mat[10];\r\n\r\n    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns a quaternion representing the rotational component\r\n   * of a transformation matrix. If a matrix is built with\r\n   * fromRotationTranslation, the returned quaternion will be the\r\n   * same as the quaternion originally supplied.\r\n   * @category Static\r\n   *\r\n   * @param out - Quaternion to receive the rotation component\r\n   * @param mat - Matrix to be decomposed (input)\r\n   * @return `out`\r\n   */\r\n  static getRotation(out: QuatLike, mat: Readonly<Mat4Like>): QuatLike {\r\n    Mat4.getScaling(Mat4.#TMP_VEC3, mat);\r\n\r\n    const is1 = 1 / Mat4.#TMP_VEC3[0];\r\n    const is2 = 1 / Mat4.#TMP_VEC3[1];\r\n    const is3 = 1 / Mat4.#TMP_VEC3[2];\r\n\r\n    const sm11 = mat[0] * is1;\r\n    const sm12 = mat[1] * is2;\r\n    const sm13 = mat[2] * is3;\r\n    const sm21 = mat[4] * is1;\r\n    const sm22 = mat[5] * is2;\r\n    const sm23 = mat[6] * is3;\r\n    const sm31 = mat[8] * is1;\r\n    const sm32 = mat[9] * is2;\r\n    const sm33 = mat[10] * is3;\r\n\r\n    const trace = sm11 + sm22 + sm33;\r\n    let S = 0;\r\n\r\n    if (trace > 0) {\r\n      S = Math.sqrt(trace + 1.0) * 2;\r\n      out[3] = 0.25 * S;\r\n      out[0] = (sm23 - sm32) / S;\r\n      out[1] = (sm31 - sm13) / S;\r\n      out[2] = (sm12 - sm21) / S;\r\n    } else if (sm11 > sm22 && sm11 > sm33) {\r\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n      out[3] = (sm23 - sm32) / S;\r\n      out[0] = 0.25 * S;\r\n      out[1] = (sm12 + sm21) / S;\r\n      out[2] = (sm31 + sm13) / S;\r\n    } else if (sm22 > sm33) {\r\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n      out[3] = (sm31 - sm13) / S;\r\n      out[0] = (sm12 + sm21) / S;\r\n      out[1] = 0.25 * S;\r\n      out[2] = (sm23 + sm32) / S;\r\n    } else {\r\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n      out[3] = (sm12 - sm21) / S;\r\n      out[0] = (sm31 + sm13) / S;\r\n      out[1] = (sm23 + sm32) / S;\r\n      out[2] = 0.25 * S;\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Decomposes a transformation matrix into its rotation, translation\r\n   * and scale components. Returns only the rotation component\r\n   * @category Static\r\n   *\r\n   * @param out_r - Quaternion to receive the rotation component\r\n   * @param out_t - Vector to receive the translation vector\r\n   * @param out_s - Vector to receive the scaling factor\r\n   * @param mat - Matrix to be decomposed (input)\r\n   * @returns `out_r`\r\n   */\r\n  static decompose(out_r: QuatLike, out_t: Vec3Like, out_s: Vec3Like, mat: Readonly<Mat4Like>): QuatLike {\r\n    out_t[0] = mat[12];\r\n    out_t[1] = mat[13];\r\n    out_t[2] = mat[14];\r\n\r\n    const m11 = mat[0];\r\n    const m12 = mat[1];\r\n    const m13 = mat[2];\r\n    const m21 = mat[4];\r\n    const m22 = mat[5];\r\n    const m23 = mat[6];\r\n    const m31 = mat[8];\r\n    const m32 = mat[9];\r\n    const m33 = mat[10];\r\n\r\n    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n    const is1 = 1 / out_s[0];\r\n    const is2 = 1 / out_s[1];\r\n    const is3 = 1 / out_s[2];\r\n\r\n    const sm11 = m11 * is1;\r\n    const sm12 = m12 * is2;\r\n    const sm13 = m13 * is3;\r\n    const sm21 = m21 * is1;\r\n    const sm22 = m22 * is2;\r\n    const sm23 = m23 * is3;\r\n    const sm31 = m31 * is1;\r\n    const sm32 = m32 * is2;\r\n    const sm33 = m33 * is3;\r\n\r\n    const trace = sm11 + sm22 + sm33;\r\n    let S = 0;\r\n\r\n    if (trace > 0) {\r\n      S = Math.sqrt(trace + 1.0) * 2;\r\n      out_r[3] = 0.25 * S;\r\n      out_r[0] = (sm23 - sm32) / S;\r\n      out_r[1] = (sm31 - sm13) / S;\r\n      out_r[2] = (sm12 - sm21) / S;\r\n    } else if (sm11 > sm22 && sm11 > sm33) {\r\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n      out_r[3] = (sm23 - sm32) / S;\r\n      out_r[0] = 0.25 * S;\r\n      out_r[1] = (sm12 + sm21) / S;\r\n      out_r[2] = (sm31 + sm13) / S;\r\n    } else if (sm22 > sm33) {\r\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n      out_r[3] = (sm31 - sm13) / S;\r\n      out_r[0] = (sm12 + sm21) / S;\r\n      out_r[1] = 0.25 * S;\r\n      out_r[2] = (sm23 + sm32) / S;\r\n    } else {\r\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n      out_r[3] = (sm12 - sm21) / S;\r\n      out_r[0] = (sm31 + sm13) / S;\r\n      out_r[1] = (sm23 + sm32) / S;\r\n      out_r[2] = 0.25 * S;\r\n    }\r\n\r\n    return out_r;\r\n  }\r\n\r\n  /**\r\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.translate(dest, vec);\r\n   *     let quatMat = mat4.create();\r\n   *     quat4.toMat4(quat, quatMat);\r\n   *     mat4.multiply(dest, quatMat);\r\n   *     mat4.scale(dest, scale);\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param q - Rotation quaternion\r\n   * @param v - Translation vector\r\n   * @param s - Scaling vector\r\n   * @returns `out`\r\n   */\r\n  static fromRotationTranslationScale(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>, s: Readonly<Vec3Like>): Mat4Like {\r\n    // Quaternion math\r\n    const x = q[0];\r\n    const y = q[1];\r\n    const z = q[2];\r\n    const w = q[3];\r\n    const x2 = x + x;\r\n    const y2 = y + y;\r\n    const z2 = z + z;\r\n\r\n    const xx = x * x2;\r\n    const xy = x * y2;\r\n    const xz = x * z2;\r\n    const yy = y * y2;\r\n    const yz = y * z2;\r\n    const zz = z * z2;\r\n    const wx = w * x2;\r\n    const wy = w * y2;\r\n    const wz = w * z2;\r\n    const sx = s[0];\r\n    const sy = s[1];\r\n    const sz = s[2];\r\n\r\n    out[0] = (1 - (yy + zz)) * sx;\r\n    out[1] = (xy + wz) * sx;\r\n    out[2] = (xz - wy) * sx;\r\n    out[3] = 0;\r\n    out[4] = (xy - wz) * sy;\r\n    out[5] = (1 - (xx + zz)) * sy;\r\n    out[6] = (yz + wx) * sy;\r\n    out[7] = 0;\r\n    out[8] = (xz + wy) * sz;\r\n    out[9] = (yz - wx) * sz;\r\n    out[10] = (1 - (xx + yy)) * sz;\r\n    out[11] = 0;\r\n    out[12] = v[0];\r\n    out[13] = v[1];\r\n    out[14] = v[2];\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n   * This is equivalent to (but much faster than):\r\n   *\r\n   *     mat4.identity(dest);\r\n   *     mat4.translate(dest, vec);\r\n   *     mat4.translate(dest, origin);\r\n   *     let quatMat = mat4.create();\r\n   *     quat4.toMat4(quat, quatMat);\r\n   *     mat4.multiply(dest, quatMat);\r\n   *     mat4.scale(dest, scale)\r\n   *     mat4.translate(dest, negativeOrigin);\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param q - Rotation quaternion\r\n   * @param v - Translation vector\r\n   * @param s - Scaling vector\r\n   * @param o - The origin vector around which to scale and rotate\r\n   * @returns `out`\r\n   */\r\n  static fromRotationTranslationScaleOrigin(out: Mat4Like, q: Readonly<QuatLike>, v: Readonly<Vec3Like>, s: Readonly<Vec3Like>, o: Readonly<Vec3Like>): Mat4Like {\r\n    // Quaternion math\r\n    const x = q[0];\r\n    const y = q[1];\r\n    const z = q[2];\r\n    const w = q[3];\r\n    const x2 = x + x;\r\n    const y2 = y + y;\r\n    const z2 = z + z;\r\n\r\n    const xx = x * x2;\r\n    const xy = x * y2;\r\n    const xz = x * z2;\r\n    const yy = y * y2;\r\n    const yz = y * z2;\r\n    const zz = z * z2;\r\n    const wx = w * x2;\r\n    const wy = w * y2;\r\n    const wz = w * z2;\r\n\r\n    const sx = s[0];\r\n    const sy = s[1];\r\n    const sz = s[2];\r\n\r\n    const ox = o[0];\r\n    const oy = o[1];\r\n    const oz = o[2];\r\n\r\n    const out0 = (1 - (yy + zz)) * sx;\r\n    const out1 = (xy + wz) * sx;\r\n    const out2 = (xz - wy) * sx;\r\n    const out4 = (xy - wz) * sy;\r\n    const out5 = (1 - (xx + zz)) * sy;\r\n    const out6 = (yz + wx) * sy;\r\n    const out8 = (xz + wy) * sz;\r\n    const out9 = (yz - wx) * sz;\r\n    const out10 = (1 - (xx + yy)) * sz;\r\n\r\n    out[0] = out0;\r\n    out[1] = out1;\r\n    out[2] = out2;\r\n    out[3] = 0;\r\n    out[4] = out4;\r\n    out[5] = out5;\r\n    out[6] = out6;\r\n    out[7] = 0;\r\n    out[8] = out8;\r\n    out[9] = out9;\r\n    out[10] = out10;\r\n    out[11] = 0;\r\n    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates a 4x4 matrix from the given quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 receiving operation result\r\n   * @param q - Quaternion to create matrix from\r\n   * @returns `out`\r\n   */\r\n  static fromQuat(out: Mat4Like, q: Readonly<QuatLike>): Mat4Like {\r\n    const x = q[0];\r\n    const y = q[1];\r\n    const z = q[2];\r\n    const w = q[3];\r\n    const x2 = x + x;\r\n    const y2 = y + y;\r\n    const z2 = z + z;\r\n\r\n    const xx = x * x2;\r\n    const yx = y * x2;\r\n    const yy = y * y2;\r\n    const zx = z * x2;\r\n    const zy = z * y2;\r\n    const zz = z * z2;\r\n    const wx = w * x2;\r\n    const wy = w * y2;\r\n    const wz = w * z2;\r\n\r\n    out[0] = 1 - yy - zz;\r\n    out[1] = yx + wz;\r\n    out[2] = zx - wy;\r\n    out[3] = 0;\r\n\r\n    out[4] = yx - wz;\r\n    out[5] = 1 - xx - zz;\r\n    out[6] = zy + wx;\r\n    out[7] = 0;\r\n\r\n    out[8] = zx + wy;\r\n    out[9] = zy - wx;\r\n    out[10] = 1 - xx - yy;\r\n    out[11] = 0;\r\n\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a frustum matrix with the given bounds\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n   * which matches WebGL/OpenGL's clip volume.\r\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param left - Left bound of the frustum\r\n   * @param right - Right bound of the frustum\r\n   * @param bottom - Bottom bound of the frustum\r\n   * @param top - Top bound of the frustum\r\n   * @param near - Near bound of the frustum\r\n   * @param far -  Far bound of the frustum, can be null or Infinity\r\n   * @returns `out`\r\n   */\r\n  static frustumNO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number = Infinity): Mat4Like {\r\n    const rl = 1 / (right - left);\r\n    const tb = 1 / (top - bottom);\r\n    out[0] = near * 2 * rl;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = near * 2 * tb;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = (right + left) * rl;\r\n    out[9] = (top + bottom) * tb;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n\r\n    if (far != null && far !== Infinity) {\r\n      const nf = 1 / (near - far);\r\n      out[10] = (far + near) * nf;\r\n      out[14] = 2 * far * near * nf;\r\n    } else {\r\n      out[10] = -1;\r\n      out[14] = -2 * near;\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat4.frustumNO}\r\n   * @category Static\r\n   * @deprecated Use {@link Mat4.frustumNO} or {@link Mat4.frustumZO} explicitly\r\n   */\r\n  static frustum(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number = Infinity): Mat4Like { return out; }\r\n\r\n  /**\r\n   * Generates a frustum matrix with the given bounds\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param left - Left bound of the frustum\r\n   * @param right - Right bound of the frustum\r\n   * @param bottom - Bottom bound of the frustum\r\n   * @param top - Top bound of the frustum\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum, can be null or Infinity\r\n   * @returns `out`\r\n   */\r\n  static frustumZO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number = Infinity): Mat4Like {\r\n    const rl = 1 / (right - left);\r\n    const tb = 1 / (top - bottom);\r\n    out[0] = near * 2 * rl;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = near * 2 * tb;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = (right + left) * rl;\r\n    out[9] = (top + bottom) * tb;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n\r\n    if (far != null && far !== Infinity) {\r\n      const nf = 1 / (near - far);\r\n      out[10] = far * nf;\r\n      out[14] = far * near * nf;\r\n    } else {\r\n      out[10] = -1;\r\n      out[14] = -near;\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a perspective projection matrix with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n   * which matches WebGL/OpenGL's clip volume.\r\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param fovy - Vertical field of view in radians\r\n   * @param aspect - Aspect ratio. typically viewport width/height\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum, can be null or Infinity\r\n   * @returns `out`\r\n   */\r\n  static perspectiveNO(out: Mat4Like, fovy: number, aspect: number, near: number, far: number = Infinity): Mat4Like {\r\n    const f = 1.0 / Math.tan(fovy / 2);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n    if (far != null && far !== Infinity) {\r\n      const nf = 1 / (near - far);\r\n      out[10] = (far + near) * nf;\r\n      out[14] = 2 * far * near * nf;\r\n    } else {\r\n      out[10] = -1;\r\n      out[14] = -2 * near;\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat4.perspectiveNO}\r\n   * @category Static\r\n   * @deprecated Use {@link Mat4.perspectiveNO} or {@link Mat4.perspectiveZO} explicitly\r\n   */\r\n  static perspective(out: Mat4Like, fovy: number, aspect: number, near: number, far: number = Infinity): Mat4Like { return out; }\r\n\r\n  /**\r\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param fovy - Vertical field of view in radians\r\n   * @param aspect - Aspect ratio. typically viewport width/height\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum, can be null or Infinity\r\n   * @returns `out`\r\n   */\r\n  static perspectiveZO(out: Mat4Like, fovy: number, aspect: number, near: number, far: number = Infinity): Mat4Like {\r\n    const f = 1.0 / Math.tan(fovy / 2);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n    if (far != null && far !== Infinity) {\r\n      const nf = 1 / (near - far);\r\n      out[10] = far * nf;\r\n      out[14] = far * near * nf;\r\n    } else {\r\n      out[10] = -1;\r\n      out[14] = -near;\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a perspective projection matrix with the given field of view.\r\n   * This is primarily useful for generating projection matrices to be used\r\n   * with the still experiemental WebVR API.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param fov - Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum\r\n   * @returns `out`\r\n   * @deprecated\r\n   */\r\n  static perspectiveFromFieldOfView(out: Mat4Like, fov, near: number, far: number): Mat4Like {\r\n    const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\r\n    const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\r\n    const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\r\n    const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\r\n    const xScale = 2.0 / (leftTan + rightTan);\r\n    const yScale = 2.0 / (upTan + downTan);\r\n\r\n    out[0] = xScale;\r\n    out[1] = 0.0;\r\n    out[2] = 0.0;\r\n    out[3] = 0.0;\r\n    out[4] = 0.0;\r\n    out[5] = yScale;\r\n    out[6] = 0.0;\r\n    out[7] = 0.0;\r\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n    out[9] = (upTan - downTan) * yScale * 0.5;\r\n    out[10] = far / (near - far);\r\n    out[11] = -1.0;\r\n    out[12] = 0.0;\r\n    out[13] = 0.0;\r\n    out[14] = (far * near) / (near - far);\r\n    out[15] = 0.0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a orthogonal projection matrix with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n   * which matches WebGL/OpenGL's clip volume.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param left - Left bound of the frustum\r\n   * @param right - Right bound of the frustum\r\n   * @param bottom - Bottom bound of the frustum\r\n   * @param top - Top bound of the frustum\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum\r\n   * @returns `out`\r\n   */\r\n  static orthoNO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like {\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n    out[0] = -2 * lr;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = -2 * bt;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 2 * nf;\r\n    out[11] = 0;\r\n    out[12] = (left + right) * lr;\r\n    out[13] = (top + bottom) * bt;\r\n    out[14] = (far + near) * nf;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Mat4.orthoNO}\r\n   * @category Static\r\n   * @deprecated Use {@link Mat4.orthoNO} or {@link Mat4.orthoZO} explicitly\r\n   */\r\n  static ortho(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like { return out; }\r\n\r\n  /**\r\n   * Generates a orthogonal projection matrix with the given bounds.\r\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param left - Left bound of the frustum\r\n   * @param right - Right bound of the frustum\r\n   * @param bottom - Bottom bound of the frustum\r\n   * @param top - Top bound of the frustum\r\n   * @param near - Near bound of the frustum\r\n   * @param far - Far bound of the frustum\r\n   * @returns `out`\r\n   */\r\n  static orthoZO(out: Mat4Like, left: number, right: number, bottom: number, top: number, near: number, far: number): Mat4Like {\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n    out[0] = -2 * lr;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = -2 * bt;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = nf;\r\n    out[11] = 0;\r\n    out[12] = (left + right) * lr;\r\n    out[13] = (top + bottom) * bt;\r\n    out[14] = near * nf;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n   * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param eye - Position of the viewer\r\n   * @param center - Point the viewer is looking at\r\n   * @param up - vec3 pointing up\r\n   * @returns `out`\r\n   */\r\n  static lookAt(out: Mat4Like, eye: Readonly<Vec3Like>, center: Readonly<Vec3Like>, up: Readonly<Vec3Like>): Mat4Like {\r\n    const eyex = eye[0];\r\n    const eyey = eye[1];\r\n    const eyez = eye[2];\r\n    const upx = up[0];\r\n    const upy = up[1];\r\n    const upz = up[2];\r\n    const centerx = center[0];\r\n    const centery = center[1];\r\n    const centerz = center[2];\r\n\r\n    if (\r\n      Math.abs(eyex - centerx) < GLM_EPSILON &&\r\n      Math.abs(eyey - centery) < GLM_EPSILON &&\r\n      Math.abs(eyez - centerz) < GLM_EPSILON\r\n    ) {\r\n      return Mat4.identity(out);\r\n    }\r\n\r\n    let z0 = eyex - centerx;\r\n    let z1 = eyey - centery;\r\n    let z2 = eyez - centerz;\r\n\r\n    let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n\r\n    let x0 = upy * z2 - upz * z1;\r\n    let x1 = upz * z0 - upx * z2;\r\n    let x2 = upx * z1 - upy * z0;\r\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n    if (!len) {\r\n      x0 = 0;\r\n      x1 = 0;\r\n      x2 = 0;\r\n    } else {\r\n      len = 1 / len;\r\n      x0 *= len;\r\n      x1 *= len;\r\n      x2 *= len;\r\n    }\r\n\r\n    let y0 = z1 * x2 - z2 * x1;\r\n    let y1 = z2 * x0 - z0 * x2;\r\n    let y2 = z0 * x1 - z1 * x0;\r\n\r\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n    if (!len) {\r\n      y0 = 0;\r\n      y1 = 0;\r\n      y2 = 0;\r\n    } else {\r\n      len = 1 / len;\r\n      y0 *= len;\r\n      y1 *= len;\r\n      y2 *= len;\r\n    }\r\n\r\n    out[0] = x0;\r\n    out[1] = y0;\r\n    out[2] = z0;\r\n    out[3] = 0;\r\n    out[4] = x1;\r\n    out[5] = y1;\r\n    out[6] = z1;\r\n    out[7] = 0;\r\n    out[8] = x2;\r\n    out[9] = y2;\r\n    out[10] = z2;\r\n    out[11] = 0;\r\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n    out[15] = 1;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a matrix that makes something look at something else.\r\n   * @category Static\r\n   *\r\n   * @param out - mat4 frustum matrix will be written into\r\n   * @param eye - Position of the viewer\r\n   * @param target - Point the viewer is looking at\r\n   * @param up - vec3 pointing up\r\n   * @returns `out`\r\n   */\r\n  static targetTo(out: Mat4Like, eye: Readonly<Vec3Like>, target: Readonly<Vec3Like>, up: Readonly<Vec3Like>): Mat4Like {\r\n    const eyex = eye[0];\r\n    const eyey = eye[1];\r\n    const eyez = eye[2];\r\n    const upx = up[0];\r\n    const upy = up[1];\r\n    const upz = up[2];\r\n\r\n    let z0 = eyex - target[0];\r\n    let z1 = eyey - target[1];\r\n    let z2 = eyez - target[2];\r\n\r\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\r\n    if (len > 0) {\r\n      len = 1 / Math.sqrt(len);\r\n      z0 *= len;\r\n      z1 *= len;\r\n      z2 *= len;\r\n    }\r\n\r\n    let x0 = upy * z2 - upz * z1;\r\n    let x1 = upz * z0 - upx * z2;\r\n    let x2 = upx * z1 - upy * z0;\r\n\r\n    len = x0 * x0 + x1 * x1 + x2 * x2;\r\n    if (len > 0) {\r\n      len = 1 / Math.sqrt(len);\r\n      x0 *= len;\r\n      x1 *= len;\r\n      x2 *= len;\r\n    }\r\n\r\n    out[0] = x0;\r\n    out[1] = x1;\r\n    out[2] = x2;\r\n    out[3] = 0;\r\n    out[4] = z1 * x2 - z2 * x1;\r\n    out[5] = z2 * x0 - z0 * x2;\r\n    out[6] = z0 * x1 - z1 * x0;\r\n    out[7] = 0;\r\n    out[8] = z0;\r\n    out[9] = z1;\r\n    out[10] = z2;\r\n    out[11] = 0;\r\n    out[12] = eyex;\r\n    out[13] = eyey;\r\n    out[14] = eyez;\r\n    out[15] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns Frobenius norm of a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param a - the matrix to calculate Frobenius norm of\r\n   * @returns Frobenius norm\r\n   */\r\n  static frob(a: Readonly<Mat4Like>): number {\r\n    return Math.sqrt(\r\n      a[0] * a[0] +\r\n      a[1] * a[1] +\r\n      a[2] * a[2] +\r\n      a[3] * a[3] +\r\n      a[4] * a[4] +\r\n      a[5] * a[5] +\r\n      a[6] * a[6] +\r\n      a[7] * a[7] +\r\n      a[8] * a[8] +\r\n      a[9] * a[9] +\r\n      a[10] * a[10] +\r\n      a[11] * a[11] +\r\n      a[12] * a[12] +\r\n      a[13] * a[13] +\r\n      a[14] * a[14] +\r\n      a[15] * a[15]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Mat4}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    out[8] = a[8] + b[8];\r\n    out[9] = a[9] + b[9];\r\n    out[10] = a[10] + b[10];\r\n    out[11] = a[11] + b[11];\r\n    out[12] = a[12] + b[12];\r\n    out[13] = a[13] + b[13];\r\n    out[14] = a[14] + b[14];\r\n    out[15] = a[15] + b[15];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts matrix b from matrix a\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    out[6] = a[6] - b[6];\r\n    out[7] = a[7] - b[7];\r\n    out[8] = a[8] - b[8];\r\n    out[9] = a[9] - b[9];\r\n    out[10] = a[10] - b[10];\r\n    out[11] = a[11] - b[11];\r\n    out[12] = a[12] - b[12];\r\n    out[13] = a[13] - b[13];\r\n    out[14] = a[14] - b[14];\r\n    out[15] = a[15] - b[15];\r\n    return out;\r\n  }\r\n  /**\r\n   * Alias for {@link Mat4.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): Mat4Like { return out; }\r\n\r\n  /**\r\n   * Multiply each element of the matrix by a scalar.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving matrix\r\n   * @param a - the matrix to scale\r\n   * @param b - amount to scale the matrix's elements by\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalar(out: Mat4Like, a: Readonly<Mat4Like>, b: number): Mat4Like {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    out[8] = a[8] * b;\r\n    out[9] = a[9] * b;\r\n    out[10] = a[10] * b;\r\n    out[11] = a[11] * b;\r\n    out[12] = a[12] * b;\r\n    out[13] = a[13] * b;\r\n    out[14] = a[14] * b;\r\n    out[15] = a[15] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param scale - the amount to scale b's elements by before adding\r\n   * @returns `out`\r\n   */\r\n  static multiplyScalarAndAdd(out: Mat4Like, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>, scale: number): Mat4Like {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    out[2] = a[2] + b[2] * scale;\r\n    out[3] = a[3] + b[3] * scale;\r\n    out[4] = a[4] + b[4] * scale;\r\n    out[5] = a[5] + b[5] * scale;\r\n    out[6] = a[6] + b[6] * scale;\r\n    out[7] = a[7] + b[7] * scale;\r\n    out[8] = a[8] + b[8] * scale;\r\n    out[9] = a[9] + b[9] * scale;\r\n    out[10] = a[10] + b[10] * scale;\r\n    out[11] = a[11] + b[11] * scale;\r\n    out[12] = a[12] + b[12] * scale;\r\n    out[13] = a[13] + b[13] * scale;\r\n    out[14] = a[14] + b[14] * scale;\r\n    out[15] = a[15] + b[15] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat4}s have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\r\n    return (\r\n      a[0] === b[0] &&\r\n      a[1] === b[1] &&\r\n      a[2] === b[2] &&\r\n      a[3] === b[3] &&\r\n      a[4] === b[4] &&\r\n      a[5] === b[5] &&\r\n      a[6] === b[6] &&\r\n      a[7] === b[7] &&\r\n      a[8] === b[8] &&\r\n      a[9] === b[9] &&\r\n      a[10] === b[10] &&\r\n      a[11] === b[11] &&\r\n      a[12] === b[12] &&\r\n      a[13] === b[13] &&\r\n      a[14] === b[14] &&\r\n      a[15] === b[15]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not two {@link Mat4}s have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first matrix.\r\n   * @param b - The second matrix.\r\n   * @returns True if the matrices are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const a6 = a[6];\r\n    const a7 = a[7];\r\n    const a8 = a[8];\r\n    const a9 = a[9];\r\n    const a10 = a[10];\r\n    const a11 = a[11];\r\n    const a12 = a[12];\r\n    const a13 = a[13];\r\n    const a14 = a[14];\r\n    const a15 = a[15];\r\n\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    const b4 = b[4];\r\n    const b5 = b[5];\r\n    const b6 = b[6];\r\n    const b7 = b[7];\r\n    const b8 = b[8];\r\n    const b9 = b[9];\r\n    const b10 = b[10];\r\n    const b11 = b[11];\r\n    const b12 = b[12];\r\n    const b13 = b[13];\r\n    const b14 = b[14];\r\n    const b15 = b[15];\r\n\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\r\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\r\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\r\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\r\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\r\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\r\n      Math.abs(a8 - b8) <= GLM_EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) &&\r\n      Math.abs(a9 - b9) <= GLM_EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) &&\r\n      Math.abs(a10 - b10) <= GLM_EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) &&\r\n      Math.abs(a11 - b11) <= GLM_EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) &&\r\n      Math.abs(a12 - b12) <= GLM_EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) &&\r\n      Math.abs(a13 - b13) <= GLM_EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) &&\r\n      Math.abs(a14 - b14) <= GLM_EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) &&\r\n      Math.abs(a15 - b15) <= GLM_EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a {@link Mat4}\r\n   * @category Static\r\n   *\r\n   * @param a - matrix to represent as a string\r\n   * @returns string representation of the matrix\r\n   */\r\n  static str(a: Readonly<Mat4Like>): string {\r\n    return `Mat4(${a.join(', ')})`;\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nMat4.prototype.mul = Mat4.prototype.multiply;\r\n\r\n// Static method alias assignments\r\nMat4.sub = Mat4.subtract;\r\nMat4.mul = Mat4.multiply;\r\nMat4.frustum = Mat4.frustumNO;\r\nMat4.perspective = Mat4.perspectiveNO;\r\nMat4.ortho = Mat4.orthoNO;\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat3Like, Mat4Like, QuatLike, Vec3Like } from '#gl-matrix/types';\r\n\r\n /**\r\n  * 3 Dimensional Vector\r\n  */\r\nexport class Vec3 extends Float32Array {\r\n  /**\r\n   * Create a {@link Vec3}.\r\n   */\r\n  constructor(...values: [Readonly<Vec3Like> | ArrayBufferLike, number?] | number[]) {\r\n    switch(values.length) {\r\n      case 3:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 3); break;\r\n      case 1: {\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 3);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        super(3); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  // Getters and setters to make component access read better.\r\n  // These are likely to be a little bit slower than direct array access.\r\n\r\n  /**\r\n   * The x component of the vector. Equivalent to `this[0];`\r\n   * @category Vector components\r\n   */\r\n  get x(): number { return this[0]; }\r\n  set x(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The y component of the vector. Equivalent to `this[1];`\r\n   * @category Vector components\r\n   */\r\n  get y(): number { return this[1]; }\r\n  set y(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The z component of the vector. Equivalent to `this[2];`\r\n   * @category Vector components\r\n   */\r\n  get z(): number { return this[2]; }\r\n  set z(value: number) { this[2] = value; }\r\n\r\n  // Alternate set of getters and setters in case this is being used to define\r\n  // a color.\r\n\r\n  /**\r\n   * The r component of the vector. Equivalent to `this[0];`\r\n   * @category Color components\r\n   */\r\n  get r(): number { return this[0]; }\r\n  set r(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The g component of the vector. Equivalent to `this[1];`\r\n   * @category Color components\r\n   */\r\n  get g(): number { return this[1]; }\r\n  set g(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The b component of the vector. Equivalent to `this[2];`\r\n   * @category Color components\r\n   */\r\n  get b(): number { return this[2]; }\r\n  set b(value: number) { this[2] = value; }\r\n\r\n  /**\r\n   * The magnitude (length) of this.\r\n   * Equivalent to `Vec3.magnitude(this);`\r\n   *\r\n   * Magnitude is used because the `length` attribute is already defined by\r\n   * TypedArrays to mean the number of elements in the array.\r\n   */\r\n  get magnitude(): number {\r\n    const x = this[0];\r\n    const y = this[1];\r\n    const z = this[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.magnitude}\r\n   */\r\n  get mag(): number { return this.magnitude; }\r\n\r\n  /**\r\n   * The squared magnitude (length) of `this`.\r\n   * Equivalent to `Vec3.squaredMagnitude(this);`\r\n   */\r\n  get squaredMagnitude(): number {\r\n    const x = this[0];\r\n    const y = this[1];\r\n    const z = this[2];\r\n    return x * x + y * y + z * z;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.squaredMagnitude}\r\n   */\r\n  get sqrMag(): number { return this.squaredMagnitude; }\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Vec3.str(this);`\r\n   */\r\n  get str(): string {\r\n    return Vec3.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Vec3} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Vec3Like>): Vec3 {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a {@link Vec3} to `this`.\r\n   * Equivalent to `Vec3.add(this, this, b);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @returns `this`\r\n   */\r\n  add(b: Readonly<Vec3Like>): Vec3 {\r\n    this[0] += b[0];\r\n    this[1] += b[1];\r\n    this[2] += b[2];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtracts a {@link Vec3} from `this`.\r\n   * Equivalent to `Vec3.subtract(this, this, b);`\r\n   *\r\n   * @param b - The vector to subtract from `this`\r\n   * @returns `this`\r\n   */\r\n  subtract(b: Readonly<Vec3Like>): Vec3 {\r\n    this[0] -= b[0];\r\n    this[1] -= b[1];\r\n    this[2] -= b[2];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec3.subtract}\r\n   */\r\n  sub(b: Readonly<Vec3Like>): Vec3 { return this; }\r\n\r\n  /**\r\n   * Multiplies `this` by a {@link Vec3}.\r\n   * Equivalent to `Vec3.multiply(this, this, b);`\r\n   *\r\n   * @param b - The vector to multiply `this` by\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Vec3Like>): Vec3 {\r\n    this[0] *= b[0];\r\n    this[1] *= b[1];\r\n    this[2] *= b[2];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec3.multiply}\r\n   */\r\n  mul(b: Readonly<Vec3Like>): Vec3 { return this; }\r\n\r\n  /**\r\n   * Divides `this` by a {@link Vec3}.\r\n   * Equivalent to `Vec3.divide(this, this, b);`\r\n   *\r\n   * @param b - The vector to divide `this` by\r\n   * @returns `this`\r\n   */\r\n  divide(b: Readonly<Vec3Like>): Vec3 {\r\n    this[0] /= b[0];\r\n    this[1] /= b[1];\r\n    this[2] /= b[2];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec3.divide}\r\n   */\r\n  div(b: Readonly<Vec3Like>): Vec3 { return this; }\r\n\r\n  /**\r\n   * Scales `this` by a scalar number.\r\n   * Equivalent to `Vec3.scale(this, this, b);`\r\n   *\r\n   * @param b - Amount to scale `this` by\r\n   * @returns `this`\r\n   */\r\n  scale(b: number): Vec3 {\r\n    this[0] *= b;\r\n    this[1] *= b;\r\n    this[2] *= b;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\r\n   * Equivalent to `Vec3.scaleAndAdd(this, this, b, scale);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @param scale - The amount to scale `b` by before adding\r\n   * @returns `this`\r\n   */\r\n  scaleAndAdd(b: Readonly<Vec3Like>, scale: number): Vec3 {\r\n    this[0] += b[0] * scale;\r\n    this[1] += b[1] * scale;\r\n    this[2] += b[2] * scale;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between another {@link Vec3} and `this`.\r\n   * Equivalent to `Vec3.distance(this, b);`\r\n   *\r\n   * @param b - The vector to calculate the distance to\r\n   * @returns Distance between `this` and `b`\r\n   */\r\n  distance(b: Readonly<Vec3Like>): number {\r\n    return Vec3.distance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.distance}\r\n   */\r\n  dist(b: Readonly<Vec3Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between another {@link Vec3} and `this`.\r\n   * Equivalent to `Vec3.squaredDistance(this, b);`\r\n   *\r\n   * @param b The vector to calculate the squared distance to\r\n   * @returns Squared distance between `this` and `b`\r\n   */\r\n  squaredDistance(b: Readonly<Vec3Like>): number {\r\n    return Vec3.squaredDistance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.squaredDistance}\r\n   */\r\n  sqrDist(b: Readonly<Vec3Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of `this`.\r\n   * Equivalent to `Vec3.negate(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  negate(): Vec3 {\r\n    this[0] *= -1;\r\n    this[1] *= -1;\r\n    this[2] *= -1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inverts the components of `this`.\r\n   * Equivalent to `Vec3.inverse(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Vec3 {\r\n    this[0] = 1.0 / this[0];\r\n    this[1] = 1.0 / this[1];\r\n    this[2] = 1.0 / this[2];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets each component of `this` to it's absolute value.\r\n   * Equivalent to `Vec3.abs(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  abs(): Vec3 {\r\n    this[0] = Math.abs(this[0]);\r\n    this[1] = Math.abs(this[1]);\r\n    this[2] = Math.abs(this[2]);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of this and another {@link Vec3}.\r\n   * Equivalent to `Vec3.dot(this, b);`\r\n   *\r\n   * @param b - The second operand\r\n   * @returns Dot product of `this` and `b`\r\n   */\r\n  dot(b: Readonly<Vec3Like>): number {\r\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2];\r\n  }\r\n\r\n  /**\r\n   * Normalize `this`.\r\n   * Equivalent to `Vec3.normalize(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n   normalize(): Vec3 {\r\n    return Vec3.normalize(this, this) as Vec3;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Vec3}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 3 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, empty vec3\r\n   * @category Static\r\n   *\r\n   * @returns a new 3D vector\r\n   */\r\n  static create(): Vec3 {\r\n    return new Vec3();\r\n  }\r\n\r\n  /**\r\n   * Creates a new vec3 initialized with values from an existing vector\r\n   * @category Static\r\n   *\r\n   * @param a - vector to clone\r\n   * @returns a new 3D vector\r\n   */\r\n  static clone(a: Readonly<Vec3Like>): Vec3 {\r\n    return new Vec3(a);\r\n  }\r\n\r\n  /**\r\n   * Calculates the magnitude (length) of a {@link Vec3}\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to calculate magnitude of\r\n   * @returns Magnitude of a\r\n   */\r\n  static magnitude(a: Readonly<Vec3Like>): number {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.magnitude}\r\n   * @category Static\r\n   */\r\n  static mag(a: Readonly<Vec3Like>): number { return 0; }\r\n  /**\r\n   * Alias for {@link Vec3.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec3.magnitude} to avoid conflicts with builtin `length` methods/attribs\r\n   *\r\n   * @param a - vector to calculate length of\r\n   * @returns length of a\r\n   */\r\n  // @ts-ignore: Length conflicts with Function.length\r\n  static length(a: Readonly<Vec3Like>): number { return 0; }\r\n  /**\r\n   * Alias for {@link Vec3.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec3.mag}\r\n   */\r\n  static len(a: Readonly<Vec3Like>): number { return 0; }\r\n\r\n  /**\r\n   * Creates a new vec3 initialized with the given values\r\n   * @category Static\r\n   *\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @param z - Z component\r\n   * @returns a new 3D vector\r\n   */\r\n  static fromValues(x: number, y: number, z: number): Vec3 {\r\n    return new Vec3(x, y, z);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one vec3 to another\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the source vector\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a vec3 to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @param z - Z component\r\n   * @returns `out`\r\n   */\r\n  static set(out: Vec3Like, x: number, y: number, z: number): Vec3Like {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Vec3}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts vector b from vector a\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec3.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; };\r\n\r\n  /**\r\n   * Multiplies two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec3.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; }\r\n\r\n  /**\r\n   * Divides two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static divide(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec3.divide}\r\n   * @category Static\r\n   */\r\n   static div(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like { return [0, 0, 0]; };\r\n\r\n  /**\r\n   * Math.ceil the components of a vec3\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to ceil\r\n   * @returns `out`\r\n   */\r\n  static ceil(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = Math.ceil(a[0]);\r\n    out[1] = Math.ceil(a[1]);\r\n    out[2] = Math.ceil(a[2]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.floor the components of a vec3\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to floor\r\n   * @returns `out`\r\n   */\r\n  static floor(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = Math.floor(a[0]);\r\n    out[1] = Math.floor(a[1]);\r\n    out[2] = Math.floor(a[2]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum of two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static min(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    out[2] = Math.min(a[2], b[2]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the maximum of two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static max(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    out[2] = Math.max(a[2], b[2]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * symmetric round the components of a vec3\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to round\r\n   * @returns `out`\r\n   */\r\n  /*static round(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = glMatrix.round(a[0]);\r\n    out[1] = glMatrix.round(a[1]);\r\n    out[2] = glMatrix.round(a[2]);\r\n    return out;\r\n  }*/\r\n\r\n  /**\r\n   * Scales a vec3 by a scalar number\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to scale\r\n   * @param scale - amount to scale the vector by\r\n   * @returns `out`\r\n   */\r\n  static scale(out: Vec3Like, a: Readonly<Vec3Like>, scale: number): Vec3Like {\r\n    out[0] = a[0] * scale;\r\n    out[1] = a[1] * scale;\r\n    out[2] = a[2] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two vec3's after scaling the second operand by a scalar value\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param scale - the amount to scale b by before adding\r\n   * @returns `out`\r\n   */\r\n  static scaleAndAdd(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, scale: number) {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    out[2] = a[2] + b[2] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between two vec3's\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns distance between a and b\r\n   */\r\n  static distance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\r\n    const x = b[0] - a[0];\r\n    const y = b[1] - a[1];\r\n    const z = b[2] - a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.distance}\r\n   */\r\n  static dist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between two vec3's\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns squared distance between a and b\r\n   */\r\n  static squaredDistance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\r\n    const x = b[0] - a[0];\r\n    const y = b[1] - a[1];\r\n    const z = b[2] - a[2];\r\n    return x * x + y * y + z * z;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.squaredDistance}\r\n   */\r\n  static sqrDist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared length of a vec3\r\n   * @category Static\r\n   *\r\n   * @param a - vector to calculate squared length of\r\n   * @returns squared length of a\r\n   */\r\n  static squaredLength(a: Readonly<Vec3Like>): number {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    return x * x + y * y + z * z;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec3.squaredLength}\r\n   */\r\n  static sqrLen(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of a vec3\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to negate\r\n   * @returns `out`\r\n   */\r\n  static negate(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the inverse of the components of a vec3\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to invert\r\n   * @returns `out`\r\n   */\r\n  static inverse(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the absolute value of the components of a {@link Vec3}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to compute the absolute values of\r\n   * @returns `out`\r\n   */\r\n  static abs(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    out[0] = Math.abs(a[0]);\r\n    out[1] = Math.abs(a[1]);\r\n    out[2] = Math.abs(a[2]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Normalize a vec3\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to normalize\r\n   * @returns `out`\r\n   */\r\n  static normalize(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    let len = x * x + y * y + z * z;\r\n    if (len > 0) {\r\n      //TODO: evaluate use of glm_invsqrt here?\r\n      len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of two vec3's\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns dot product of a and b\r\n   */\r\n  static dot(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n  }\r\n\r\n  /**\r\n   * Computes the cross product of two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static cross(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): Vec3Like {\r\n    const ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n    const bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a linear interpolation between two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static lerp(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): Vec3Like {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a spherical linear interpolation between two vec3's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static slerp(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): Vec3Like {\r\n    const angle = Math.acos(Math.min(Math.max(Vec3.dot(a, b), -1), 1));\r\n    const sinTotal = Math.sin(angle);\r\n\r\n    const ratioA = Math.sin((1 - t) * angle) / sinTotal;\r\n    const ratioB = Math.sin(t * angle) / sinTotal;\r\n    out[0] = ratioA * a[0] + ratioB * b[0];\r\n    out[1] = ratioA * a[1] + ratioB * b[1];\r\n    out[2] = ratioA * a[2] + ratioB * b[2];\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a hermite interpolation with two control points\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param c - the third operand\r\n   * @param d - the fourth operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static hermite(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>, d: Readonly<Vec3Like>, t: number): Vec3Like {\r\n    const factorTimes2 = t * t;\r\n    const factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n    const factor2 = factorTimes2 * (t - 2) + t;\r\n    const factor3 = factorTimes2 * (t - 1);\r\n    const factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a bezier interpolation with two control points\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param c - the third operand\r\n   * @param d - the fourth operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static bezier(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>, d: Readonly<Vec3Like>, t: number): Vec3Like {\r\n    const inverseFactor = 1 - t;\r\n    const inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n    const factorTimes2 = t * t;\r\n    const factor1 = inverseFactorTimesTwo * inverseFactor;\r\n    const factor2 = 3 * t * inverseFactorTimesTwo;\r\n    const factor3 = 3 * factorTimes2 * inverseFactor;\r\n    const factor4 = factorTimes2 * t;\r\n\r\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a random vector with the given scale\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\r\n   * @returns `out`\r\n   */\r\n  /*static random(out: Vec3Like, scale) {\r\n    scale = scale === undefined ? 1.0 : scale;\r\n\r\n    let r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n    let z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n    let zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n    out[0] = Math.cos(r) * zScale;\r\n    out[1] = Math.sin(r) * zScale;\r\n    out[2] = z * scale;\r\n    return out;\r\n  }*/\r\n\r\n  /**\r\n   * Transforms the vec3 with a mat4.\r\n   * 4th vector component is implicitly '1'\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to transform\r\n   * @param m - matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat4(out: Vec3Like, a: Readonly<Vec3Like>, m: Readonly<Mat4Like>): Vec3Like {\r\n    const x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n    const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the vec3 with a mat3.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to transform\r\n   * @param m - the 3x3 matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat3(out: Vec3Like, a: Vec3Like, m: Mat3Like): Vec3Like {\r\n    let x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n    out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    out[1] = x * m[1] + y * m[4] + z * m[7];\r\n    out[2] = x * m[2] + y * m[5] + z * m[8];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the vec3 with a quat\r\n   * Can also be used for dual quaternions. (Multiply it with the real part)\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to transform\r\n   * @param q - quaternion to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformQuat(out: Vec3Like, a: Readonly<Vec3Like>, q: Readonly<QuatLike>): Vec3Like {\r\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n    const qx = q[0];\r\n    const qy = q[1];\r\n    const qz = q[2];\r\n    const w2 = q[3] * 2;\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    // var qvec = [qx, qy, qz];\r\n    // var uv = vec3.cross([], qvec, a);\r\n    const uvx = (qy * z - qz * y);\r\n    const uvy = (qz * x - qx * z);\r\n    const uvz = (qx * y - qy * x);\r\n    // var uuv = vec3.cross([], qvec, uv);\r\n    // vec3.scale(uuv, uuv, 2);\r\n    const uuvx = (qy * uvz - qz * uvy) * 2;\r\n    const uuvy = (qz * uvx - qx * uvz) * 2;\r\n    const uuvz = (qx * uvy - qy * uvx) * 2;\r\n    // vec3.scale(uv, uv, 2 * w);\r\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n    out[0] = x + (uvx*w2) + uuvx;\r\n    out[1] = y + (uvy*w2) + uuvy;\r\n    out[2] = z + (uvz*w2) + uuvz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotate a 3D vector around the x-axis\r\n   * @param out - The receiving vec3\r\n   * @param a - The vec3 point to rotate\r\n   * @param b - The origin of the rotation\r\n   * @param rad - The angle of rotation in radians\r\n   * @returns `out`\r\n   */\r\n  static rotateX(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\r\n    const by = b[1];\r\n    const bz = b[2];\r\n\r\n    //Translate point to the origin\r\n    const py = a[1] - by;\r\n    const pz = a[2] - bz;\r\n\r\n    //perform rotation\r\n    //translate to correct position\r\n    out[0] = a[0];\r\n    out[1] = (py * Math.cos(rad) - pz * Math.sin(rad)) + by;\r\n    out[2] = (py * Math.sin(rad) + pz * Math.cos(rad)) + bz;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotate a 3D vector around the y-axis\r\n   * @param out - The receiving vec3\r\n   * @param a - The vec3 point to rotate\r\n   * @param b - The origin of the rotation\r\n   * @param rad - The angle of rotation in radians\r\n   * @returns `out`\r\n   */\r\n  static rotateY(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\r\n    const bx = b[0];\r\n    const bz = b[2];\r\n\r\n    //Translate point to the origin\r\n    const px = a[0] - bx;\r\n    const pz = a[2] - bz;\r\n\r\n    //perform rotation\r\n    //translate to correct position\r\n    out[0] = (pz * Math.sin(rad) + px * Math.cos(rad)) + bx;\r\n    out[1] = a[1];\r\n    out[2] = (pz * Math.cos(rad) - px * Math.sin(rad)) + bz;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotate a 3D vector around the z-axis\r\n   * @param out - The receiving vec3\r\n   * @param a - The vec3 point to rotate\r\n   * @param b - The origin of the rotation\r\n   * @param rad - The angle of rotation in radians\r\n   * @returns `out`\r\n   */\r\n  static rotateZ(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): Vec3Like {\r\n    const bx = b[0];\r\n    const by = b[1];\r\n\r\n    //Translate point to the origin\r\n    const px = a[0] - bx;\r\n    const py = a[1] - by;\r\n\r\n    //perform rotation\r\n    //translate to correct position\r\n    out[0] = (px * Math.cos(rad) - py * Math.sin(rad)) + bx;\r\n    out[1] = (px * Math.sin(rad) + py * Math.cos(rad)) + by;\r\n    out[2] = b[2];\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Get the angle between two 3D vectors\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns The angle in radians\r\n   */\r\n  static angle(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>) {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    const bx = b[0];\r\n    const by = b[1];\r\n    const bz = b[2];\r\n    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\r\n    const cosine = mag && Vec3.dot(a, b) / mag;\r\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n  }\r\n\r\n  /**\r\n   * Set the components of a vec3 to zero\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @returns `out`\r\n   */\r\n  static zero(out: Vec3Like): Vec3Like {\r\n    out[0] = 0.0;\r\n    out[1] = 0.0;\r\n    out[2] = 0.0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a vector\r\n   * @category Static\r\n   *\r\n   * @param a - vector to represent as a string\r\n   * @returns string representation of the vector\r\n   */\r\n  static str(a: Readonly<Vec3Like>): string {\r\n    return `Vec3(${a.join(', ')})`;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns True if the vectors are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns True if the vectors are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\r\n    );\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nVec3.prototype.sub = Vec3.prototype.subtract;\r\nVec3.prototype.mul = Vec3.prototype.multiply;\r\nVec3.prototype.div = Vec3.prototype.divide;\r\nVec3.prototype.dist = Vec3.prototype.distance;\r\nVec3.prototype.sqrDist = Vec3.prototype.squaredDistance;\r\n\r\n// Static method alias assignments\r\nVec3.sub = Vec3.subtract;\r\nVec3.mul = Vec3.multiply;\r\nVec3.div = Vec3.divide;\r\nVec3.dist = Vec3.distance;\r\nVec3.sqrDist = Vec3.squaredDistance;\r\nVec3.sqrLen = Vec3.squaredLength;\r\nVec3.mag = Vec3.magnitude;\r\nVec3.length = Vec3.magnitude;\r\nVec3.len = Vec3.magnitude;\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat4Like, QuatLike, Vec4Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n */\r\nexport class Vec4 extends Float32Array {\r\n  /**\r\n   * Create a {@link Vec4}.\r\n   */\r\n  constructor(...values: [Readonly<Vec4Like> | ArrayBufferLike, number?] | number[]) {\r\n    switch(values.length) {\r\n      case 4:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\r\n      case 1: {\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, v, v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 4);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        super(4); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  // Getters and setters to make component access read better.\r\n  // These are likely to be a little bit slower than direct array access.\r\n\r\n  /**\r\n   * The x component of the vector. Equivalent to `this[0];`\r\n   * @category Vector components\r\n   */\r\n  get x(): number { return this[0]; }\r\n  set x(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The y component of the vector. Equivalent to `this[1];`\r\n   * @category Vector components\r\n   */\r\n  get y(): number { return this[1]; }\r\n  set y(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The z component of the vector. Equivalent to `this[2];`\r\n   * @category Vector components\r\n   */\r\n  get z(): number { return this[2]; }\r\n  set z(value: number) { this[2] = value; }\r\n\r\n  /**\r\n   * The w component of the vector. Equivalent to `this[3];`\r\n   * @category Vector components\r\n   */\r\n  get w(): number { return this[3]; }\r\n  set w(value: number) { this[3] = value; }\r\n\r\n  // Alternate set of getters and setters in case this is being used to define\r\n  // a color.\r\n\r\n  /**\r\n   * The r component of the vector. Equivalent to `this[0];`\r\n   * @category Color components\r\n   */\r\n  get r(): number { return this[0]; }\r\n  set r(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The g component of the vector. Equivalent to `this[1];`\r\n   * @category Color components\r\n   */\r\n  get g(): number { return this[1]; }\r\n  set g(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The b component of the vector. Equivalent to `this[2];`\r\n   * @category Color components\r\n   */\r\n  get b(): number { return this[2]; }\r\n  set b(value: number) { this[2] = value; }\r\n\r\n  /**\r\n   * The a component of the vector. Equivalent to `this[3];`\r\n   * @category Color components\r\n   */\r\n  get a(): number { return this[3]; }\r\n  set a(value: number) { this[3] = value; }\r\n\r\n  /**\r\n   * The magnitude (length) of this.\r\n   * Equivalent to `Vec4.magnitude(this);`\r\n   *\r\n   * Magnitude is used because the `length` attribute is already defined by\r\n   * TypedArrays to mean the number of elements in the array.\r\n   */\r\n  get magnitude(): number {\r\n    const x = this[0];\r\n    const y = this[1];\r\n    const z = this[2];\r\n    const w = this[3];\r\n    return Math.sqrt(x * x + y * y + z * z + w * w);\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.magnitude}\r\n   */\r\n  get mag(): number { return this.magnitude; }\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Vec4.str(this);`\r\n   */\r\n  get str(): string {\r\n    return Vec4.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Vec4} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Vec4Like>): Vec4 {\r\n    super.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a {@link Vec4} to `this`.\r\n   * Equivalent to `Vec4.add(this, this, b);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @returns `this`\r\n   */\r\n  add(b: Readonly<Vec4Like>): Vec4 {\r\n    this[0] += b[0];\r\n    this[1] += b[1];\r\n    this[2] += b[2];\r\n    this[3] += b[3];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtracts a {@link Vec4} from `this`.\r\n   * Equivalent to `Vec4.subtract(this, this, b);`\r\n   *\r\n   * @param b - The vector to subtract from `this`\r\n   * @returns `this`\r\n   */\r\n   subtract(b: Readonly<Vec4Like>): Vec4 {\r\n    this[0] -= b[0];\r\n    this[1] -= b[1];\r\n    this[2] -= b[2];\r\n    this[3] -= b[3];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.subtract}\r\n   */\r\n  sub(b: Readonly<Vec4Like>): Vec4 { return this; }\r\n\r\n  /**\r\n   * Multiplies `this` by a {@link Vec4}.\r\n   * Equivalent to `Vec4.multiply(this, this, b);`\r\n   *\r\n   * @param b - The vector to multiply `this` by\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Vec4Like>): Vec4 {\r\n    this[0] *= b[0];\r\n    this[1] *= b[1];\r\n    this[2] *= b[2];\r\n    this[3] *= b[3];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.multiply}\r\n   */\r\n  mul(b: Readonly<Vec4Like>): Vec4 { return this; }\r\n\r\n  /**\r\n   * Divides `this` by a {@link Vec4}.\r\n   * Equivalent to `Vec4.divide(this, this, b);`\r\n   *\r\n   * @param b - The vector to divide `this` by\r\n   * @returns `this`\r\n   */\r\n  divide(b: Readonly<Vec4Like>): Vec4 {\r\n    this[0] /= b[0];\r\n    this[1] /= b[1];\r\n    this[2] /= b[2];\r\n    this[3] /= b[3];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.divide}\r\n   */\r\n  div(b: Readonly<Vec4Like>): Vec4 { return this; }\r\n\r\n  /**\r\n   * Scales `this` by a scalar number.\r\n   * Equivalent to `Vec4.scale(this, this, b);`\r\n   *\r\n   * @param b - Amount to scale `this` by\r\n   * @returns `this`\r\n   */\r\n  scale(b: number): Vec4 {\r\n    this[0] *= b;\r\n    this[1] *= b;\r\n    this[2] *= b;\r\n    this[3] *= b;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\r\n   * Equivalent to `Vec4.scaleAndAdd(this, this, b, scale);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @param scale - The amount to scale `b` by before adding\r\n   * @returns `this`\r\n   */\r\n  scaleAndAdd(b: Readonly<Vec4Like>, scale: number): Vec4 {\r\n    this[0] += b[0] * scale;\r\n    this[1] += b[1] * scale;\r\n    this[2] += b[2] * scale;\r\n    this[3] += b[3] * scale;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between another {@link Vec4} and `this`.\r\n   * Equivalent to `Vec4.distance(this, b);`\r\n   *\r\n   * @param b - The vector to calculate the distance to\r\n   * @returns Distance between `this` and `b`\r\n   */\r\n  distance(b: Readonly<Vec4Like>): number {\r\n    return Vec4.distance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec4.distance}\r\n   */\r\n  dist(b: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between another {@link Vec4} and `this`.\r\n   * Equivalent to `Vec4.squaredDistance(this, b);`\r\n   *\r\n   * @param b The vector to calculate the squared distance to\r\n   * @returns Squared distance between `this` and `b`\r\n   */\r\n  squaredDistance(b: Readonly<Vec4Like>): number {\r\n    return Vec4.squaredDistance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec4.squaredDistance}\r\n   */\r\n  sqrDist(b: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of `this`.\r\n   * Equivalent to `Vec4.negate(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  negate(): Vec4 {\r\n    this[0] *= -1;\r\n    this[1] *= -1;\r\n    this[2] *= -1;\r\n    this[3] *= -1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inverts the components of `this`.\r\n   * Equivalent to `Vec4.inverse(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Vec4 {\r\n    this[0] = 1.0 / this[0];\r\n    this[1] = 1.0 / this[1];\r\n    this[2] = 1.0 / this[2];\r\n    this[3] = 1.0 / this[3];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets each component of `this` to it's absolute value.\r\n   * Equivalent to `Vec4.abs(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  abs(): Vec4 {\r\n    this[0] = Math.abs(this[0]);\r\n    this[1] = Math.abs(this[1]);\r\n    this[2] = Math.abs(this[2]);\r\n    this[3] = Math.abs(this[3]);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of this and another {@link Vec4}.\r\n   * Equivalent to `Vec4.dot(this, b);`\r\n   *\r\n   * @param b - The second operand\r\n   * @returns Dot product of `this` and `b`\r\n   */\r\n  dot(b: Readonly<Vec4Like>): number {\r\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2] + this[3] * b[3];\r\n  }\r\n\r\n  /**\r\n   * Normalize `this`.\r\n   * Equivalent to `Vec4.normalize(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  normalize(): Vec4 {\r\n    return Vec4.normalize(this, this) as Vec4;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Vec4}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 4 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, empty {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @returns a new 4D vector\r\n   */\r\n  static create(): Vec4 {\r\n    return new Vec4();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Vec4} initialized with values from an existing vector\r\n   * @category Static\r\n   *\r\n   * @param a - vector to clone\r\n   * @returns a new 4D vector\r\n   */\r\n  static clone(a: Vec4Like): Vec4 {\r\n    return new Vec4(a);\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Vec4} initialized with the given values\r\n   * @category Static\r\n   *\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @param z - Z component\r\n   * @param w - W component\r\n   * @returns a new 4D vector\r\n   */\r\n  static fromValues(x: number, y: number, z: number, w: number): Vec4 {\r\n    return new Vec4(x, y, z, w);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Vec4} to another\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the source vector\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Vec4} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @param z - Z component\r\n   * @param w - W component\r\n   * @returns `out`\r\n   */\r\n  static set(out: Vec4Like, x: number, y: number, z: number, w: number): Vec4Like {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Vec4}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts vector b from vector a\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\r\n\r\n  /**\r\n   * Multiplies two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    out[3] = a[3] * b[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\r\n\r\n  /**\r\n   * Divides two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static divide(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    out[3] = a[3] / b[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.divide}\r\n   * @category Static\r\n   */\r\n  static div(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like { return out; }\r\n\r\n  /**\r\n   * Math.ceil the components of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to ceil\r\n   * @returns `out`\r\n   */\r\n  static ceil(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = Math.ceil(a[0]);\r\n    out[1] = Math.ceil(a[1]);\r\n    out[2] = Math.ceil(a[2]);\r\n    out[3] = Math.ceil(a[3]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.floor the components of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to floor\r\n   * @returns `out`\r\n   */\r\n  static floor(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = Math.floor(a[0]);\r\n    out[1] = Math.floor(a[1]);\r\n    out[2] = Math.floor(a[2]);\r\n    out[3] = Math.floor(a[3]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum of two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static min(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    out[2] = Math.min(a[2], b[2]);\r\n    out[3] = Math.min(a[3], b[3]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the maximum of two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static max(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    out[2] = Math.max(a[2], b[2]);\r\n    out[3] = Math.max(a[3], b[3]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.round the components of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to round\r\n   * @returns `out`\r\n   */\r\n  static round(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = Math.round(a[0]);\r\n    out[1] = Math.round(a[1]);\r\n    out[2] = Math.round(a[2]);\r\n    out[3] = Math.round(a[3]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales a {@link Vec4} by a scalar number\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to scale\r\n   * @param scale - amount to scale the vector by\r\n   * @returns `out`\r\n   */\r\n  static scale(out: Vec4Like, a: Readonly<Vec4Like>, scale: number): Vec4Like {\r\n    out[0] = a[0] * scale;\r\n    out[1] = a[1] * scale;\r\n    out[2] = a[2] * scale;\r\n    out[3] = a[3] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Vec4}'s after scaling the second operand by a scalar value\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param scale - the amount to scale b by before adding\r\n   * @returns `out`\r\n   */\r\n  static scaleAndAdd(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, scale: number): Vec4Like {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    out[2] = a[2] + b[2] * scale;\r\n    out[3] = a[3] + b[3] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns distance between a and b\r\n   */\r\n  static distance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\r\n    const x = b[0] - a[0];\r\n    const y = b[1] - a[1];\r\n    const z = b[2] - a[2];\r\n    const w = b[3] - a[3];\r\n    return Math.hypot(x, y, z, w);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec4.distance}\r\n   * @category Static\r\n   */\r\n  static dist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns squared distance between a and b\r\n   */\r\n  static squaredDistance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\r\n    const x = b[0] - a[0];\r\n    const y = b[1] - a[1];\r\n    const z = b[2] - a[2];\r\n    const w = b[3] - a[3];\r\n    return x * x + y * y + z * z + w * w;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec4.squaredDistance}\r\n   * @category Static\r\n   */\r\n  static sqrDist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the magnitude (length) of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param a - vector to calculate length of\r\n   * @returns length of `a`\r\n   */\r\n  static magnitude(a: Readonly<Vec4Like>): number {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    const w = a[3];\r\n    return Math.sqrt(x * x + y * y + z * z + w * w);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec4.magnitude}\r\n   * @category Static\r\n   */\r\n  static mag(a: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec4.magnitude} to avoid conflicts with builtin `length` methods/attribs\r\n   */\r\n  // @ts-ignore: Length conflicts with Function.length\r\n  static length(a: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec4.mag}\r\n   */\r\n  static len(a: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared length of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param a - vector to calculate squared length of\r\n   * @returns squared length of a\r\n   */\r\n  static squaredLength(a: Readonly<Vec4Like>): number {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    const w = a[3];\r\n    return x * x + y * y + z * z + w * w;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec4.squaredLength}\r\n   * @category Static\r\n   */\r\n  static sqrLen(a: Readonly<Vec4Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to negate\r\n   * @returns `out`\r\n   */\r\n  static negate(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = -a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the inverse of the components of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to invert\r\n   * @returns `out`\r\n   */\r\n  static inverse(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    out[3] = 1.0 / a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the absolute value of the components of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to compute the absolute values of\r\n   * @returns `out`\r\n   */\r\n  static abs(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    out[0] = Math.abs(a[0]);\r\n    out[1] = Math.abs(a[1]);\r\n    out[2] = Math.abs(a[2]);\r\n    out[3] = Math.abs(a[3]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Normalize a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - vector to normalize\r\n   * @returns `out`\r\n   */\r\n  static normalize(out: Vec4Like, a: Readonly<Vec4Like>): Vec4Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    const w = a[3];\r\n    let len = x * x + y * y + z * z + w * w;\r\n    if (len > 0) {\r\n      len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns dot product of a and b\r\n   */\r\n  static dot(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n  }\r\n\r\n  /**\r\n   * Returns the cross-product of three vectors in a 4-dimensional space\r\n   * @category Static\r\n   *\r\n   * @param out the receiving vector\r\n   * @param u - the first vector\r\n   * @param v - the second vector\r\n   * @param w - the third vector\r\n   * @returns result\r\n   */\r\n  static cross(out: Vec4Like, u: Readonly<Vec4Like>, v: Readonly<Vec4Like>, w: Readonly<Vec4Like>): Vec4Like {\r\n    const a = v[0] * w[1] - v[1] * w[0];\r\n    const b = v[0] * w[2] - v[2] * w[0];\r\n    const c = v[0] * w[3] - v[3] * w[0];\r\n    const d = v[1] * w[2] - v[2] * w[1];\r\n    const e = v[1] * w[3] - v[3] * w[1];\r\n    const f = v[2] * w[3] - v[3] * w[2];\r\n    const g = u[0];\r\n    const h = u[1];\r\n    const i = u[2];\r\n    const j = u[3];\r\n\r\n    out[0] = h * f - i * e + j * d;\r\n    out[1] = -(g * f) + i * c - j * b;\r\n    out[2] = g * e - h * c + j * a;\r\n    out[3] = -(g * d) + h * b - i * a;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a linear interpolation between two {@link Vec4}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static lerp(out: Vec4Like, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, t: number): Vec4Like {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    const aw = a[3];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    out[3] = aw + t * (b[3] - aw);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a random vector with the given scale\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param [scale] - Length of the resulting vector. If ommitted, a unit vector will be returned\r\n   * @returns `out`\r\n   */\r\n  /*static random(out: Vec4Like, scale): Vec4Like {\r\n    scale = scale || 1.0;\r\n\r\n    // Marsaglia, George. Choosing a Point from the Surface of a\r\n    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n    // http://projecteuclid.org/euclid.aoms/1177692644;\r\n    var v1, v2, v3, v4;\r\n    var s1, s2;\r\n    do {\r\n      v1 = glMatrix.RANDOM() * 2 - 1;\r\n      v2 = glMatrix.RANDOM() * 2 - 1;\r\n      s1 = v1 * v1 + v2 * v2;\r\n    } while (s1 >= 1);\r\n    do {\r\n      v3 = glMatrix.RANDOM() * 2 - 1;\r\n      v4 = glMatrix.RANDOM() * 2 - 1;\r\n      s2 = v3 * v3 + v4 * v4;\r\n    } while (s2 >= 1);\r\n\r\n    var d = Math.sqrt((1 - s1) / s2);\r\n    out[0] = scale * v1;\r\n    out[1] = scale * v2;\r\n    out[2] = scale * v3 * d;\r\n    out[3] = scale * v4 * d;\r\n    return out;\r\n  }*/\r\n\r\n  /**\r\n   * Transforms the {@link Vec4} with a {@link Mat4}.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to transform\r\n   * @param m - matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat4(out: Vec4Like, a: Readonly<Vec4Like>, m: Readonly<Mat4Like>): Vec4Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    const w = a[3];\r\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec4} with a {@link Quat}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to transform\r\n   * @param q - quaternion to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformQuat(out: Vec4Like, a: Readonly<Vec4Like>, q: Readonly<QuatLike>): Vec4Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    const z = a[2];\r\n    const qx = q[0];\r\n    const qy = q[1];\r\n    const qz = q[2];\r\n    const qw = q[3];\r\n\r\n    // calculate quat * vec\r\n    const ix = qw * x + qy * z - qz * y;\r\n    const iy = qw * y + qz * x - qx * z;\r\n    const iz = qw * z + qx * y - qy * x;\r\n    const iw = -qx * x - qy * y - qz * z;\r\n\r\n    // calculate result * inverse quat\r\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n    out[3] = a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Vec4} to zero\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @returns `out`\r\n   */\r\n  static zero(out: Vec4Like): Vec4Like {\r\n    out[0] = 0.0;\r\n    out[1] = 0.0;\r\n    out[2] = 0.0;\r\n    out[3] = 0.0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a {@link Vec4}\r\n   * @category Static\r\n   *\r\n   * @param a - vector to represent as a string\r\n   * @returns string representation of the vector\r\n   */\r\n  static str(a: Readonly<Vec4Like>): string {\r\n    return `Vec4(${a.join(', ')})`;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns True if the vectors are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns True if the vectors are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\r\n    );\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nVec4.prototype.sub = Vec4.prototype.subtract;\r\nVec4.prototype.mul = Vec4.prototype.multiply;\r\nVec4.prototype.div = Vec4.prototype.divide;\r\nVec4.prototype.dist = Vec4.prototype.distance;\r\nVec4.prototype.sqrDist = Vec4.prototype.squaredDistance;\r\n\r\n// Static method alias assignments\r\nVec4.sub = Vec4.subtract;\r\nVec4.mul = Vec4.multiply;\r\nVec4.div = Vec4.divide;\r\nVec4.dist = Vec4.distance;\r\nVec4.sqrDist = Vec4.squaredDistance;\r\nVec4.sqrLen = Vec4.squaredLength;\r\nVec4.mag = Vec4.magnitude;\r\nVec4.length = Vec4.magnitude;\r\nVec4.len = Vec4.magnitude;\r\n", "import { Vec3 } from './Vec3.js';\r\nimport { Vec4 } from './Vec4.js';\r\nimport { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat3Like, QuatLike, Vec3Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * Quaternion\r\n */\r\nexport class Quat extends Float32Array {\r\n  static #DEFAULT_ANGLE_ORDER = 'zyx';\r\n\r\n  // Temporary variables to prevent repeated allocations in the algorithms within Quat.\r\n  // These are declared as TypedArrays to aid in tree-shaking.\r\n\r\n  static #TMP_QUAT1 = new Float32Array(4);\r\n  static #TMP_QUAT2 = new Float32Array(4);\r\n  static #TMP_MAT3 = new Float32Array(9);\r\n\r\n  static #TMP_VEC3 = new Float32Array(3);\r\n  static #X_UNIT_VEC3 = new Float32Array([1, 0, 0]);\r\n  static #Y_UNIT_VEC3 = new Float32Array([0, 1, 0]);\r\n\r\n  /**\r\n   * Create a {@link Quat}.\r\n   */\r\n   constructor(...values: [Readonly<QuatLike> | ArrayBufferLike, number?] | number[]) {\r\n    switch(values.length) {\r\n      case 4:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 4); break;\r\n      case 1: {\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, v, v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 4);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        super(4);\r\n        this[3] = 1;\r\n        break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  // Getters and setters to make component access read better.\r\n  // These are likely to be a little bit slower than direct array access.\r\n\r\n  /**\r\n   * The x component of the quaternion. Equivalent to `this[0];`\r\n   * @category Quaternion components\r\n   */\r\n  get x(): number { return this[0]; }\r\n  set x(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The y component of the quaternion. Equivalent to `this[1];`\r\n   * @category Quaternion components\r\n   */\r\n  get y(): number { return this[1]; }\r\n  set y(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The z component of the quaternion. Equivalent to `this[2];`\r\n   * @category Quaternion components\r\n   */\r\n  get z(): number { return this[2]; }\r\n  set z(value: number) { this[2] = value; }\r\n\r\n  /**\r\n   * The w component of the quaternion. Equivalent to `this[3];`\r\n   * @category Quaternion components\r\n   */\r\n  get w(): number { return this[3]; }\r\n  set w(value: number) { this[3] = value; }\r\n\r\n  /**\r\n   * The magnitude (length) of this.\r\n   * Equivalent to `Quat.magnitude(this);`\r\n   *\r\n   * Magnitude is used because the `length` attribute is already defined by\r\n   * TypedArrays to mean the number of elements in the array.\r\n   */\r\n  get magnitude(): number {\r\n    const x = this[0];\r\n    const y = this[1];\r\n    const z = this[2];\r\n    const w = this[3];\r\n    return Math.sqrt(x * x + y * y + z * z + w * w);\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Quat.magnitude}\r\n   */\r\n  get mag(): number { return this.magnitude; }\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Quat.str(this);`\r\n   */\r\n  get str(): string {\r\n    return Quat.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Quat} into `this`.\r\n   *\r\n   * @param a the source quaternion\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<QuatLike>): Quat {\r\n    super.set(a);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set `this` to the identity quaternion\r\n   * Equivalent to Quat.identity(this)\r\n   *\r\n   * @returns `this`\r\n   */\r\n  identity(): Quat {\r\n    this[0] = 0;\r\n    this[1] = 0;\r\n    this[2] = 0;\r\n    this[3] = 1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies `this` by a {@link Quat}.\r\n   * Equivalent to `Quat.multiply(this, this, b);`\r\n   *\r\n   * @param b - The vector to multiply `this` by\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<QuatLike>): Quat {\r\n    return Quat.multiply(this, this, b) as Quat;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Quat.multiply}\r\n   */\r\n  mul(b: Readonly<QuatLike>): Quat { return this; }\r\n\r\n  /**\r\n   * Rotates `this` by the given angle about the X axis\r\n   * Equivalent to `Quat.rotateX(this, this, rad);`\r\n   *\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `this`\r\n   */\r\n  rotateX(rad: number): Quat {\r\n    return Quat.rotateX(this, this, rad) as Quat;\r\n  }\r\n\r\n  /**\r\n   * Rotates `this` by the given angle about the Y axis\r\n   * Equivalent to `Quat.rotateY(this, this, rad);`\r\n   *\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `this`\r\n   */\r\n  rotateY(rad: number): Quat {\r\n    return Quat.rotateY(this, this, rad) as Quat;\r\n  }\r\n\r\n  /**\r\n   * Rotates `this` by the given angle about the Z axis\r\n   * Equivalent to `Quat.rotateZ(this, this, rad);`\r\n   *\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `this`\r\n   */\r\n  rotateZ(rad: number): Quat {\r\n    return Quat.rotateZ(this, this, rad) as Quat;\r\n  }\r\n\r\n  /**\r\n   * Inverts `this`\r\n   * Equivalent to `Quat.invert(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Quat {\r\n    return Quat.invert(this, this) as Quat;\r\n  }\r\n\r\n  /**\r\n   * Scales `this` by a scalar number\r\n   * Equivalent to `Quat.scale(this, this, scale);`\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to scale\r\n   * @param scale - amount to scale the vector by\r\n   * @returns `this`\r\n   */\r\n  scale(scale: number): QuatLike {\r\n    this[0] *= scale;\r\n    this[1] *= scale;\r\n    this[2] *= scale;\r\n    this[3] *= scale;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of `this` and another {@link Quat}\r\n   * Equivalent to `Quat.dot(this, b);`\r\n   *\r\n   * @param b - the second operand\r\n   * @returns dot product of `this` and b\r\n   */\r\n  dot(b: Readonly<QuatLike>): number {\r\n    return Quat.dot(this, b);\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Quat}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 4 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new identity quat\r\n   * @category Static\r\n   *\r\n   * @returns a new quaternion\r\n   */\r\n  static create(): Quat {\r\n    return new Quat();\r\n  }\r\n\r\n  /**\r\n   * Set a quat to the identity quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @returns `out`\r\n   */\r\n  static identity(out: QuatLike): QuatLike {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets a quat from the given angle and rotation axis,\r\n   * then returns it.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param axis - the axis around which to rotate\r\n   * @param rad - the angle in radians\r\n   * @returns `out`\r\n   **/\r\n  static setAxisAngle(out: QuatLike, axis: Readonly<Vec3Like>, rad: number): QuatLike {\r\n    rad = rad * 0.5;\r\n    const s = Math.sin(rad);\r\n    out[0] = s * axis[0];\r\n    out[1] = s * axis[1];\r\n    out[2] = s * axis[2];\r\n    out[3] = Math.cos(rad);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Gets the rotation axis and angle for a given\r\n   *  quaternion. If a quaternion is created with\r\n   *  setAxisAngle, this method will return the same\r\n   *  values as providied in the original parameter list\r\n   *  OR functionally equivalent values.\r\n   * Example: The quaternion formed by axis [0, 0, 1] and\r\n   *  angle -90 is the same as the quaternion formed by\r\n   *  [0, 0, 1] and 270. This method favors the latter.\r\n   * @category Static\r\n   *\r\n   * @param out_axis - Vector receiving the axis of rotation\r\n   * @param q - Quaternion to be decomposed\r\n   * @return Angle, in radians, of the rotation\r\n   */\r\n  static getAxisAngle(out_axis: Vec3Like, q: Readonly<QuatLike>): number {\r\n    const rad = Math.acos(q[3]) * 2.0;\r\n    const s = Math.sin(rad / 2.0);\r\n    if (s > GLM_EPSILON) {\r\n      out_axis[0] = q[0] / s;\r\n      out_axis[1] = q[1] / s;\r\n      out_axis[2] = q[2] / s;\r\n    } else {\r\n      // If s is zero, return any axis (no rotation - axis does not matter)\r\n      out_axis[0] = 1;\r\n      out_axis[1] = 0;\r\n      out_axis[2] = 0;\r\n    }\r\n    return rad;\r\n  }\r\n\r\n  /**\r\n   * Gets the angular distance between two unit quaternions\r\n   * @category Static\r\n   *\r\n   * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n   * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n   * @return {Number}     Angle, in radians, between the two quaternions\r\n   */\r\n  static getAngle(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\r\n    const dotproduct = Quat.dot(a, b);\r\n\r\n    return Math.acos(2 * dotproduct * dotproduct - 1);\r\n  }\r\n\r\n  /**\r\n   * Multiplies two quat's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    const aw = a[3];\r\n    const bx = b[0];\r\n    const by = b[1];\r\n    const bz = b[2];\r\n    const bw = b[3];\r\n\r\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a quaternion by the given angle about the X axis\r\n   * @category Static\r\n   *\r\n   * @param out - quat receiving operation result\r\n   * @param a - quat to rotate\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateX(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\r\n    rad *= 0.5;\r\n\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    const aw = a[3];\r\n    const bx = Math.sin(rad);\r\n    const bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw + aw * bx;\r\n    out[1] = ay * bw + az * bx;\r\n    out[2] = az * bw - ay * bx;\r\n    out[3] = aw * bw - ax * bx;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a quaternion by the given angle about the Y axis\r\n   * @category Static\r\n   *\r\n   * @param out - quat receiving operation result\r\n   * @param a - quat to rotate\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateY(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\r\n    rad *= 0.5;\r\n\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    const aw = a[3];\r\n    const by = Math.sin(rad);\r\n    const bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw - az * by;\r\n    out[1] = ay * bw + aw * by;\r\n    out[2] = az * bw + ax * by;\r\n    out[3] = aw * bw - ay * by;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a quaternion by the given angle about the Z axis\r\n   * @category Static\r\n   *\r\n   * @param out - quat receiving operation result\r\n   * @param a - quat to rotate\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateZ(out: QuatLike, a: Readonly<QuatLike>, rad: number): QuatLike {\r\n    rad *= 0.5;\r\n\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    const az = a[2];\r\n    const aw = a[3];\r\n    const bz = Math.sin(rad);\r\n    const bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw + ay * bz;\r\n    out[1] = ay * bw - ax * bz;\r\n    out[2] = az * bw + aw * bz;\r\n    out[3] = aw * bw - az * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the W component of a quat from the X, Y, and Z components.\r\n   * Assumes that quaternion is 1 unit in length.\r\n   * Any existing W component will be ignored.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quat to calculate W component of\r\n   * @returns `out`\r\n   */\r\n  static calculateW(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\r\n    const x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculate the exponential of a unit quaternion.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quat to calculate the exponential of\r\n   * @returns `out`\r\n   */\r\n  static exp(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\r\n    const x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n\r\n    const r = Math.sqrt(x * x + y * y + z * z);\r\n    const et = Math.exp(w);\r\n    const s = r > 0 ? (et * Math.sin(r)) / r : 0;\r\n\r\n    out[0] = x * s;\r\n    out[1] = y * s;\r\n    out[2] = z * s;\r\n    out[3] = et * Math.cos(r);\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculate the natural logarithm of a unit quaternion.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quat to calculate the exponential of\r\n   * @returns `out`\r\n   */\r\n  static ln(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\r\n    const x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n\r\n    const r = Math.sqrt(x * x + y * y + z * z);\r\n    const t = r > 0 ? Math.atan2(r, w) / r : 0;\r\n\r\n    out[0] = x * t;\r\n    out[1] = y * t;\r\n    out[2] = z * t;\r\n    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculate the scalar power of a unit quaternion.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quat to calculate the exponential of\r\n   * @param b - amount to scale the quaternion by\r\n   * @returns `out`\r\n   */\r\n  static pow(out: QuatLike, a: Readonly<QuatLike>, b: number): QuatLike {\r\n    Quat.ln(out, a);\r\n    Quat.scale(out, out, b);\r\n    Quat.exp(out, out);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a spherical linear interpolation between two quat\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static slerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): QuatLike {\r\n    // benchmarks:\r\n    //    http://jsperf.com/quaternion-slerp-implementations\r\n    const ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n    let bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n    let scale0: number;\r\n    let scale1: number;\r\n\r\n    // calc cosine\r\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n    // adjust signs (if necessary)\r\n    if (cosom < 0.0) {\r\n      cosom = -cosom;\r\n      bx = -bx;\r\n      by = -by;\r\n      bz = -bz;\r\n      bw = -bw;\r\n    }\r\n    // calculate coefficients\r\n    if (1.0 - cosom > GLM_EPSILON) {\r\n      // standard case (slerp)\r\n      const omega = Math.acos(cosom);\r\n      const sinom = Math.sin(omega);\r\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n      scale1 = Math.sin(t * omega) / sinom;\r\n    } else {\r\n      // \"from\" and \"to\" quaternions are very close\r\n      //  ... so we can do a linear interpolation\r\n      scale0 = 1.0 - t;\r\n      scale1 = t;\r\n    }\r\n    // calculate final values\r\n    out[0] = scale0 * ax + scale1 * bx;\r\n    out[1] = scale0 * ay + scale1 * by;\r\n    out[2] = scale0 * az + scale1 * bz;\r\n    out[3] = scale0 * aw + scale1 * bw;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Generates a random unit quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @returns `out`\r\n   */\r\n  /*static random(out: QuatLike): QuatLike {\r\n    // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n    // TODO: Calling random 3 times is probably not the fastest solution\r\n    let u1 = glMatrix.RANDOM();\r\n    let u2 = glMatrix.RANDOM();\r\n    let u3 = glMatrix.RANDOM();\r\n\r\n    let sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n    let sqrtU1 = Math.sqrt(u1);\r\n\r\n    out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n    out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n    out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n    out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n    return out;\r\n  }*/\r\n\r\n  /**\r\n   * Calculates the inverse of a quat\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quat to calculate inverse of\r\n   * @returns `out`\r\n   */\r\n  static invert(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\r\n    const a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n    const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n    const invDot = dot ? 1.0 / dot : 0;\r\n\r\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n    out[0] = -a0 * invDot;\r\n    out[1] = -a1 * invDot;\r\n    out[2] = -a2 * invDot;\r\n    out[3] = a3 * invDot;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the conjugate of a quat\r\n   * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quat to calculate conjugate of\r\n   * @returns `out`\r\n   */\r\n  static conjugate(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a quaternion from the given 3x3 rotation matrix.\r\n   *\r\n   * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n   * to renormalize the quaternion yourself where necessary.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param m - rotation matrix\r\n   * @returns `out`\r\n   */\r\n  static fromMat3(out: QuatLike, m: Readonly<Mat3Like>): QuatLike {\r\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n    // article \"Quaternion Calculus and Fast Animation\".\r\n    const fTrace = m[0] + m[4] + m[8];\r\n    let fRoot: number;\r\n\r\n    if (fTrace > 0.0) {\r\n      // |w| > 1/2, may as well choose w > 1/2\r\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n      out[3] = 0.5 * fRoot;\r\n      fRoot = 0.5 / fRoot; // 1/(4w)\r\n      out[0] = (m[5] - m[7]) * fRoot;\r\n      out[1] = (m[6] - m[2]) * fRoot;\r\n      out[2] = (m[1] - m[3]) * fRoot;\r\n    } else {\r\n      // |w| <= 1/2\r\n      let i = 0;\r\n      if (m[4] > m[0]) i = 1;\r\n      if (m[8] > m[i * 3 + i]) i = 2;\r\n      let j = (i + 1) % 3;\r\n      let k = (i + 2) % 3;\r\n\r\n      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n      out[i] = 0.5 * fRoot;\r\n      fRoot = 0.5 / fRoot;\r\n      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Creates a quaternion from the given euler angle x, y, z.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param x - Angle to rotate around X axis in degrees.\r\n   * @param y - Angle to rotate around Y axis in degrees.\r\n   * @param z - Angle to rotate around Z axis in degrees.\r\n   * @param {'xyz'|'xzy'|'yxz'|'yzx'|'zxy'|'zyx'} order - Intrinsic order for conversion, default is zyx.\r\n   * @returns `out`\r\n   */\r\n  static fromEuler(out: QuatLike, x: number, y: number, z: number, order = Quat.#DEFAULT_ANGLE_ORDER): QuatLike {\r\n    let halfToRad = (0.5 * Math.PI) / 180.0;\r\n    x *= halfToRad;\r\n    y *= halfToRad;\r\n    z *= halfToRad;\r\n\r\n    let sx = Math.sin(x);\r\n    let cx = Math.cos(x);\r\n    let sy = Math.sin(y);\r\n    let cy = Math.cos(y);\r\n    let sz = Math.sin(z);\r\n    let cz = Math.cos(z);\r\n\r\n    switch (order) {\r\n      case 'xyz':\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n        break;\r\n\r\n      case 'xzy':\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n        break;\r\n\r\n      case 'yxz':\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n        break;\r\n\r\n      case 'yzx':\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n        break;\r\n\r\n      case 'zxy':\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n        break;\r\n\r\n      case 'zyx':\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Unknown angle order ' + order);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a quatenion\r\n   * @category Static\r\n   *\r\n   * @param a - vector to represent as a string\r\n   * @returns string representation of the vector\r\n   */\r\n  static str(a: Readonly<QuatLike>): string {\r\n    return `Quat(${a.join(', ')})`;\r\n  }\r\n\r\n  /**\r\n   * Creates a new quat initialized with values from an existing quaternion\r\n   * @category Static\r\n   *\r\n   * @param a - quaternion to clone\r\n   * @returns a new quaternion\r\n   */\r\n  static clone(a: Readonly<QuatLike>): Quat {\r\n    return new Quat(a);\r\n  }\r\n\r\n  /**\r\n   * Creates a new quat initialized with the given values\r\n   * @category Static\r\n   *\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @param z - Z component\r\n   * @param w - W component\r\n   * @returns a new quaternion\r\n   */\r\n  static fromValues(x: number, y: number, z: number, w: number): Quat {\r\n    return new Quat(x, y, z, w);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one quat to another\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - the source quaternion\r\n   * @returns `out`\r\n   */\r\n  static copy(out: QuatLike, a: Readonly<QuatLike>): QuatLike {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Quat} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @param z - Z component\r\n   * @param w - W component\r\n   * @returns `out`\r\n   */\r\n  static set(out: QuatLike, x: number, y: number, z: number, w: number): QuatLike { return out; }\r\n\r\n  /**\r\n   * Adds two {@link Quat}'s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike { return out; }\r\n\r\n  /**\r\n   * Alias for {@link Quat.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>): QuatLike { return out; }\r\n\r\n  /**\r\n   * Scales a quat by a scalar number\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - the vector to scale\r\n   * @param b - amount to scale the vector by\r\n   * @returns `out`\r\n   */\r\n  static scale(out: QuatLike, a: Readonly<QuatLike>, scale: number): QuatLike {\r\n    out[0] = a[0] * scale;\r\n    out[1] = a[1] * scale;\r\n    out[2] = a[2] * scale;\r\n    out[3] = a[3] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of two quat's\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns dot product of a and b\r\n   */\r\n  static dot(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n  }\r\n\r\n  /**\r\n   * Performs a linear interpolation between two quat's\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n   static lerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): QuatLike { return out }\r\n\r\n  /**\r\n   * Calculates the magnitude (length) of a {@link Quat}\r\n   * @category Static\r\n   *\r\n   * @param a - quaternion to calculate length of\r\n   * @returns length of `a`\r\n   */\r\n   static magnitude(a: Readonly<QuatLike>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat.magnitude}\r\n   * @category Static\r\n   */\r\n  static mag(a: Readonly<QuatLike>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Quat.magnitude} to avoid conflicts with builtin `length` methods/attribs\r\n   */\r\n  // @ts-ignore: Length conflicts with Function.length\r\n  static length(a: Readonly<QuatLike>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Quat.mag}\r\n   */\r\n  static len(a: Readonly<QuatLike>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared length of a {@link Quat}\r\n   * @category Static\r\n   *\r\n   * @param a - quaternion to calculate squared length of\r\n   * @returns squared length of a\r\n   */\r\n  static squaredLength(a: Readonly<QuatLike>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat.squaredLength}\r\n   * @category Static\r\n   */\r\n  static sqrLen(a: Readonly<QuatLike>): number { return 0; }\r\n\r\n  /**\r\n   * Normalize a {@link Quat}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - quaternion to normalize\r\n   * @returns `out`\r\n   */\r\n  static normalize(out: QuatLike, a: Readonly<QuatLike>): QuatLike { return out; }\r\n\r\n  /**\r\n   * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first quaternion.\r\n   * @param b - The second quaternion.\r\n   * @returns True if the vectors are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\r\n\r\n  /**\r\n   * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns True if the vectors are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\r\n\r\n  /**\r\n   * Sets a quaternion to represent the shortest rotation from one\r\n   * vector to another.\r\n   *\r\n   * Both vectors are assumed to be unit length.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion.\r\n   * @param a - the initial vector\r\n   * @param b - the destination vector\r\n   * @returns `out`\r\n   */\r\n  static rotationTo(out: QuatLike, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): QuatLike {\r\n    let dot = Vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      Vec3.cross(Quat.#TMP_VEC3, Quat.#X_UNIT_VEC3, a);\r\n      if (Vec3.mag(Quat.#TMP_VEC3) < 0.000001) Vec3.cross(Quat.#TMP_VEC3, Quat.#Y_UNIT_VEC3, a);\r\n      Vec3.normalize(Quat.#TMP_VEC3, Quat.#TMP_VEC3);\r\n      Quat.setAxisAngle(out, Quat.#TMP_VEC3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      Vec3.cross(Quat.#TMP_VEC3, a, b);\r\n      out[0] = Quat.#TMP_VEC3[0];\r\n      out[1] = Quat.#TMP_VEC3[1];\r\n      out[2] = Quat.#TMP_VEC3[2];\r\n      out[3] = 1 + dot;\r\n      return Quat.normalize(out, out);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a spherical linear interpolation with two control points\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param c - the third operand\r\n   * @param d - the fourth operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static sqlerp(out: QuatLike, a: Readonly<QuatLike>, b: Readonly<QuatLike>, c: Readonly<QuatLike>, d: Readonly<QuatLike>, t: number): QuatLike {\r\n    Quat.slerp(Quat.#TMP_QUAT1, a, d, t);\r\n    Quat.slerp(Quat.#TMP_QUAT2, b, c, t);\r\n    Quat.slerp(out, Quat.#TMP_QUAT1, Quat.#TMP_QUAT2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets the specified quaternion with values corresponding to the given\r\n   * axes. Each axis is a vec3 and is expected to be unit length and\r\n   * perpendicular to all other specified axes.\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving quaternion\r\n   * @param view - the vector representing the viewing direction\r\n   * @param right - the vector representing the local `right` direction\r\n   * @param up - the vector representing the local `up` direction\r\n   * @returns `out`\r\n   */\r\n  static setAxes(out: QuatLike, view: Readonly<Vec3Like>, right: Readonly<Vec3Like>, up: Readonly<Vec3Like>): QuatLike {\r\n    Quat.#TMP_MAT3[0] = right[0];\r\n    Quat.#TMP_MAT3[3] = right[1];\r\n    Quat.#TMP_MAT3[6] = right[2];\r\n\r\n    Quat.#TMP_MAT3[1] = up[0];\r\n    Quat.#TMP_MAT3[4] = up[1];\r\n    Quat.#TMP_MAT3[7] = up[2];\r\n\r\n    Quat.#TMP_MAT3[2] = -view[0];\r\n    Quat.#TMP_MAT3[5] = -view[1];\r\n    Quat.#TMP_MAT3[8] = -view[2];\r\n\r\n    return Quat.normalize(out, Quat.fromMat3(out, Quat.#TMP_MAT3));\r\n  }\r\n}\r\n\r\n// Methods which re-use the Vec4 implementation\r\nQuat.set = Vec4.set;\r\nQuat.add = Vec4.add;\r\nQuat.lerp = Vec4.lerp;\r\nQuat.normalize = Vec4.normalize;\r\nQuat.squaredLength = Vec4.squaredLength;\r\nQuat.sqrLen = Vec4.squaredLength;\r\nQuat.exactEquals = Vec4.exactEquals;\r\nQuat.equals = Vec4.equals;\r\nQuat.magnitude = Vec4.magnitude;\r\n\r\n// Instance method alias assignments\r\nQuat.prototype.mul = Quat.prototype.multiply;\r\n\r\n// Static method alias assignments\r\nQuat.mul = Quat.multiply;\r\nQuat.mag = Quat.magnitude;\r\nQuat.length = Quat.magnitude;\r\nQuat.len = Quat.magnitude;\r\n", "import { Mat4 } from './Mat4.js';\r\nimport { Quat } from './Quat.js';\r\nimport { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat4Like, QuatLike, Quat2Like, Vec3Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * Dual Quaternion\r\n */\r\nexport class Quat2 extends Float32Array {\r\n  // Temporary variables to prevent repeated allocations in the algorithms within Quat2.\r\n  // These are declared as TypedArrays to aid in tree-shaking.\r\n\r\n  static #TMP_QUAT = new Float32Array(4);\r\n  static #TMP_VEC3 = new Float32Array(3);\r\n\r\n  /**\r\n   * Create a {@link Quat2}.\r\n   */\r\n   constructor(...values: [Readonly<Quat2Like> | ArrayBufferLike, number?] | number[]) {\r\n    switch(values.length) {\r\n      case 8:\r\n        super(values); break;\r\n      case 2:\r\n        super(values[0] as ArrayBufferLike, values[1], 8); break;\r\n      case 1: {\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, v, v, v, v, v, v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 8);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        super(8);\r\n        this[3] = 1;\r\n        break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Quat2.str(this);`\r\n   */\r\n  get str(): string {\r\n    return Quat2.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Quat2} into `this`.\r\n   *\r\n   * @param a the source dual quaternion\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Quat2Like>): Quat2 {\r\n    super.set(a);\r\n    return this;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Quat2}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 8 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new identity {@link Quat2}\r\n   * @category Static\r\n   *\r\n   * @returns a new dual quaternion [real -> rotation, dual -> translation]\r\n   */\r\n  static create(): Quat2 {\r\n    return new Quat2();\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Quat2} quat initialized with values from an existing quaternion\r\n   * @category Static\r\n   *\r\n   * @param a - dual quaternion to clone\r\n   * @returns a new dual quaternion\r\n   */\r\n  static clone(a: Quat2Like): Quat2 {\r\n    return new Quat2(a);\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Quat2}  initialized with the given values\r\n   * @category Static\r\n   *\r\n   * @param x1 - 1st X component\r\n   * @param y1 - 1st Y component\r\n   * @param z1 - 1st Z component\r\n   * @param w1 - 1st W component\r\n   * @param x2 - 2nd X component\r\n   * @param y2 - 2nd Y component\r\n   * @param z2 - 2nd Z component\r\n   * @param w2 - 2nd W component\r\n   * @returns a new dual quaternion\r\n   */\r\n  static fromValues(x1: number, y1: number, z1: number, w1: number,\r\n                    x2: number, y2: number, z2: number, w2: number): Quat2 {\r\n    return new Quat2(x1, y1, z1, w1, x2, y2, z2, w2);\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Quat2} from the given values (quat and translation)\r\n   * @category Static\r\n   *\r\n   * @param x1 - X component (rotation)\r\n   * @param y1 - Y component (rotation)\r\n   * @param z1 - Z component (rotation)\r\n   * @param w1 - W component (rotation)\r\n   * @param x2 - X component (translation)\r\n   * @param y2 - Y component (translation)\r\n   * @param z2 - Z component (translation)\r\n   * @returns a new dual quaternion\r\n   */\r\n  static fromRotationTranslationValues(x1: number, y1: number, z1: number, w1: number,\r\n                                       x2: number, y2: number, z2: number): Quat2 {\r\n    const ax = x2 * 0.5;\r\n    const ay = y2 * 0.5;\r\n    const az = z2 * 0.5;\r\n\r\n    return new Quat2(x1, y1, z1, w1,\r\n      ax * w1 + ay * z1 - az * y1,\r\n      ay * w1 + az * x1 - ax * z1,\r\n      az * w1 + ax * y1 - ay * x1,\r\n     -ax * x1 - ay * y1 - az * z1);\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link Quat2} from a quaternion and a translation\r\n   * @category Static\r\n   *\r\n   * @param out - dual quaternion receiving operation result\r\n   * @param q - a normalized quaternion\r\n   * @param t - translation vector\r\n   * @returns `out`\r\n   */\r\n  static fromRotationTranslation(out: Quat2Like, q: Readonly<QuatLike>, t: Readonly<Vec3Like>): Quat2Like {\r\n    const ax = t[0] * 0.5;\r\n    const ay = t[1] * 0.5;\r\n    const az = t[2] * 0.5;\r\n    const bx = q[0];\r\n    const by = q[1];\r\n    const bz = q[2];\r\n    const bw = q[3];\r\n    out[0] = bx;\r\n    out[1] = by;\r\n    out[2] = bz;\r\n    out[3] = bw;\r\n    out[4] = ax * bw + ay * bz - az * by;\r\n    out[5] = ay * bw + az * bx - ax * bz;\r\n    out[6] = az * bw + ax * by - ay * bx;\r\n    out[7] = -ax * bx - ay * by - az * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link Quat2} from a translation\r\n   * @category Static\r\n   *\r\n   * @param out - dual quaternion receiving operation result\r\n   * @param t - translation vector\r\n   * @returns `out`\r\n   */\r\n  static fromTranslation(out: Quat2Like, t: Readonly<Vec3Like>): Quat2Like {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    out[4] = t[0] * 0.5;\r\n    out[5] = t[1] * 0.5;\r\n    out[6] = t[2] * 0.5;\r\n    out[7] = 0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link Quat2} from a quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - dual quaternion receiving operation result\r\n   * @param q - a normalized quaternion\r\n   * @returns `out`\r\n   */\r\n  static fromRotation(out: Quat2Like, q: Readonly<QuatLike>): Quat2Like {\r\n    out[0] = q[0];\r\n    out[1] = q[1];\r\n    out[2] = q[2];\r\n    out[3] = q[3];\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link Quat2} from a quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - dual quaternion receiving operation result\r\n   * @param a - the matrix\r\n   * @returns `out`\r\n   */\r\n  static fromMat4(out: Quat2Like, a: Readonly<Mat4Like>): Quat2Like {\r\n    Mat4.getRotation(Quat2.#TMP_QUAT, a);\r\n    Mat4.getTranslation(Quat2.#TMP_VEC3, a);\r\n    return Quat2.fromRotationTranslation(out, Quat2.#TMP_QUAT, Quat2.#TMP_VEC3);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Quat2} to another\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the source dual quaternion\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Quat2} to the identity dual quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @returns `out`\r\n   */\r\n  static identity(out: QuatLike): QuatLike {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Quat2} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param x1 - 1st X component\r\n   * @param y1 - 1st Y component\r\n   * @param z1 - 1st Z component\r\n   * @param w1 - 1st W component\r\n   * @param x2 - 2nd X component\r\n   * @param y2 - 2nd Y component\r\n   * @param z2 - 2nd Z component\r\n   * @param w2 - 2nd W component\r\n   * @returns `out`\r\n   */\r\n  static set(out: Quat2Like, x1: number, y1: number, z1: number, w1: number,\r\n                             x2: number, y2: number, z2: number, w2: number): Quat2Like {\r\n    out[0] = x1;\r\n    out[1] = y1;\r\n    out[2] = z1;\r\n    out[3] = w1;\r\n    out[4] = x2;\r\n    out[5] = y2;\r\n    out[6] = z2;\r\n    out[7] = w2;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Gets the real part of a dual quat\r\n   * @category Static\r\n   *\r\n   * @param out - real part\r\n   * @param a - Dual Quaternion\r\n   * @return `out`\r\n   */\r\n  static getReal(out: QuatLike, a: Readonly<Quat2Like>): QuatLike {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n  };\r\n\r\n  /**\r\n   * Gets the dual part of a dual quat\r\n   * @category Static\r\n   *\r\n   * @param out - dual part\r\n   * @param a - Dual Quaternion\r\n   * @return `out`\r\n   */\r\n  static getDual(out: QuatLike, a: Readonly<Quat2Like>): QuatLike {\r\n    out[0] = a[4];\r\n    out[1] = a[5];\r\n    out[2] = a[6];\r\n    out[3] = a[7];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the real component of a {@link Quat2} to the given quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - a quaternion representing the real part\r\n   * @return `out`\r\n   */\r\n  static setReal(out: Quat2Like, a: Readonly<QuatLike>): Quat2Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n  };\r\n\r\n  /**\r\n   * Set the dual component of a {@link Quat2} to the given quaternion\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - a quaternion representing the dual part\r\n   * @return `out`\r\n   */\r\n  static setDual(out: Quat2Like, a: Readonly<QuatLike>): Quat2Like {\r\n    out[4] = a[0];\r\n    out[5] = a[1];\r\n    out[6] = a[2];\r\n    out[7] = a[3];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Gets the translation of a normalized {@link Quat2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving translation vector\r\n   * @param a - Dual Quaternion to be decomposed\r\n   * @return `out`\r\n   */\r\n  static getTranslation(out: Vec3Like, a: Readonly<Quat2Like>): Vec3Like {\r\n    const ax = a[4];\r\n    const ay = a[5];\r\n    const az = a[6];\r\n    const aw = a[7];\r\n    const bx = -a[0];\r\n    const by = -a[1];\r\n    const bz = -a[2];\r\n    const bw = a[3];\r\n    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Translates a {@link Quat2} by the given vector\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the dual quaternion to translate\r\n   * @param v - vector to translate by\r\n   * @returns `out`\r\n   */\r\n  static translate(out: Quat2Like, a: Readonly<Quat2Like>, v: Readonly<Vec3Like>): Quat2Like {\r\n    const ax1 = a[0];\r\n    const ay1 = a[1];\r\n    const az1 = a[2];\r\n    const aw1 = a[3];\r\n    const bx1 = v[0] * 0.5;\r\n    const by1 = v[1] * 0.5;\r\n    const bz1 = v[2] * 0.5;\r\n    const ax2 = a[4];\r\n    const ay2 = a[5];\r\n    const az2 = a[6];\r\n    const aw2 = a[7];\r\n    out[0] = ax1;\r\n    out[1] = ay1;\r\n    out[2] = az1;\r\n    out[3] = aw1;\r\n    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Quat2} around the X axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the dual quaternion to rotate\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateX(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\r\n    let bx = -a[0];\r\n    let by = -a[1];\r\n    let bz = -a[2];\r\n    let bw = a[3];\r\n    const ax = a[4];\r\n    const ay = a[5];\r\n    const az = a[6];\r\n    const aw = a[7];\r\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\r\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\r\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\r\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n    Quat.rotateX(out as QuatLike, a as QuatLike, rad);\r\n    bx = out[0];\r\n    by = out[1];\r\n    bz = out[2];\r\n    bw = out[3];\r\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Quat2} around the Y axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the dual quaternion to rotate\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateY(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\r\n    let bx = -a[0];\r\n    let by = -a[1];\r\n    let bz = -a[2];\r\n    let bw = a[3];\r\n    const ax = a[4];\r\n    const ay = a[5];\r\n    const az = a[6];\r\n    const aw = a[7];\r\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\r\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\r\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\r\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n    Quat.rotateY(out as QuatLike, a as QuatLike, rad);\r\n    bx = out[0];\r\n    by = out[1];\r\n    bz = out[2];\r\n    bw = out[3];\r\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Quat2} around the Z axis\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the dual quaternion to rotate\r\n   * @param rad - angle (in radians) to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateZ(out: Quat2Like, a: Readonly<Quat2Like>, rad: number): Quat2Like {\r\n    let bx = -a[0];\r\n    let by = -a[1];\r\n    let bz = -a[2];\r\n    let bw = a[3];\r\n    const ax = a[4];\r\n    const ay = a[5];\r\n    const az = a[6];\r\n    const aw = a[7];\r\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\r\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\r\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\r\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n    Quat.rotateZ(out as QuatLike, a as QuatLike, rad);\r\n    bx = out[0];\r\n    by = out[1];\r\n    bz = out[2];\r\n    bw = out[3];\r\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Quat2} by a given quaternion (a * q)\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the dual quaternion to rotate\r\n   * @param q - quaternion to rotate by\r\n   * @returns `out`\r\n   */\r\n  static rotateByQuatAppend(out: Quat2Like, a: Readonly<Quat2Like>, q: Readonly<QuatLike>): Quat2Like {\r\n    const qx = q[0];\r\n    const qy = q[1];\r\n    const qz = q[2];\r\n    const qw = q[3];\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    let aw = a[3];\r\n\r\n    out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n    out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n    out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n    out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n    ax = a[4];\r\n    ay = a[5];\r\n    az = a[6];\r\n    aw = a[7];\r\n    out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n    out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n    out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n    out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Quat2} by a given quaternion (q * a)\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param q - quaternion to rotate by\r\n   * @param a - the dual quaternion to rotate\r\n   * @returns `out`\r\n   */\r\n  static rotateByQuatPrepend(out: Quat2Like, q: Readonly<QuatLike>, a: Readonly<Quat2Like>): Quat2Like {\r\n    const qx = q[0];\r\n    const qy = q[1];\r\n    const qz = q[2];\r\n    const qw = q[3];\r\n    let bx = a[0];\r\n    let by = a[1];\r\n    let bz = a[2];\r\n    let bw = a[3];\r\n\r\n    out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n    out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n    out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n    out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n    bx = a[4];\r\n    by = a[5];\r\n    bz = a[6];\r\n    bw = a[7];\r\n    out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n    out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n    out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n    out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotates a {@link Quat2} around a given axis. Does the normalization automatically\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the dual quaternion to rotate\r\n   * @param axis - the axis to rotate around\r\n   * @param rad - how far the rotation should be\r\n   * @returns `out`\r\n   */\r\n  static rotateAroundAxis(out: Quat2Like, a: Readonly<Quat2Like>, axis: Readonly<Vec3Like>, rad: number): Quat2Like {\r\n    //Special case for rad = 0\r\n    if (Math.abs(rad) < GLM_EPSILON) {\r\n      return Quat2.copy(out, a);\r\n    }\r\n    const axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\r\n\r\n    rad = rad * 0.5;\r\n    const s = Math.sin(rad);\r\n    const bx = (s * axis[0]) / axisLength;\r\n    const by = (s * axis[1]) / axisLength;\r\n    const bz = (s * axis[2]) / axisLength;\r\n    const bw = Math.cos(rad);\r\n\r\n    const ax1 = a[0];\r\n    const ay1 = a[1];\r\n    const az1 = a[2];\r\n    const aw1 = a[3];\r\n    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n\r\n    const ax = a[4];\r\n    const ay = a[5];\r\n    const az = a[6];\r\n    const aw = a[7];\r\n    out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n    out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n    out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n    out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Quat2}s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Multiplies two {@link Quat2}s\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns {quat2} out\r\n   */\r\n  static multiply(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like {\r\n    const ax0 = a[0];\r\n    const ay0 = a[1];\r\n    const az0 = a[2];\r\n    const aw0 = a[3];\r\n    const bx1 = b[4];\r\n    const by1 = b[5];\r\n    const bz1 = b[6];\r\n    const bw1 = b[7];\r\n    const ax1 = a[4];\r\n    const ay1 = a[5];\r\n    const az1 = a[6];\r\n    const aw1 = a[7];\r\n    const bx0 = b[0];\r\n    const by0 = b[1];\r\n    const bz0 = b[2];\r\n    const bw0 = b[3];\r\n    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n    out[4] =\r\n      ax0 * bw1 +\r\n      aw0 * bx1 +\r\n      ay0 * bz1 -\r\n      az0 * by1 +\r\n      ax1 * bw0 +\r\n      aw1 * bx0 +\r\n      ay1 * bz0 -\r\n      az1 * by0;\r\n    out[5] =\r\n      ay0 * bw1 +\r\n      aw0 * by1 +\r\n      az0 * bx1 -\r\n      ax0 * bz1 +\r\n      ay1 * bw0 +\r\n      aw1 * by0 +\r\n      az1 * bx0 -\r\n      ax1 * bz0;\r\n    out[6] =\r\n      az0 * bw1 +\r\n      aw0 * bz1 +\r\n      ax0 * by1 -\r\n      ay0 * bx1 +\r\n      az1 * bw0 +\r\n      aw1 * bz0 +\r\n      ax1 * by0 -\r\n      ay1 * bx0;\r\n    out[7] =\r\n      aw0 * bw1 -\r\n      ax0 * bx1 -\r\n      ay0 * by1 -\r\n      az0 * bz1 +\r\n      aw1 * bw0 -\r\n      ax1 * bx0 -\r\n      ay1 * by0 -\r\n      az1 * bz0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Quat2.multiply}\r\n   * @category Static\r\n   */\r\n  static mul(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): Quat2Like { return out; }\r\n\r\n  /**\r\n   * Scales a {@link Quat2} by a scalar value\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaterion\r\n   * @param a - the dual quaternion to scale\r\n   * @param b - scalar value to scale the dual quaterion by\r\n   * @returns `out`\r\n   */\r\n  static scale(out: Quat2Like, a: Readonly<Quat2Like>, b: number): Quat2Like {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of two {@link Quat2}s (The dot product of the real parts)\r\n   * @category Static\r\n   *\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @returns dot product of a and b\r\n   */\r\n  static dot(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Performs a linear interpolation between two {@link Quat2}s\r\n   * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when `t = 0.5`)\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quat\r\n   * @param a - the first operand\r\n   * @param b - the second operand\r\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static lerp(out: Quat2Like, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>, t: number): Quat2Like {\r\n    const mt = 1 - t;\r\n    if (Quat2.dot(a, b) < 0) t = -t;\r\n\r\n    out[0] = a[0] * mt + b[0] * t;\r\n    out[1] = a[1] * mt + b[1] * t;\r\n    out[2] = a[2] * mt + b[2] * t;\r\n    out[3] = a[3] * mt + b[3] * t;\r\n    out[4] = a[4] * mt + b[4] * t;\r\n    out[5] = a[5] * mt + b[5] * t;\r\n    out[6] = a[6] * mt + b[6] * t;\r\n    out[7] = a[7] * mt + b[7] * t;\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the inverse of a {@link Quat2}. If they are normalized, conjugate is cheaper\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - dual quat to calculate inverse of\r\n   * @returns `out`\r\n   */\r\n  static invert(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\r\n    const sqlen = Quat2.squaredLength(a);\r\n    out[0] = -a[0] / sqlen;\r\n    out[1] = -a[1] / sqlen;\r\n    out[2] = -a[2] / sqlen;\r\n    out[3] = a[3] / sqlen;\r\n    out[4] = -a[4] / sqlen;\r\n    out[5] = -a[5] / sqlen;\r\n    out[6] = -a[6] / sqlen;\r\n    out[7] = a[7] / sqlen;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the conjugate of a {@link Quat2}\r\n   * If the dual quaternion is normalized, this function is faster than {@link Quat2.invert} and produces the same result.\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - dual quaternion to calculate conjugate of\r\n   * @returns `out`\r\n   */\r\n  static conjugate(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a[3];\r\n    out[4] = -a[4];\r\n    out[5] = -a[5];\r\n    out[6] = -a[6];\r\n    out[7] = a[7];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the magnitude (length) of a {@link Quat2}\r\n   * @category Static\r\n   *\r\n   * @param a - dual quaternion to calculate length of\r\n   * @returns length of `a`\r\n   */\r\n  static magnitude(a: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat2.magnitude}\r\n   * @category Static\r\n   */\r\n  static mag(a: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat2.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Quat2.magnitude} to avoid conflicts with builtin `length` methods/attribs\r\n   */\r\n  // @ts-ignore: Length conflicts with Function.length\r\n  static length(a: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat2.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Quat2.mag}\r\n   */\r\n  static len(a: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared length of a {@link Quat2}\r\n   * @category Static\r\n   *\r\n   * @param a - dual quaternion to calculate squared length of\r\n   * @returns squared length of a\r\n   */\r\n  static squaredLength(a: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Alias for {@link Quat2.squaredLength}\r\n   * @category Static\r\n   */\r\n  static sqrLen(a: Readonly<Quat2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Normalize a {@link Quat2}\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving dual quaternion\r\n   * @param a - dual quaternion to normalize\r\n   * @returns `out`\r\n   */\r\n  static normalize(out: Quat2Like, a: Readonly<Quat2Like>): Quat2Like {\r\n    let magnitude = Quat2.squaredLength(a);\r\n    if (magnitude > 0) {\r\n      magnitude = Math.sqrt(magnitude);\r\n\r\n      const a0 = a[0] / magnitude;\r\n      const a1 = a[1] / magnitude;\r\n      const a2 = a[2] / magnitude;\r\n      const a3 = a[3] / magnitude;\r\n\r\n      const b0 = a[4];\r\n      const b1 = a[5];\r\n      const b2 = a[6];\r\n      const b3 = a[7];\r\n\r\n      const a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n\r\n      out[0] = a0;\r\n      out[1] = a1;\r\n      out[2] = a2;\r\n      out[3] = a3;\r\n\r\n      out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n      out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n      out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n      out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a {@link Quat2}\r\n   * @category Static\r\n   *\r\n   * @param a - dual quaternion to represent as a string\r\n   * @returns string representation of the vector\r\n   */\r\n  static str(a: Readonly<Quat2Like>): string {\r\n    return `Quat2(${a.join(', ')})`;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the {@link Quat2}s have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first dual quaternion.\r\n   * @param b - The second dual quaternion.\r\n   * @returns True if the dual quaternions are equal, false otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\r\n    return (\r\n      a[0] === b[0] &&\r\n      a[1] === b[1] &&\r\n      a[2] === b[2] &&\r\n      a[3] === b[3] &&\r\n      a[4] === b[4] &&\r\n      a[5] === b[5] &&\r\n      a[6] === b[6] &&\r\n      a[7] === b[7]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the {@link Quat2}s have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first dual quaternion.\r\n   * @param b - The second dual quaternion.\r\n   * @returns True if the dual quaternions are equal, false otherwise.\r\n   */\r\n  static equals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const a2 = a[2];\r\n    const a3 = a[3];\r\n    const a4 = a[4];\r\n    const a5 = a[5];\r\n    const a6 = a[6];\r\n    const a7 = a[7];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    const b2 = b[2];\r\n    const b3 = b[3];\r\n    const b4 = b[4];\r\n    const b5 = b[5];\r\n    const b6 = b[6];\r\n    const b7 = b[7];\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\r\n    );\r\n  }\r\n}\r\n\r\n// Methods which re-use the Quat implementation\r\n// @ts-ignore\r\nQuat2.dot = Quat.dot;\r\n// @ts-ignore\r\nQuat2.squaredLength = Quat.squaredLength;\r\n// @ts-ignore\r\nQuat2.sqrLen = Quat.squaredLength;\r\n// @ts-ignore\r\nQuat2.mag = Quat.magnitude;\r\n// @ts-ignore\r\nQuat2.length = Quat.magnitude;\r\n// @ts-ignore\r\nQuat2.len = Quat.magnitude;\r\n\r\n// Static method alias assignments\r\nQuat2.mul = Quat2.multiply;\r\n", "import { GLM_EPSILON } from '#gl-matrix/common';\r\n\r\nimport type { Mat2Like, Mat2dLike, Mat3Like, Mat4Like, Vec2Like } from '#gl-matrix/types';\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n */\r\nexport class Vec2 extends Float32Array {\r\n  /**\r\n   * Create a {@link Vec2}.\r\n   */\r\n   constructor(...values: [Readonly<Vec2Like> | ArrayBufferLike, number?] | number[]) {\r\n    switch(values.length) {\r\n      case 2:{\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, values[1]]);\r\n        } else {\r\n          super(v as ArrayBufferLike, values[1], 2);\r\n        }\r\n        break;\r\n      }\r\n      case 1: {\r\n        const v = values[0];\r\n        if (typeof v === 'number') {\r\n          super([v, v]);\r\n        } else {\r\n          super(v as ArrayBufferLike, 0, 2);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        super(2); break;\r\n    }\r\n  }\r\n\r\n  //============\r\n  // Attributes\r\n  //============\r\n\r\n  // Getters and setters to make component access read better.\r\n  // These are likely to be a little bit slower than direct array access.\r\n\r\n  /**\r\n   * The x component of the vector. Equivalent to `this[0];`\r\n   * @category Vector components\r\n   */\r\n  get x(): number { return this[0]; }\r\n  set x(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The y component of the vector. Equivalent to `this[1];`\r\n   * @category Vector components\r\n   */\r\n  get y(): number { return this[1]; }\r\n  set y(value: number) { this[1] = value; }\r\n\r\n  // Alternate set of getters and setters in case this is being used to define\r\n  // a color.\r\n\r\n  /**\r\n   * The r component of the vector. Equivalent to `this[0];`\r\n   * @category Color components\r\n   */\r\n  get r(): number { return this[0]; }\r\n  set r(value: number) { this[0] = value; }\r\n\r\n  /**\r\n   * The g component of the vector. Equivalent to `this[1];`\r\n   * @category Color components\r\n   */\r\n  get g(): number { return this[1]; }\r\n  set g(value: number) { this[1] = value; }\r\n\r\n  /**\r\n   * The magnitude (length) of this.\r\n   * Equivalent to `Vec2.magnitude(this);`\r\n   *\r\n   * Magnitude is used because the `length` attribute is already defined by\r\n   * TypedArrays to mean the number of elements in the array.\r\n   */\r\n  get magnitude(): number {\r\n    return Math.hypot(this[0], this[1]);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   */\r\n  get mag(): number { return this.magnitude; }\r\n\r\n  /**\r\n   * The squared magnitude (length) of `this`.\r\n   * Equivalent to `Vec2.squaredMagnitude(this);`\r\n   */\r\n  get squaredMagnitude(): number {\r\n    const x = this[0];\r\n    const y = this[1];\r\n    return x * x + y * y;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.squaredMagnitude}\r\n   */\r\n  get sqrMag(): number { return this.squaredMagnitude; }\r\n\r\n  /**\r\n   * A string representation of `this`\r\n   * Equivalent to `Vec2.str(this);`\r\n   */\r\n  get str(): string {\r\n    return Vec2.str(this);\r\n  }\r\n\r\n  //===================\r\n  // Instances methods\r\n  //===================\r\n\r\n  /**\r\n   * Copy the values from another {@link Vec2} into `this`.\r\n   *\r\n   * @param a the source vector\r\n   * @returns `this`\r\n   */\r\n  copy(a: Readonly<Vec2Like>): Vec2 {\r\n    this.set(a);\r\n    return this;\r\n  }\r\n\r\n  // Instead of zero(), use a.fill(0) for instances;\r\n\r\n  /**\r\n   * Adds a {@link Vec2} to `this`.\r\n   * Equivalent to `Vec2.add(this, this, b);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @returns `this`\r\n   */\r\n  add(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] += b[0];\r\n    this[1] += b[1];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtracts a {@link Vec2} from `this`.\r\n   * Equivalent to `Vec2.subtract(this, this, b);`\r\n   *\r\n   * @param b - The vector to subtract from `this`\r\n   * @returns `this`\r\n   */\r\n  subtract(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] -= b[0];\r\n    this[1] -= b[1];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.subtract}\r\n   */\r\n  sub(b: Readonly<Vec2Like>): Vec2 { return this; }\r\n\r\n  /**\r\n   * Multiplies `this` by a {@link Vec2}.\r\n   * Equivalent to `Vec2.multiply(this, this, b);`\r\n   *\r\n   * @param b - The vector to multiply `this` by\r\n   * @returns `this`\r\n   */\r\n  multiply(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] *= b[0];\r\n    this[1] *= b[1];\r\n    return this;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.multiply}\r\n   */\r\n  mul(b: Readonly<Vec2Like>): Vec2 { return this; }\r\n\r\n  /**\r\n   * Divides `this` by a {@link Vec2}.\r\n   * Equivalent to `Vec2.divide(this, this, b);`\r\n   *\r\n   * @param b - The vector to divide `this` by\r\n   * @returns {Vec2} `this`\r\n   */\r\n  divide(b: Readonly<Vec2Like>): Vec2 {\r\n    this[0] /= b[0];\r\n    this[1] /= b[1];\r\n    return this;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.divide}\r\n   */\r\n  div(b: Readonly<Vec2Like>): Vec2 { return this; }\r\n\r\n  /**\r\n   * Scales `this` by a scalar number.\r\n   * Equivalent to `Vec2.scale(this, this, b);`\r\n   *\r\n   * @param b - Amount to scale `this` by\r\n   * @returns `this`\r\n   */\r\n  scale(b: number): Vec2 {\r\n    this[0] *= b;\r\n    this[1] *= b;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\r\n   * Equivalent to `Vec2.scaleAndAdd(this, this, b, scale);`\r\n   *\r\n   * @param b - The vector to add to `this`\r\n   * @param scale - The amount to scale `b` by before adding\r\n   * @returns `this`\r\n   */\r\n  scaleAndAdd(b: Readonly<Vec2Like>, scale: number): Vec2 {\r\n    this[0] += b[0] * scale;\r\n    this[1] += b[1] * scale;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between another {@link Vec2} and `this`.\r\n   * Equivalent to `Vec2.distance(this, b);`\r\n   *\r\n   * @param b - The vector to calculate the distance to\r\n   * @returns Distance between `this` and `b`\r\n   */\r\n  distance(b: Readonly<Vec2Like>): number {\r\n    return Vec2.distance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.distance}\r\n   */\r\n  dist(b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between another {@link Vec2} and `this`.\r\n   * Equivalent to `Vec2.squaredDistance(this, b);`\r\n   *\r\n   * @param b The vector to calculate the squared distance to\r\n   * @returns Squared distance between `this` and `b`\r\n   */\r\n  squaredDistance(b: Readonly<Vec2Like>): number {\r\n    return Vec2.squaredDistance(this, b);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.squaredDistance}\r\n   */\r\n  sqrDist(b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of `this`.\r\n   * Equivalent to `Vec2.negate(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  negate(): Vec2 {\r\n    this[0] *= -1;\r\n    this[1] *= -1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inverts the components of `this`.\r\n   * Equivalent to `Vec2.inverse(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  invert(): Vec2 {\r\n    this[0] = 1.0 / this[0];\r\n    this[1] = 1.0 / this[1];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets each component of `this` to it's absolute value.\r\n   * Equivalent to `Vec2.abs(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n  abs(): Vec2 {\r\n    this[0] = Math.abs(this[0]);\r\n    this[1] = Math.abs(this[1]);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of this and another {@link Vec2}.\r\n   * Equivalent to `Vec2.dot(this, b);`\r\n   *\r\n   * @param b - The second operand\r\n   * @returns Dot product of `this` and `b`\r\n   */\r\n  dot(b: Readonly<Vec2Like>): number {\r\n    return this[0] * b[0] + this[1] * b[1];\r\n  }\r\n\r\n  /**\r\n   * Normalize `this`.\r\n   * Equivalent to `Vec2.normalize(this, this);`\r\n   *\r\n   * @returns `this`\r\n   */\r\n   normalize(): Vec2 {\r\n    return Vec2.normalize(this, this) as Vec2;\r\n  }\r\n\r\n  //===================\r\n  // Static accessors\r\n  //===================\r\n\r\n  /**\r\n   * @returns The number of bytes in a {@link Vec2}.\r\n   */\r\n  static get BYTE_LENGTH(): number {\r\n    return 2 * Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //===================\r\n  // Static methods\r\n  //===================\r\n\r\n  /**\r\n   * Creates a new, empty {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @returns A new 2D vector\r\n   */\r\n  static create(): Vec2 {\r\n    return new Vec2();\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Vec2} initialized with values from an existing vector\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to clone\r\n   * @returns A new 2D vector\r\n   */\r\n  static clone(a: Readonly<Vec2Like>): Vec2 {\r\n    return new Vec2(a);\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link Vec2} initialized with the given values\r\n   * @category Static\r\n   *\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @returns A new 2D vector\r\n   */\r\n   static fromValues(x: number, y: number): Vec2 {\r\n    return new Vec2(x, y);\r\n  }\r\n\r\n  /**\r\n   * Copy the values from one {@link Vec2} to another\r\n   * @category Static\r\n   *\r\n   * @param out - the receiving vector\r\n   * @param a - The source vector\r\n   * @returns `out`\r\n   */\r\n  static copy(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Vec2} to the given values\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param x - X component\r\n   * @param y - Y component\r\n   * @returns `out`\r\n   */\r\n  static set(out: Vec2Like, x: number, y: number): Vec2Like {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static add(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Subtracts vector b from vector a\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static subtract(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.subtract}\r\n   * @category Static\r\n   */\r\n  static sub(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\r\n\r\n  /**\r\n   * Multiplies two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static multiply(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.multiply}\r\n   * @category Static\r\n   */\r\n   static mul(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\r\n\r\n  /**\r\n   * Divides two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static divide(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.divide}\r\n   * @category Static\r\n   */\r\n  static div(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like { return [0, 0]; }\r\n\r\n  /**\r\n   * Math.ceil the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to ceil\r\n   * @returns `out`\r\n   */\r\n  static ceil(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.ceil(a[0]);\r\n    out[1] = Math.ceil(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.floor the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to floor\r\n   * @returns `out`\r\n   */\r\n  static floor(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.floor(a[0]);\r\n    out[1] = Math.floor(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum of two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static min(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the maximum of two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static max(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Math.round the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to round\r\n   * @returns `out`\r\n   */\r\n  static round(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.round(a[0]);\r\n    out[1] = Math.round(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Scales a {@link Vec2} by a scalar number\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to scale\r\n   * @param b - Amount to scale the vector by\r\n   * @returns `out`\r\n   */\r\n  static scale(out: Vec2Like, a: Readonly<Vec2Like>, b: number): Vec2Like {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Adds two Vec2's after scaling the second operand by a scalar value\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @param scale - The amount to scale b by before adding\r\n   * @returns `out`\r\n   */\r\n  static scaleAndAdd(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, scale: number): Vec2Like {\r\n    out[0] = a[0] + b[0] * scale;\r\n    out[1] = a[1] + b[1] * scale;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the euclidian distance between two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns distance between `a` and `b`\r\n   */\r\n  static distance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    return Math.hypot(b[0] - a[0], b[1] - a[1]);\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.distance}\r\n   * @category Static\r\n   */\r\n  static dist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared euclidian distance between two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns Squared distance between `a` and `b`\r\n   */\r\n  static squaredDistance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    const x = b[0] - a[0];\r\n    const y = b[1] - a[1];\r\n    return x * x + y * y;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Vec2.distance}\r\n   * @category Static\r\n   */\r\n   static sqrDist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the magnitude (length) of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to calculate magnitude of\r\n   * @returns Magnitude of a\r\n   */\r\n  static magnitude(a: Readonly<Vec2Like>): number {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    return Math.sqrt(x * x + y * y);\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   * @category Static\r\n   */\r\n  static mag(a: Readonly<Vec2Like>): number { return 0; }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec2.magnitude} to avoid conflicts with builtin `length` methods/attribs\r\n   *\r\n   * @param a - vector to calculate length of\r\n   * @returns length of a\r\n   */\r\n  // @ts-ignore: Length conflicts with Function.length\r\n  static length(a: Readonly<Vec2Like>): number { return 0; }\r\n  /**\r\n   * Alias for {@link Vec2.magnitude}\r\n   * @category Static\r\n   * @deprecated Use {@link Vec2.mag}\r\n   */\r\n  static len(a: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Calculates the squared length of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to calculate squared length of\r\n   * @returns Squared length of a\r\n   */\r\n  static squaredLength(a: Readonly<Vec2Like>): number {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    return x * x + y * y;\r\n  }\r\n  /**\r\n   * Alias for {@link Vec2.squaredLength}\r\n   */\r\n  static sqrLen(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\r\n\r\n  /**\r\n   * Negates the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to negate\r\n   * @returns `out`\r\n   */\r\n  static negate(out: Vec2Like, a: Readonly<Vec2Like>) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the inverse of the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to invert\r\n   * @returns `out`\r\n   */\r\n  static inverse(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns the absolute value of the components of a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to compute the absolute values of\r\n   * @returns `out`\r\n   */\r\n  static abs(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    out[0] = Math.abs(a[0]);\r\n    out[1] = Math.abs(a[1]);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Normalize a {@link Vec2}\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - Vector to normalize\r\n   * @returns `out`\r\n   */\r\n  static normalize(out: Vec2Like, a: Readonly<Vec2Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    let len = x * x + y * y;\r\n    if (len > 0) {\r\n      //TODO: evaluate use of glm_invsqrt here?\r\n      len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Calculates the dot product of two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns Dot product of `a` and `b`\r\n   */\r\n  static dot(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n  }\r\n\r\n  /**\r\n   * Computes the cross product of two {@link Vec2}s\r\n   * Note that the cross product must by definition produce a 3D vector.\r\n   * For this reason there is also not instance equivalent for this function.\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns `out`\r\n   */\r\n  static cross(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): Vec2Like {\r\n    const z = a[0] * b[1] - a[1] * b[0];\r\n    out[0] = out[1] = 0;\r\n    out[2] = z;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Performs a linear interpolation between two {@link Vec2}s\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @param t - Interpolation amount, in the range [0-1], between the two inputs\r\n   * @returns `out`\r\n   */\r\n  static lerp(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, t: number): Vec2Like {\r\n    const ax = a[0];\r\n    const ay = a[1];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat2}\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat2(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat2Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[2] * y;\r\n    out[1] = m[1] * x + m[3] * y;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat2d}\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat2d(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat2dLike>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[2] * y + m[4];\r\n    out[1] = m[1] * x + m[3] * y + m[5];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat3}\r\n   * 3rd vector component is implicitly '1'\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat3(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat3Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[3] * y + m[6];\r\n    out[1] = m[1] * x + m[4] * y + m[7];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Transforms the {@link Vec2} with a {@link Mat4}\r\n   * 3rd vector component is implicitly '0'\r\n   * 4th vector component is implicitly '1'\r\n   *\r\n   * @param out - The receiving vector\r\n   * @param a - The vector to transform\r\n   * @param m - Matrix to transform with\r\n   * @returns `out`\r\n   */\r\n  static transformMat4(out: Vec2Like, a: Readonly<Vec2Like>, m: Readonly<Mat4Like>): Vec2Like {\r\n    const x = a[0];\r\n    const y = a[1];\r\n    out[0] = m[0] * x + m[4] * y + m[12];\r\n    out[1] = m[1] * x + m[5] * y + m[13];\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Rotate a 2D vector\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving {@link Vec2}\r\n   * @param a - The {@link Vec2} point to rotate\r\n   * @param b - The origin of the rotation\r\n   * @param rad - The angle of rotation in radians\r\n   * @returns `out`\r\n   */\r\n  static rotate(out: Vec2Like, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, rad: number): Vec2Like {\r\n    //Translate point to the origin\r\n    const p0 = a[0] - b[0];\r\n    const p1 = a[1] - b[1];\r\n    const sinC = Math.sin(rad);\r\n    const cosC = Math.cos(rad);\r\n\r\n    //perform rotation and translate to correct position\r\n    out[0] = p0 * cosC - p1 * sinC + b[0];\r\n    out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Get the angle between two 2D vectors\r\n   * @category Static\r\n   *\r\n   * @param a - The first operand\r\n   * @param b - The second operand\r\n   * @returns The angle in radians\r\n   */\r\n  static angle(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\r\n    const x1 = a[0];\r\n    const y1 = a[1];\r\n    const x2 = b[0];\r\n    const y2 = b[1];\r\n    // mag is the product of the magnitudes of a and b\r\n    const  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2);\r\n    // mag &&.. short circuits if mag == 0\r\n    const cosine = mag && (x1 * x2 + y1 * y2) / mag;\r\n    // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\r\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n  }\r\n\r\n  /**\r\n   * Set the components of a {@link Vec2} to zero\r\n   * @category Static\r\n   *\r\n   * @param out - The receiving vector\r\n   * @returns `out`\r\n   */\r\n  static zero(out: Vec2Like): Vec2Like {\r\n    out[0] = 0.0;\r\n    out[1] = 0.0;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns `true` if the vectors components are ===, `false` otherwise.\r\n   */\r\n  static exactEquals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\r\n    return a[0] === b[0] && a[1] === b[1];\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the vectors have approximately the same elements in the same position.\r\n   * @category Static\r\n   *\r\n   * @param a - The first vector.\r\n   * @param b - The second vector.\r\n   * @returns `true` if the vectors are approximately equal, `false` otherwise.\r\n   */\r\n  static equals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\r\n    const a0 = a[0];\r\n    const a1 = a[1];\r\n    const b0 = b[0];\r\n    const b1 = b[1];\r\n    return (\r\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of a vector\r\n   * @category Static\r\n   *\r\n   * @param a - Vector to represent as a string\r\n   * @returns String representation of the vector\r\n   */\r\n   static str(a: Readonly<Vec2Like>): string {\r\n    return `Vec2(${a.join(', ')})`;\r\n  }\r\n}\r\n\r\n// Instance method alias assignments\r\nVec2.prototype.sub = Vec2.prototype.subtract;\r\nVec2.prototype.mul = Vec2.prototype.multiply;\r\nVec2.prototype.div = Vec2.prototype.divide;\r\nVec2.prototype.dist = Vec2.prototype.distance;\r\nVec2.prototype.sqrDist = Vec2.prototype.squaredDistance;\r\n\r\n// Static method alias assignments\r\nVec2.sub = Vec2.subtract;\r\nVec2.mul = Vec2.multiply;\r\nVec2.div = Vec2.divide;\r\nVec2.dist = Vec2.distance;\r\nVec2.sqrDist = Vec2.squaredDistance;\r\nVec2.sqrLen = Vec2.squaredLength;\r\nVec2.mag = Vec2.magnitude;\r\nVec2.length = Vec2.magnitude;\r\nVec2.len = Vec2.magnitude;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACIA,oBAAA;AAIE,IAAO,OAAP,MAAO,cAAa,aAAO;SACtB,gBAAC,IAAA,aAAA;IACJ;IAAG;IACF;IAAA;EAEH,CAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAM,MAAA,UAAA;gBACH;YACD;YAAG;YAAI;YAAA;UACV,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACF;;AAC6B,cAAM,MAAA,aAAA;AACpC;IACF;EAED;;;;;;;;MASE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAI;AACJ,SAAA,IAAO,CAAA;AACR,WAAA;EAED;;;;;;;aAOO;AACL,SAAA,IAAO,MAAK,aAAA;AACb,WAAA;EAED;;;;;;;;;;WAUE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,MAAA,CAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;cAOS;AACR,WAAA,MAAA,UAAA,MAAA,IAAA;EAED;;;;;;;WAOE;AACD,WAAA,MAAA,OAAA,MAAA,IAAA;EAED;;;;;;;;QAQE,GAAA;AACD,WAAA,MAAA,MAAA,MAAA,MAAA,CAAA;EAED;;;;;;;;SAQE,KAAO;AACR,WAAA,MAAA,OAAA,MAAA,MAAA,GAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,cAAgB,QAAS;AAC1B,WAAA,IAAA,MAAA,GAAA,MAAA;EAED;;;;;;;;;SASK,IAAG,QAAS,QAAI;AACnB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAA,CAAA,IAAO,OAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQK,SAAQ,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASE,UAAA,KAAA,GAAA;QAGE,QAAM,GAAK;AACX,UAAI,KAAK,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACb,UAAA,CAAA,IAAA;WACC;AACA,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACb,UAAA,CAAA,IAAA,EAAA,CAAA;IAED;AACD,WAAA;EAED;;;;;;;;;SASE,OAAQ,KAAO,GAAC;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KAAA,EAAA,CAAA;AAGA,QAAI,MAAM,KAAC,KAAA,KAAA;QACT,CAAA,KAAA;AACD,aAAA;IACD;AAEA,UAAM,IAAK;AACX,QAAI,CAAC,IAAI,KAAG;AACZ,QAAI,CAAC,IAAI,CAAC,KAAK;AACf,QAAI,CAAC,IAAI,CAAA,KAAK;AAEd,QAAA,CAAA,IAAO,KAAI;AACZ,WAAA;EAED;;;;;;;;;SASE,QAAA,KAAA,GAAA;AAEA,UAAM,KAAK,EAAE,CAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAA,EAAG,CAAA;AACZ,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;SAQE,YAAe,GAAG;AACnB,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,SAAY,KAAI,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,OAAQ,KAAO,GAAC,KAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAI,EAAA,CAAI;AACd,UAAM,IAAI,KAAK,IAAI,GAAG;AACtB,UAAM,IAAG,KAAM,IAAG,GAAE;AACpB,QAAI,CAAC,IAAI,KAAK,IAAI,KAAK;AACvB,QAAI,CAAC,IAAI,KAAK,IAAE,KAAK;AACrB,QAAI,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK;AACxB,QAAA,CAAA,IAAO,KAAI,CAAA,IAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,MAAQ,KAAM,GAAE,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAA,CAAA,IAAO,KAAI;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaE,aAAe,KAAI,KAAK;AACxB,UAAM,IAAI,KAAK,IAAI,GAAG;AACtB,UAAM,IAAI,KAAC,IAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,CAAC;AACV,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;;;SAaK,YAAW,KAAA,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,KAAO,GAAI;AACZ,WAAA,KAAA,KAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;EAED;;;;;;;;;;SAUK,eAAe,KAAA,GAAA,GAAA;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,qBAAoB,KAAM,GAAA,GAAA,OAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;SAWK,IAAI,GAAG,GAAC,GAAK,GAAG;AACnB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAE,EAAA,CAAA;AACZ,MAAE,CAAC,IAAI,EAAE,CAAC;AACV,MAAE,CAAC,IAAI,EAAE,CAAC;AACV,MAAA,CAAA,IAAO,EAAE,CAAA,IAAK,EAAE,CAAC,IAAA,EAAA,CAAA;AAClB,WAAA,CAAA,GAAA,GAAA,CAAA;EAED;;;;;;;;;SASE,YACM,GAAM,GAAG;WACT,EAAA,CAAA,MAAS,EAAA,CAAA,KACb,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KAEf,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,4BAAkB,KAAK,IAAG,GAAI,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC1E,KAAK,IAAI,KAAK,EAAE,KAAK,4BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,4BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAE5E,KAAA,IAAA,KAAA,EAAA,KAAA,4BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;;AAGH;AAGA,KAAA,UAAA,MAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;;;;ACjlBhB,IAAAA,iBAAA;AAIE,IAAO,QAAP,MAAO,eAAgB,aAAI;SACtB,gBAAC,IAAA,aAAA;IACJ;IAAG;IACH;IAAG;IACF;IAAA;EAEH,CAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAM,MAAA,UAAA;gBACH;YACD;YAAG;YACH;YAAG;YAAI;YAAA;UACV,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACF;;AAC8B,cAAM,OAAA,aAAA;AACrC;IACF;EAED;;;;;;;;MASE,MAAA;AACD,WAAA,OAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAI;AACJ,SAAA,IAAO,CAAA;AACR,WAAA;EAED;;;;;;;aAOO;AACL,SAAA,IAAO,OAAK,aAAA;AACb,WAAA;EAED;;;;;;;;;;WAUE,GAAO;AACR,WAAA,OAAA,SAAA,MAAA,MAAA,CAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;YAQE,GAAO;AACR,WAAA,OAAA,UAAA,MAAA,MAAA,CAAA;EAED;;;;;;;;SAQE,KAAO;AACR,WAAA,OAAA,OAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;QAQE,GAAA;AACD,WAAA,OAAA,MAAA,MAAA,MAAA,CAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,OAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,OAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,cAAiB,QAAG;AACrB,WAAA,IAAA,OAAA,GAAA,MAAA;EAED;;;;;;;;;SASK,IAAG,QAAS,QAAI;AACnB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAA,CAAA,IAAO,OAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQK,SAAQ,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASE,OAAQ,KAAO,GAAC;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAI,CAAC;AACd,UAAM,MAAM,EAAE,CAAC;AAEf,UAAI,MAAQ,EAAA,CAAG;AACf,QAAI,MAAM,KAAC,KAAA,KAAA;QACT,CAAA,KAAA;AACD,aAAA;IACD;AAEA,UAAM,IAAK;AACX,QAAI,CAAC,IAAI,KAAG;AACZ,QAAI,CAAC,IAAI,CAAC,KAAK;AACf,QAAI,CAAC,IAAI,CAAA,KAAK;AACd,QAAI,CAAC,IAAI,KAAG;AACZ,QAAI,CAAC,KAAK,KAAK,MAAM,KAAK,OAAO;AACjC,QAAA,CAAA,KAAU,KAAC,MAAA,KAAA,OAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,YAAe,GAAG;AACnB,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,SAAY,KAAI,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK;AAC7B,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,UAAa,KAAG,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAC,CAAA;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK;AAC7B,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,OAAQ,KAAO,GAAC,KAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAI,EAAA,CAAI;AACd,UAAM,IAAI,KAAK,IAAI,GAAG;AACtB,UAAM,IAAG,KAAM,IAAG,GAAE;AACpB,QAAI,CAAC,IAAI,KAAK,IAAI,KAAK;AACvB,QAAI,CAAC,IAAI,KAAK,IAAE,KAAK;AACrB,QAAI,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK;AACxB,QAAI,CAAC,IAAI,KAAG,CAAA,IAAA,KAAA;AACZ,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;SAUE,MAAQ,KAAM,GAAE,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAG;AACZ,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;;;;SAeK,gBAAQ,KAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaE,aAAe,KAAI,KAAK;AACxB,UAAM,IAAI,KAAK,IAAI,GAAG;AACtB,UAAM,IAAI,KAAC,IAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,CAAC;AACV,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;;;SAaK,YAAW,KAAA,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;SAQE,KAAO,GAAI;AACZ,WAAA,KAAA,KAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,CAAA;EAED;;;;;;;;;;SAUK,eAAe,KAAA,GAAA,GAAA;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,qBAAoB,KAAM,GAAA,GAAA,OAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,YACM,GAAM,GAAG;WACT,EAAA,CAAA,MAAS,EAAA,CAAA,KACb,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KAEf,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAI,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC1E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAE5E,KAAA,IAAA,KAAA,EAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,SAAA,EAAA,KAAA,IAAA,CAAA;;AAGH;AAEA,MAAM,MAAM,MAAM;;;;ACtmBlB,IAAAC,iBAAA;AAIE,IAAO,OAAP,MAAO,cAAa,aAAO;SACtB,gBAAI,IAAA,aAAA;IACP;IAAG;IAAG;IACN;IAAG;IAAG;IACL;IAAA;IAAA;EAEH,CAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAM,MAAA,UAAA;gBACH;YACD;YAAG;YAAG;YACN;YAAG;YAAG;YAAI;YAAA;YAAA;UACb,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACF;;AAC6B,cAAM,MAAA,aAAA;AACpC;IACF;EAED;;;;;;;;MASE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAI;AACJ,SAAA,IAAO,CAAA;AACR,WAAA;EAED;;;;;;;aAOO;AACL,SAAA,IAAO,MAAK,aAAA;AACb,WAAA;EAED;;;;;;;;;;WAUE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,MAAA,CAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;cAOS;AACR,WAAA,MAAA,UAAA,MAAA,IAAA;EAED;;;;;;;WAOE;AACD,WAAA,MAAA,OAAA,MAAA,IAAA;EAED;;;;;;;;YAQE,GAAO;AACR,WAAA,MAAA,UAAA,MAAA,MAAA,CAAA;EAED;;;;;;;;SAQE,KAAO;AACR,WAAA,MAAA,OAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;QAQE,GAAA;AACD,WAAA,MAAA,MAAA,MAAA,MAAA,CAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,cAAgB,QAAS;AAC1B,WAAA,IAAA,MAAA,GAAA,MAAA;EAED;;;;;;;;;SASK,IAAG,QAAS,QAAI;AACnB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAA,CAAA,IAAO,OAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQK,SAAQ,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASE,UAAA,KAAA,GAAA;QAEE,QAAM,GAAG;AAGT,YAAM,MAAM,EAAE,CAAA,GAAA,MAAA,EAAA,CAAA,GAAA,MAAA,EAAA,CAAA;AACd,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAA,CAAG;AACZ,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI,EAAA,CAAG;AACZ,UAAI,CAAC,IAAI;AACV,UAAA,CAAA,IAAA;WACC;AACA,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACb,UAAA,CAAA,IAAA,EAAA,CAAA;IAED;AACD,WAAA;EAED;;;;;;;;;SASE,OAAS,KAAM,GACb;AAEF,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACX,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AAEX,UAAM,MAAM,EAAA,CAAG,GAAG,MAAM,EAAA,CAAG,GAAG,MAAI,EAAA,CAAA;AAClC,UAAM,MAAM,MAAI,MAAM,MAAM;AAC5B,UAAM,MAAM,CAAA,MAAM,MAAM,MAAM;AAE9B,UAAA,MAAA,MAAA,MAAA,MAA4B;AAG5B,QAAI,MAAM,MAAC,MAAA,MAAA,MAAA,MAAA;QACT,CAAA,KAAA;AACD,aAAA;IACD;AAEA,UAAM,IAAM;AACZ,QAAI,CAAC,IAAI,MAAK;AACd,QAAI,CAAC,KAAK,CAAA,MAAM,MAAM,MAAM,OAAO;AACnC,QAAI,CAAC,KAAI,MAAM,MAAI,MAAA,OAAA;AACnB,QAAI,CAAC,IAAI,MAAI;AACb,QAAI,CAAC,KAAK,MAAI,MAAM,MAAM,OAAO;AACjC,QAAI,CAAC,KAAI,CAAA,MAAM,MAAI,MAAA,OAAA;AACnB,QAAI,CAAC,IAAI,MAAK;AACd,QAAI,CAAC,KAAK,CAAA,MAAM,MAAM,MAAM,OAAO;AACnC,QAAA,CAAA,KAAU,MAAC,MAAA,MAAA,OAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,QAAS,KAAO,GAAC;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AAEf,UAAM,MAAM,EAAA,CAAG;AACf,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,QAAA,CAAA,IAAO,MAAI,MAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,YAAe,GAAE;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AAEf,UAAA,MACK,EAAG,CAAC;WACJ,OAAQ,MAAM,MAAM,MAAM,OAC7B,OAAO,CAAA,MAAM,MAAM,MAAM,OAE5B,OAAA,MAAA,MAAA,MAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,SAAY,KAAK,GAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AAEf,UAAM,MAAM,EAAE,CAAA;AACd,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAA;AACX,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AACpC,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AAEpC,QAAE,CAAG,IAAI,KAAC,MAAA,KAAA,MAAA,KAAA;AACV,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAC,CAAA;AACN,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AACpC,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AAEpC,QAAE,CAAG,IAAI,KAAC,MAAA,KAAA,MAAA,KAAA;AACV,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAC,CAAA;AACN,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AACpC,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AACpC,QAAA,CAAA,IAAO,KAAI,MAAA,KAAA,MAAA,KAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,UAAa,KAAI,GAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,IAAI,EAAE,CAAC;AAEb,UAAM,IAAG,EAAG,CAAC;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAET,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAET,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,QAAA,CAAA,IAAO,IAAI,MAAA,IAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,OAAS,KAAM,GAAE,KAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAI,EAAI,CAAC;AACf,UAAM,IAAI,KAAK,IAAI,GAAG;AAEtB,UAAM,IAAI,KAAG,IAAM,GAAC;AACpB,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AAEvB,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,QAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AAEvB,QAAI,CAAC,IAAI,IAAI,MAAA,IAAA;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;SAUE,MAAO,KAAO,GAAC,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AAEb,UAAM,IAAI,EAAA,CAAG;AACb,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAEhB,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAEhB,QAAI,CAAC,IAAI,IAAI,EAAC,CAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaK,gBAAQ,KAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;;;SAaE,aAAe,KAAI,KAAK;AACxB,UAAM,IAAI,KAAK,IAAI,GAAG;AAEtB,UAAM,IAAI,KAAC,IAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAET,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,CAAC;AACV,QAAI,CAAC,IAAI;AAET,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;;;SAaK,YAAW,KAAA,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AAET,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;SAUK,UAAU,KAAC,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;SAQE,SAAY,KAAG,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAE,EAAI,CAAA;AACZ,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAI,IAAK;AACf,QAAI,CAAC,IAAI,IAAE,KAAM;AACjB,QAAI,CAAC,IAAI,KAAK;AAEd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAI;AACb,QAAI,CAAC,IAAI,IAAE,KAAM;AAEjB,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAI;AAEb,QAAA,CAAA,IAAO,IAAI,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAE,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAA,CAAA,IAAO,EAAI,EAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,eAAiB,KAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAA;AACd,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAEhB,UAAM,MAAM,EAAA,EAAG;AACf,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,UAAA,MAAA,MAAA,MAAA,MAA4B;AAI5B,QAAI,MAAM,MAAC,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA;QACT,CAAA,KAAA;AACD,aAAA;IACD;AAEA,UAAM,IAAI;AACV,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAE/C,QAAA,CAAA,KAAU,MAAC,MAAA,MAAA,MAAA,MAAA,OAAA;AACZ,WAAA;EAED;;;;;;;;;;;;SAYE,mBAAgB,KAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAA;AAEb,UAAM,KAAK,EAAA,EAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AAExB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AAExB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AAExB,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,WAAU,KAAM,OAAA,QAAA;AACnB,QAAI,CAAC,IAAI,IAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;SAQE,KAAO,GAAI;WAEN,KAAK,KAAG,EAAA,CAAA,IAAA,EAAA,CAAA,IACX,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IAEb,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;EAED;;;;;;;;;;SAUK,eAAe,KAAA,GAAA,GAAA;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,qBAAoB,KAAM,GAAA,GAAA,OAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,YACM,GAAM,GAAG;WACT,EAAA,CAAA,MAAS,EAAA,CAAA,KACb,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KAEf,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAI,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC1E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAE5E,KAAA,IAAA,KAAA,EAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;;AAGH;AAGA,KAAA,UAAA,MAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;;;;ACjgChB,IAAAC,iBAAA;AAIE,IAAO,OAAP,MAAO,cAAa,aAAO;SACtB,gBAAO,IAAA,aAAA;IACV;IAAG;IAAG;IAAG;IACT;IAAG;IAAG;IAAG;IACT;IAAG;IAAG;IAAG;IACR;IAAA;IAAA;IAAA;EAEH,CAAA;;;;;EAMA,OAAA,YAAA,IAAA,aAAA,CAAA;;;;iBAIS,QAAO;YACZ,OAAO,QAAA;WACL;AAAe,cAAM,MAAA;AACvB;WACE;AAAoD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,EAAA;AAC5D;WACE;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAM,MAAA,UAAA;gBACH;YACD;YAAG;YAAG;YAAG;YACT;YAAG;YAAG;YAAG;YACT;YAAG;YAAG;YAAG;YAAI;YAAA;YAAA;YAAA;UAChB,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,EAAA;QACD;AACF;;AAC6B,cAAM,MAAA,aAAA;AACpC;IACF;EAED;;;;;;;;MASE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAI;AACJ,SAAA,IAAO,CAAA;AACR,WAAA;EAED;;;;;;;aAOO;AACL,SAAA,IAAO,MAAK,aAAA;AACb,WAAA;EAED;;;;;;;;;;WAUE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,MAAA,CAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;cAOS;AACR,WAAA,MAAA,UAAA,MAAA,IAAA;EAED;;;;;;;WAOE;AACD,WAAA,MAAA,OAAA,MAAA,IAAA;EAED;;;;;;;;YAQE,GAAO;AACR,WAAA,MAAA,UAAA,MAAA,MAAA,CAAA;EAED;;;;;;;;;SASE,KAAO,MAAK;AACb,WAAA,MAAA,OAAA,MAAA,MAAA,KAAA,IAAA;EAED;;;;;;;;QAQE,GAAA;AACD,WAAA,MAAA,MAAA,MAAA,MAAA,CAAA;EAED;;;;;;;;UAQE,KAAO;AACR,WAAA,MAAA,QAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;UAQE,KAAO;AACR,WAAA,MAAA,QAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;UAQE,KAAO;AACR,WAAA,MAAA,QAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;;;;;;;gBAcS,MAAK,QAAA,MAAkB,KAAE;AACjC,WAAA,MAAA,cAAA,MAAA,MAAA,QAAA,MAAA,GAAA;EAED;;;;;;;;;;;;;;gBAcS,MAAK,QAAA,MAAkB,KAAE;AACjC,WAAA,MAAA,cAAA,MAAA,MAAA,QAAA,MAAA,GAAA;EAED;;;;;;;;;;;;;;;UAeE,MAAO,OAAK,QAAY,KAAM,MAAE,KAAO;AACxC,WAAA,MAAA,QAAA,MAAA,MAAA,OAAA,QAAA,KAAA,MAAA,GAAA;EAED;;;;;;;;;;;;;;;UAeE,MAAO,OAAK,QAAY,KAAM,MAAE,KAAO;AACxC,WAAA,MAAA,QAAA,MAAA,MAAA,OAAA,QAAA,KAAA,MAAA,GAAA;EAED;;;;;;;aAQS,cAAK;AACb,WAAA,KAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAA,IAAG,EAAI,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAA,EAAA,IAAU,EAAC,EAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,cAAgB,QAAS;AAC1B,WAAA,IAAA,MAAA,GAAA,MAAA;EAED;;;;;;;;;SASK,IAAG,QAAS,QAAI;AACnB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAC,IAAI,OAAO,CAAC;AACjB,QAAI,CAAA,IAAG,OAAS,CAAC;AACjB,QAAI,EAAE,IAAI,OAAO,EAAE;AACnB,QAAI,EAAE,IAAI,OAAO,EAAE;AACnB,QAAI,EAAE,IAAI,OAAO,EAAE;AACnB,QAAI,EAAE,IAAI,OAAO,EAAE;AACnB,QAAI,EAAE,IAAI,OAAO,EAAE;AACnB,QAAA,EAAA,IAAU,OAAC,EAAA;AACZ,WAAA;EAED;;;;;;;;SAQK,SAAQ,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;SASE,UAAA,KAAA,GAAA;QAEE,QAAM,GAAG;AAGT,YAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GAAE,MAAA,EAAA,CAAA;AACb,YAAM,MAAM,EAAE,CAAA,GAAI,MAAA,EAAA,CAAA;AAElB,YAAM,MAAM,EAAE,EAAA;AACd,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAA;AACX,UAAI,CAAC,IAAI,EAAA,EAAI;AACb,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI,EAAE,CAAA;AACX,UAAI,CAAC,IAAI,EAAA,EAAI;AACb,UAAI,CAAC,IAAI;AACT,UAAI,CAAA,IAAG;AACP,UAAI,EAAE,IAAI,EAAA,EAAI;AACd,UAAI,EAAE,IAAI;AACV,UAAI,EAAE,IAAI;AACX,UAAA,EAAA,IAAA;WACC;AACA,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAA;AACX,UAAI,CAAC,IAAI,EAAE,EAAE;AACb,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAA;AACX,UAAI,CAAC,IAAI,EAAE,EAAE;AACb,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAA,IAAG,EAAI,CAAC;AACZ,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,CAAC;AACb,UAAI,EAAE,IAAI,EAAE,CAAA;AACZ,UAAI,EAAE,IAAI,EAAE,EAAE;AACf,UAAA,EAAA,IAAA,EAAA,EAAA;IAED;AACD,WAAA;EAED;;;;;;;;;SASE,OAAS,KAAM,GACb;AAGF,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACX,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAA,GAAG,MACR,EAAI,CAAC;AACV,UAAM,MAAM,EAAE,CAAA,GAAG,MACZ,EAAI,CAAC,GAAG,MACR,EAAG,EAAE,GAAG,MACR,EAAG,EAAE;AAEV,UAAM,MAAM,EAAA,EAAG,GAAG,MAAM,EAAG,EAAA,GAAG,MAAI,EAAA,EAAA,GAAA,MAAA,EAAA,EAAA;AAClC,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,UAAA,MAAA,MAAA,MAAA,MAA4B;AAI5B,QAAI,MAAM,MAAC,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA;QACT,CAAA,KAAA;AACD,aAAA;IACD;AAEA,UAAM,IAAI;AACV,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAA,KAAM,MAAI,MAAM,MAAM,MAAM,MAAM,OAAO;AAC7C,QAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,QAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,QAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,QAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,QAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAEhD,QAAA,EAAA,KAAW,MAAA,MAAA,MAAA,MAAA,MAAA,OAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,QAAS,KAAO,GACd;AAGF,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACX,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAA,GAAG,MACR,EAAI,CAAC;AACV,UAAM,MAAM,EAAE,CAAA,GAAG,MACZ,EAAI,CAAC,GAAG,MACR,EAAG,EAAE,GAAG,MACR,EAAG,EAAE;AAEV,UAAM,MAAM,EAAA,EAAG,GAAG,MAAM,EAAG,EAAA,GAAG,MAAI,EAAA,EAAA,GAAA,MAAA,EAAA,EAAA;AAClC,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAA,IAAG,MAAM,MAAM,MAAM,MAAM,MAAM;AACrC,QAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,QAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,QAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,QAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,QAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,QAAA,EAAA,IAAU,MAAC,MAAA,MAAA,MAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;SAQE,YAAe,GACb;AAGF,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACX,UAAM,MAAM,EAAE,CAAC,GACb,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAA,GAAG,MACR,EAAI,CAAC;AACV,UAAM,MAAM,EAAE,CAAA,GAAG,MACZ,EAAI,CAAC,GAAG,MACR,EAAG,EAAE,GAAG,MACR,EAAG,EAAE;AAEV,UAAM,MAAK,EAAG,EAAA,GAAG,MAAM,EAAG,EAAG,GAAG,MAAC,EAAA,EAAA,GAAA,MAAA,EAAA,EAAA;AACjC,UAAM,KAAK,MAAM,MAAM,MAAM;AAC7B,UAAM,KAAK,MAAM,MAAM,MAAM;AAC7B,UAAM,KAAK,MAAM,MAAM,MAAM;AAC7B,UAAM,KAAK,MAAM,MAAM,MAAM;AAC7B,UAAM,KAAK,MAAM,MAAM,MAAM;AAC7B,UAAM,KAAK,MAAM,MAAK,MAAM;AAC5B,UAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AACvC,UAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AACvC,UAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAEvC,UAAA,KAAA,MAAA,KAAA,MAA4B,KAAA,MAAA;AAE7B,WAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA;EAED;;;;;;;;;;SAUE,SAAY,KAAK,GAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAA;AACd,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAEhB,UAAA,MAAA,EAAA,EAAA;AAEA,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAA;AACX,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAE/C,QAAE,CAAG,IAAI,KAAC,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA;AACV,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAC,CAAA;AACN,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAE/C,QAAE,CAAG,IAAI,KAAC,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA;AACV,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAA;AACP,SAAK,EAAE,EAAE;AACT,SAAK,EAAC,EAAG;AACT,QAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,QAAI,CAAA,IAAG,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC7C,QAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAEhD,QAAE,EAAI,IAAI,KAAC,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA;AACX,SAAK,EAAE,EAAE;AACT,SAAK,EAAE,EAAE;AACT,SAAK,EAAE,EAAE;AACT,SAAI,EAAG,EAAA;AACP,QAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,QAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,QAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,QAAA,EAAA,IAAU,KAAC,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,UAAa,KAAE,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AAEb,UAAK,IAAK,EAAA,CAAG;QACX,MAAM,KAAK;AACX,UAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,UAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAA,IAAG,IAAI,EAAI,EAAC;AAC9C,UAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AACjD,UAAA,EAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA;WACC;AACA,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAC;AACf,YAAM,MAAM,EAAE,CAAA;AACd,YAAM,MAAM,EAAE,EAAE;AAEhB,YAAM,MAAM,EAAC,EAAA;AACb,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAA,IAAG;AACP,UAAI,EAAE,IAAI;AAEV,UAAI,EAAE,IAAI;AACV,UAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,UAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,UAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC7C,UAAA,EAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,EAAA,EAAA;IAED;AACD,WAAA;EAED;;;;;;;;;;SAUE,MAAO,KAAO,GAAC,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AAEb,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAA,IAAG,EAAI,CAAC,IAAG;AACf,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAE;AAChB,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAA,EAAA,IAAU,EAAC,EAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,OAAQ,KAAO,GAAC,KAAA,MAAA;AAChB,QAAI,IAAI,KAAK,CAAC;AACd,QAAI,IAAI,KAAK,CAAC;AACd,QAAI,IAAG,KAAG,CAAI;AAEd,QAAI,MAAM,KAAA,KAAA,IAAc,IAAA,IAAA,IAAA,IAAA,CAAA;QACtB,MAAA,4BAAY;AACb,aAAA;IAED;AACA,UAAK,IAAI;AACT,SAAK;AACL,SAAK;AAEL,SAAA;AACA,UAAM,IAAI,KAAK,IAAI,GAAG;AACtB,UAAM,IAAI,KAAK,IAAC,GAAA;AAEhB,UAAM,IAAG,IAAK;AACd,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAA;AACd,UAAM,MAAM,EAAE,EAAE;AAEhB,UAAA,MAAA,EAAA,EAAA;AAEA,UAAM,MAAM,IAAI,IAAI,IAAI;AACxB,UAAM,MAAM,IAAI,IAAI,IAAI,IAAI;AAC5B,UAAM,MAAM,IAAI,IAAI,IAAI,IAAI;AAC5B,UAAM,MAAM,IAAI,IAAI,IAAI,IAAE;AAC1B,UAAM,MAAM,IAAI,IAAI,IAAI;AACxB,UAAM,MAAM,IAAI,IAAI,IAAI,IAAI;AAC5B,UAAM,MAAM,IAAI,IAAI,IAAI,IAAI;AAC5B,UAAM,MAAM,IAAI,IAAI,IAAI,IAAE;AAE1B,UAAA,MAAA,IAAA,IAAA,IAAA;AAEA,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,QAAI,CAAA,IAAG,MAAM,MAAM,MAAM,MAAM,MAAM;AACrC,QAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,QAAI,EAAC,IAAK,MAAM,MAAA,MAAA,MAAA,MAAA;QACd,MAAA,KAAA;AAEA,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACf,UAAA,EAAA,IAAA,EAAA,EAAA;IACD;AACD,WAAA;EAED;;;;;;;;;;SAUE,QAAQ,KAAQ,GAAC,KAAK;AACtB,QAAI,IAAI,KAAK,IAAI,GAAG;AACpB,QAAI,IAAG,KAAM,IAAE,GAAA;AACf,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAA;AACZ,QAAI,MAAM,EAAE,EAAE;AAEd,QAAI,MAAM,EAAA,EAAG;QACX,MAAA,KAAA;AAEA,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAA,IAAG,EAAI,CAAC;AACZ,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACf,UAAA,EAAA,IAAA,EAAA,EAAA;IAED;AAEA,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAA,IAAG,MAAM,IAAI,MAAM;AACvB,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAA,EAAA,IAAU,MAAC,IAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,QAAQ,KAAQ,GAAC,KAAK;AACtB,QAAI,IAAI,KAAK,IAAI,GAAG;AACpB,QAAI,IAAG,KAAM,IAAE,GAAA;AACf,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAA;AACZ,QAAI,MAAM,EAAE,EAAE;AAEd,QAAI,MAAM,EAAA,EAAG;QACX,MAAA,KAAA;AAEA,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAA,IAAG,EAAI,CAAC;AACZ,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACf,UAAA,EAAA,IAAA,EAAA,EAAA;IAED;AAEA,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAA,IAAG,MAAM,IAAI,MAAM;AACvB,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAA,EAAA,IAAU,MAAC,IAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,QAAQ,KAAQ,GAAC,KAAK;AACtB,QAAI,IAAI,KAAK,IAAI,GAAG;AACpB,QAAI,IAAG,KAAM,IAAE,GAAA;AACf,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC;AAEb,QAAI,MAAM,EAAA,CAAG;QACX,MAAA,KAAA;AAEA,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAA,IAAG,EAAI,CAAC;AACZ,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACd,UAAI,EAAE,IAAI,EAAE,EAAE;AACf,UAAA,EAAA,IAAA,EAAA,EAAA;IAED;AAEA,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,QAAA,CAAA,IAAO,MAAI,IAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaK,gBAAQ,KAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAA;AACZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;SAaK,YAAW,KAAA,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI,EAAE,CAAA;AACZ,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;;SAcE,aAAgB,KAAA,KAAA,MAAA;AAChB,QAAI,IAAI,KAAK,CAAC;AACd,QAAI,IAAI,KAAK,CAAC;AACd,QAAI,IAAG,KAAG,CAAI;AAEd,QAAI,MAAM,KAAA,KAAA,IAAc,IAAA,IAAA,IAAA,IAAA,CAAA;QACtB,MAAA,4BAAY;AACb,aAAA;IAED;AACA,UAAK,IAAI;AACT,SAAK;AACL,SAAK;AAEL,SAAA;AACA,UAAM,IAAI,KAAK,IAAI,GAAG;AACtB,UAAM,IAAI,KAAK,IAAC,GAAA;AAEhB,UAAA,IAAA,IAAA;AAEA,QAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,QAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,QAAI,CAAC,IAAI,IAAE,IAAA,IAAA,IAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAE;AACvB,QAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,QAAI,CAAC,IAAI,IAAE,IAAA,IAAA,IAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,QAAI,CAAA,IAAG,IAAI,IAAI,IAAI,IAAK;AACxB,QAAI,EAAE,IAAI,IAAE,IAAA,IAAA;AACZ,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;SAaE,cAAiB,KAAK,KAAA;AACtB,QAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,QAAA,IAAA,KAAA,IAAA,GAAA;AAEA,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG,CAAG;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;SAaE,cAAiB,KAAK,KAAA;AACtB,QAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,QAAA,IAAA,KAAA,IAAA,GAAA;AAEA,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,CAAC;AACV,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;SAaE,cAAe,KAAO,KAAE;AACxB,UAAM,IAAI,KAAK,IAAI,GAAG;AAEtB,UAAA,IAAA,KAAA,IAAA,GAAA;AAEA,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,CAAC;AACV,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;;;;;SAiBE,wBAAkB,KAAA,GAAA,GAAA;AAElB,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAE,EAAI,CAAA;AACZ,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAI,IAAI;AACd,QAAI,CAAC,IAAI,KAAK,KAAG;AACjB,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAK,KAAG;AACjB,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAA,IAAG,KAAO;AACd,QAAI,EAAE,IAAI,KAAE,KAAA;AACZ,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAA;AAEZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;SASE,UAAa,KAAI,GAAA;AACjB,UAAM,KAAK,CAAC,EAAE,CAAC;AACf,UAAM,KAAK,CAAC,EAAE,CAAC;AACf,UAAM,KAAK,CAAC,EAAE,CAAC;AACf,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAI,KAAA,EAAS,CAAA;AACb,QAAA,YAAA,KAAA,KAAA,KAA8B,KAAA,KAAA,KAAA,KAAA;QAE5B,YAAK,GAAU;AACf,YAAK,UAAU,CAAC,KAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAK;AACpE,YAAK,UAAU,CAAC,KAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAK;AACrE,YAAA,UAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,IAAA;WACC;AACA,YAAK,UAAU,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC9D,YAAK,UAAU,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC/D,YAAA,UAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA;IACD;AACA,UAAA,wBAAW,KAAA,GAAA,MAAA,SAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,eAAiB,KAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAA;AACd,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAEhB,UAAM,MAAM,EAAA,EAAG;AACf,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAC9B,UAAM,MAAM,MAAM,MAAM,MAAM;AAE9B,UAAA,MAAA,MAAA,MAAA,MAA4B;AAI5B,QAAI,MAAM,MAAC,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA;QACT,CAAA,KAAA;AACD,aAAA;IACD;AAEA,UAAM,IAAI;AACV,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAC,MAAA,MAAA,MAAA,MAAA,OAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAC,KAAK,MAAC,MAAA,MAAA,MAAA,MAAA,OAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,QAAI,CAAA,KAAM,MAAI,MAAM,MAAM,MAAM,MAAM,OAAO;AAC7C,QAAI,EAAE,KAAK,MAAC,MAAA,MAAA,MAAA,MAAA,OAAA;AAEZ,QAAA,EAAA,IAAA;AAEA,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAEV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;SAYE,mBAAgB,KAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAA;AAEb,UAAM,KAAK,EAAA,EAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAE,KAAA,KAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAE,KAAA,KAAA;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAA,IAAG,KAAK,KAAK,KAAK;AACtB,QAAI,EAAE,IAAI,KAAE,KAAA,KAAA;AAEZ,QAAA,EAAA,IAAA;AAEA,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAEV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;SAYK,eAAc,KAAA,KAAA;AACjB,QAAI,CAAC,IAAI,IAAI,EAAE;AACf,QAAI,CAAC,IAAI,IAAI,EAAE;AAEf,QAAA,CAAA,IAAO,IAAI,EAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaE,WAAY,KAAO,KAAA;AACnB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAA;AAEhB,UAAM,MAAG,IAAK,EAAI;AAClB,QAAI,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,GAAG;AACpD,QAAI,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,GAAG;AAEpD,QAAA,CAAA,IAAO,KAAI,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,GAAA;AACZ,WAAA;EAED;;;;;;;;;;;;SAYE,YAAe,KAAK,KAAC;AAErB,UAAA,WAAgB,MAAK,WAAW,GAAE;AAClC,UAAM,MAAM,IAAI,MAAK,UAAU,CAAC;AAChC,UAAM,MAAM,IAAI,MAAK,UAAU,CAAC;AAEhC,UAAM,MAAI,IAAM,MAAG,UAAO,CAAA;AAC1B,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAC,IAAI;AACtB,UAAM,OAAO,IAAI,CAAA,IAAG;AAEpB,UAAM,OAAK,IAAG,EAAI,IAAG;AACrB,UAAK,QAAK,OAAA,OAAA;AAEV,QAAI,IAAA;QACF,QAAQ,GAAC;AACT,UAAI,KAAK,KAAI,QAAK,CAAA,IAAA;AAClB,UAAI,CAAC,IAAI,OAAK;AACd,UAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,UAAI,CAAC,KAAK,OAAO,QAAQ;AAC1B,UAAA,CAAA,KAAA,OAAA,QAAA;eACK,OAAK,QAAW,OAAO,MAAI;AAC/B,UAAI,KAAK,KAAK,IAAG,OAAU,OAAA,IAAA,IAAA;AAC3B,UAAI,CAAC,KAAI,OAAQ,QAAC;AAClB,UAAI,CAAC,IAAI,OAAK;AACd,UAAI,CAAC,KAAK,OAAO,QAAQ;AAC1B,UAAA,CAAA,KAAA,OAAA,QAAA;eACK,OAAK,MAAQ;AACjB,UAAI,KAAK,KAAK,IAAG,OAAU,OAAA,IAAA,IAAA;AAC3B,UAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,UAAI,CAAC,KAAI,OAAQ,QAAC;AAClB,UAAI,CAAC,IAAI,OAAK;AACf,UAAA,CAAA,KAAA,OAAA,QAAA;WACE;AACD,UAAI,KAAK,KAAK,IAAG,OAAU,OAAA,IAAA,IAAA;AAC3B,UAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,UAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,UAAI,CAAC,KAAI,OAAQ,QAAC;AACnB,UAAA,CAAA,IAAA,OAAA;IAED;AACD,WAAA;EAED;;;;;;;;;;;;SAYE,UAAW,OAAQ,OAAA,OAAA,KAAA;AACnB,UAAM,CAAC,IAAI,IAAI,EAAE;AACjB,UAAM,CAAC,IAAI,IAAI,EAAE;AAEjB,UAAM,CAAA,IAAG,IAAM,EAAE;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,MAAM,IAAI,CAAA;AAEhB,UAAM,MAAK,IAAK,EAAA;AAChB,UAAM,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,GAAG;AACtD,UAAM,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,GAAG;AAEtD,UAAM,CAAA,IAAG,KAAO,KAAK,MAAI,MAAA,MAAA,MAAA,MAAA,GAAA;AACzB,UAAM,MAAM,IAAI,MAAM,CAAC;AACvB,UAAM,MAAM,IAAI,MAAM,CAAC;AAEvB,UAAM,MAAI,IAAM,MAAM,CAAC;AACvB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AAEnB,UAAM,OAAK,MAAO;AAClB,UAAK,QAAK,OAAA,OAAA;AAEV,QAAI,IAAA;QACF,QAAQ,GAAC;AACT,UAAA,KAAQ,KAAG,QAAS,CAAA,IAAA;AACpB,YAAM,CAAC,IAAI,OAAK;AAChB,YAAM,CAAC,KAAK,OAAO,QAAQ;AAC3B,YAAM,CAAC,KAAK,OAAO,QAAQ;AAC5B,YAAA,CAAA,KAAA,OAAA,QAAA;eACK,OAAK,QAAW,OAAO,MAAI;AAC/B,UAAA,KAAQ,KAAI,IAAO,OAAQ,OAAE,IAAA,IAAA;AAC7B,YAAM,CAAC,KAAI,OAAQ,QAAC;AACpB,YAAM,CAAC,IAAI,OAAK;AAChB,YAAM,CAAC,KAAK,OAAO,QAAQ;AAC5B,YAAA,CAAA,KAAA,OAAA,QAAA;eACK,OAAK,MAAQ;AACjB,UAAA,KAAQ,KAAI,IAAO,OAAQ,OAAE,IAAA,IAAA;AAC7B,YAAM,CAAC,KAAK,OAAO,QAAQ;AAC3B,YAAM,CAAC,KAAI,OAAQ,QAAC;AACpB,YAAM,CAAC,IAAI,OAAK;AACjB,YAAA,CAAA,KAAA,OAAA,QAAA;WACE;AACD,UAAA,KAAQ,KAAI,IAAO,OAAQ,OAAE,IAAA,IAAA;AAC7B,YAAM,CAAC,KAAK,OAAO,QAAQ;AAC3B,YAAM,CAAC,KAAK,OAAO,QAAQ;AAC3B,YAAM,CAAC,KAAI,OAAQ,QAAC;AACrB,YAAA,CAAA,IAAA,OAAA;IAED;AACD,WAAA;EAED;;;;;;;;;;;;;;;;;;;SAmBE,6BAAkB,KAAA,GAAA,GAAA,GAAA;AAElB,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAE,EAAI,CAAA;AACZ,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,KAAK,KAAK,KAAG,OAAM;AACxB,QAAI,CAAC,KAAK,KAAK,MAAM;AACrB,QAAI,CAAC,KAAK,KAAC,MAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,KAAK,KAAK,MAAK;AACpB,QAAI,CAAC,KAAK,KAAK,KAAG,OAAM;AACxB,QAAI,CAAC,KAAK,KAAC,MAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,KAAK,KAAK,MAAM;AACrB,QAAI,CAAA,KAAM,KAAK,MAAM;AACrB,QAAI,EAAE,KAAK,KAAC,KAAA,OAAA;AACZ,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAA;AAEZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;;;;;;;;;;SAsBE,mCAAkB,KAAA,GAAA,GAAA,GAAA,GAAA;AAElB,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAE,EAAI,CAAA;AACZ,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAI,EAAG,CAAC;AACd,UAAM,QAAQ,KAAK,KAAG,OAAM;AAC5B,UAAM,QAAQ,KAAK,MAAM;AACzB,UAAM,QAAQ,KAAK,MAAM;AACzB,UAAM,QAAQ,KAAK,MAAK;AACxB,UAAM,QAAQ,KAAK,KAAG,OAAM;AAC5B,UAAM,QAAQ,KAAK,MAAM;AACzB,UAAM,QAAQ,KAAK,MAAM;AACzB,UAAM,QAAQ,KAAK,MAAM;AAEzB,UAAM,SAAQ,KAAA,KAAA,OAAA;AACd,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAK;AACpD,QAAI,EAAE,IAAI,EAAE,CAAA,IAAA,MAAA,OAAA,KAAA,OAAA,KAAA,QAAA;AAEZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;SASE,SAAY,KAAG,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAE,EAAI,CAAA;AACZ,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAEf,UAAM,KAAI,IAAK;AACf,QAAI,CAAC,IAAI,IAAE,KAAM;AACjB,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAC,IAAI,KAAE;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAI;AACb,QAAI,CAAC,IAAI,IAAE,KAAM;AACjB,QAAI,CAAC,IAAI,KAAE;AAEX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK;AACd,QAAI,CAAA,IAAG,KAAO;AACd,QAAI,EAAE,IAAI,IAAE,KAAA;AAEZ,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAEV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;;;;;SAiBE,UAAY,KAAI,MAAQ,OAAM,QAAA,KAAA,MAAA,MAAA,UAAA;AAC9B,UAAM,KAAK,KAAK,QAAM;AACtB,UAAM,KAAG,KAAO,MAAM;AACtB,QAAI,CAAC,IAAI,OAAE,IAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,OAAE,IAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,KAAK,QAAM,QAAU;AAC1B,QAAI,CAAA,KAAM,MAAG,UAAA;AACb,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAEV,QAAI,EAAA,IAAG;QACL,OAAM,QAAS,QAAQ,UAAK;AAC5B,YAAM,KAAK,KAAG,OAAQ;AACtB,UAAI,EAAE,KAAK,MAAM,QAAO;AACzB,UAAA,EAAA,IAAA,IAAA,MAAA,OAAA;WACC;AACA,UAAI,EAAE,IAAI;AACX,UAAA,EAAA,IAAA,KAAA;IACD;AACD,WAAA;EAED;;;;;;EAOA,OAAA,QAAA,KAAA,MAAA,OAAA,QAAA,KAAA,MAAA,MAAA,UAAA;AAAA,WAAA;EAAA;;;;;;;;;;;;;;;;;SAiBE,UAAY,KAAI,MAAQ,OAAM,QAAA,KAAA,MAAA,MAAA,UAAA;AAC9B,UAAM,KAAK,KAAK,QAAM;AACtB,UAAM,KAAG,KAAO,MAAM;AACtB,QAAI,CAAC,IAAI,OAAE,IAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,OAAE,IAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,KAAK,QAAM,QAAU;AAC1B,QAAI,CAAA,KAAM,MAAG,UAAA;AACb,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAEV,QAAI,EAAA,IAAG;QACL,OAAM,QAAS,QAAQ,UAAK;AAC5B,YAAM,KAAI,KAAM,OAAG;AACnB,UAAI,EAAE,IAAI,MAAM;AACjB,UAAA,EAAA,IAAA,MAAA,OAAA;WACC;AACA,UAAI,EAAE,IAAI;AACX,UAAA,EAAA,IAAA,CAAA;IACD;AACD,WAAA;EAED;;;;;;;;;;;;;;;SAeE,cAAgB,KAAK,MAAI,QAAU,MAAA,MAAA,UAAA;AACnC,UAAM,IAAI,IAAG,KAAO,IAAA,OAAA,CAAA;AACpB,QAAI,CAAC,IAAI,IAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAA,IAAG;QACL,OAAM,QAAS,QAAQ,UAAK;AAC5B,YAAM,KAAK,KAAG,OAAQ;AACtB,UAAI,EAAE,KAAK,MAAM,QAAO;AACzB,UAAA,EAAA,IAAA,IAAA,MAAA,OAAA;WACC;AACA,UAAI,EAAE,IAAI;AACX,UAAA,EAAA,IAAA,KAAA;IACD;AACD,WAAA;EAED;;;;;;EAOA,OAAA,YAAA,KAAA,MAAA,QAAA,MAAA,MAAA,UAAA;AAAA,WAAA;EAAA;;;;;;;;;;;;;;;SAeE,cAAgB,KAAK,MAAI,QAAU,MAAA,MAAA,UAAA;AACnC,UAAM,IAAI,IAAG,KAAO,IAAA,OAAA,CAAA;AACpB,QAAI,CAAC,IAAI,IAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAA,IAAG;QACL,OAAM,QAAS,QAAQ,UAAK;AAC5B,YAAM,KAAI,KAAM,OAAG;AACnB,UAAI,EAAE,IAAI,MAAM;AACjB,UAAA,EAAA,IAAA,MAAA,OAAA;WACC;AACA,UAAI,EAAE,IAAI;AACX,UAAA,EAAA,IAAA,CAAA;IACD;AACD,WAAA;EAED;;;;;;;;;;;;;;SAcE,2BAA4B,KAAA,KAAY,MAAK,KAAM;AACnD,UAAM,QAAO,KAAG,IAAQ,IAAE,YAAI,KAAc,KAAO,GAAI;AACvD,UAAM,UAAU,KAAK,IAAK,IAAI,cAAc,KAAK,KAAM,GAAK;AAC5D,UAAM,UAAQ,KAAO,IAAK,IAAI,cAAa,KAAG,KAAQ,GAAG;AACzD,UAAM,WAAS,KAAO,IAAA,IAAO,eAAa,KAAA,KAAA,GAAA;AAC1C,UAAM,SAAS,KAAO,UAAQ;AAE9B,UAAM,SAAS,KAAC,QAAA;AAChB,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,GAAC,UAAQ,YAAW,SAAa;AAC1C,QAAI,CAAA,KAAM,QAAO,WAAY,SAAA;AAC7B,QAAI,EAAE,IAAI,OAAK,OAAA;AACf,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,MAAI,QAAA,OAAA;AACd,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;;;;;SAgBE,QAAW,KAAK,MAAI,OAAS,QAAC,KAAA,MAAA,KAAA;AAC9B,UAAM,KAAK,KAAK,OAAM;AACtB,UAAM,KAAK,KAAK,SAAO;AACvB,UAAM,KAAK,KAAK,OAAC;AACjB,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI,IAAE;AACZ,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,KAAK,OAAM,SAAU;AAC3B,QAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,QAAI,EAAE,KAAK,MAAC,QAAA;AACZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;EAOA,OAAA,MAAA,KAAA,MAAA,OAAA,QAAA,KAAA,MAAA,KAAA;AAAA,WAAA;EAAA;;;;;;;;;;;;;;;;SAgBE,QAAW,KAAK,MAAI,OAAS,QAAC,KAAA,MAAA,KAAA;AAC9B,UAAM,KAAK,KAAK,OAAM;AACtB,UAAM,KAAK,KAAK,SAAO;AACvB,UAAM,KAAK,KAAK,OAAC;AACjB,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAE;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,KAAK,OAAM,SAAU;AAC3B,QAAI,EAAE,KAAI,MAAO,UAAG;AACpB,QAAI,EAAE,IAAI,OAAE;AACZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;;SAYE,OAAU,KAAG,KAAO,QAAA,IAAA;AACpB,UAAM,OAAO,IAAI,CAAC;AAClB,UAAM,OAAO,IAAI,CAAC;AAClB,UAAM,OAAM,IAAK,CAAC;AAClB,UAAM,MAAM,GAAG,CAAC;AAChB,UAAM,MAAM,GAAG,CAAC;AAChB,UAAM,MAAA,GAAO,CAAG;AAChB,UAAM,UAAU,OAAO,CAAC;AACxB,UAAM,UAAU,OAAO,CAAC;AAExB,UACE,UAAS,OAAO,CAAA;QAChB,KAAK,IAAI,OAAO,OAAO,IAAI,8BAC3B,KAAK,IAAI,OAAO,OAAO,IAAI,8BAE3B,KAAA,IAAO,OAAK,OAAS,IAAK,4BAAA;AAC3B,aAAA,MAAA,SAAA,GAAA;IAED;AACA,QAAI,KAAK,OAAO;AAChB,QAAI,KAAK,OAAO;AAEhB,QAAI,KAAG,OAAO;AACd,QAAE,MAAQ,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAA;AACV,UAAM;AACN,UAAM;AAEN,UAAM;AACN,QAAI,KAAK,MAAM,KAAK,MAAM;AAC1B,QAAI,KAAK,MAAM,KAAK,MAAM;AAC1B,QAAG,KAAG,MAAS,KAAG,MAAQ;AAC1B,UAAK,KAAM,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAA;QACT,CAAA,KAAM;AACN,WAAK;AACL,WAAK;AACN,WAAA;WACC;AACA,YAAM,IAAI;AACV,YAAM;AACN,YAAM;AACP,YAAA;IAED;AACA,QAAI,KAAK,KAAK,KAAK,KAAK;AACxB,QAAI,KAAK,KAAK,KAAK,KAAK;AAExB,QAAG,KAAG,KAAK,KAAO,KAAK;AACvB,UAAK,KAAM,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAA;QACT,CAAA,KAAM;AACN,WAAK;AACL,WAAK;AACN,WAAA;WACC;AACA,YAAM,IAAI;AACV,YAAM;AACN,YAAM;AACP,YAAA;IAED;AACA,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,QAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,QAAI,EAAE,IAAI,EAAE,KAAA,OAAA,KAAA,OAAA,KAAA;AAEZ,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;;;;SAWE,SAAU,KAAO,KAAG,QAAA,IAAA;AACpB,UAAM,OAAO,IAAI,CAAC;AAClB,UAAM,OAAO,IAAI,CAAC;AAClB,UAAM,OAAM,IAAK,CAAC;AAClB,UAAM,MAAM,GAAG,CAAC;AAChB,UAAM,MAAM,GAAG,CAAC;AAEhB,UAAM,MAAG,GAAI,CAAG;AAChB,QAAI,KAAK,OAAO,OAAO,CAAC;AACxB,QAAI,KAAK,OAAO,OAAO,CAAC;AAExB,QAAI,KAAG,OAAQ,OAAO,CAAA;AACtB,QAAI,MAAM,KAAI,KAAA,KAAA,KAAA,KAAA;QACZ,MAAM,GAAC;AACP,YAAM,IAAI,KAAA,KAAA,GAAA;AACV,YAAM;AACN,YAAM;AACP,YAAA;IAED;AACA,QAAI,KAAK,MAAM,KAAK,MAAM;AAC1B,QAAI,KAAK,MAAM,KAAK,MAAM;AAE1B,QAAG,KAAK,MAAK,KAAK,MAAQ;AAC1B,UAAI,KAAO,KAAG,KAAA,KAAA,KAAA;QACZ,MAAM,GAAC;AACP,YAAM,IAAI,KAAA,KAAA,GAAA;AACV,YAAM;AACN,YAAM;AACP,YAAA;IAED;AACA,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAE,KAAA,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAA,IAAG;AACP,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAA,EAAA,IAAU;AACX,WAAA;EAED;;;;;;;;SAQE,KAAO,GAAI;WAEN,KAAK,KAAG,EAAA,CAAA,IAAA,EAAA,CAAA,IACX,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAC,IAAI,EAAE,CAAC,IACV,EAAE,CAAA,IAAG,EAAI,CAAC,IACV,EAAE,EAAE,IAAI,EAAE,EAAE,IACZ,EAAE,EAAE,IAAI,EAAE,EAAE,IACZ,EAAE,EAAE,IAAI,EAAE,EAAE,IACZ,EAAE,EAAE,IAAI,EAAE,EAAE,IACZ,EAAE,EAAE,IAAI,EAAE,EAAE,IAEf,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAA,IAAG,EAAI,CAAC,IAAG,EAAG,CAAC;AACnB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAA,EAAA,IAAU,EAAC,EAAA,IAAA,EAAA,EAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAA,IAAG,EAAI,CAAC,IAAG,EAAG,CAAC;AACnB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,QAAA,EAAA,IAAU,EAAC,EAAA,IAAA,EAAA,EAAA;AACZ,WAAA;EACD;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUK,eAAe,KAAA,GAAA,GAAA;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAA,IAAG,EAAI,CAAC,IAAG;AACf,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,QAAA,EAAA,IAAU,EAAC,EAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,qBAAoB,KAAM,GAAA,GAAA,OAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAA,IAAG,EAAI,CAAC,IAAG,EAAG,CAAC,IAAI;AACvB,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI;AAC1B,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI;AAC1B,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI;AAC1B,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI;AAC1B,QAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI;AAC1B,QAAA,EAAA,IAAU,EAAC,EAAA,IAAA,EAAA,EAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,YACM,GAAM,GAAG;WACT,EAAA,CAAA,MAAS,EAAA,CAAA,KACb,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAA,MAAG,EAAM,CAAC,KACZ,EAAE,EAAE,MAAM,EAAE,EAAE,KACd,EAAE,EAAE,MAAM,EAAE,EAAE,KACd,EAAE,EAAE,MAAM,EAAE,EAAE,KACd,EAAE,EAAE,MAAM,EAAE,EAAE,KACd,EAAE,EAAE,MAAM,EAAE,EAAE,KAEjB,EAAA,EAAA,MAAA,EAAA,EAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAI,CAAC;AACd,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAEhB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAI,CAAC;AACd,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAChB,UAAM,MAAM,EAAE,EAAE;AAEhB,UAAA,MACM,EAAC,EAAG;WACJ,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAI,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC1E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KACzE,KAAK,IAAI,KAAG,EAAG,KAAI,6BAAe,KAAG,IAAK,GAAK,KAAE,IAAK,EAAI,GAAG,KAAG,IAAK,EAAG,CAAC,KACzE,KAAK,IAAI,MAAM,GAAG,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAC7E,KAAK,IAAI,MAAM,GAAG,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAC7E,KAAK,IAAI,MAAM,GAAG,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAC7E,KAAK,IAAI,MAAM,GAAG,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAC7E,KAAK,IAAI,MAAM,GAAG,KAAK,6BAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAEhF,KAAA,IAAA,MAAA,GAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,GAAA,GAAA,KAAA,IAAA,GAAA,CAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;;AAGH;AAGA,KAAA,UAAA,MAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;AAChB,KAAK,MAAA,KAAU;AACf,KAAK,UAAA,KAAc;AACnB,KAAK,cAAa,KAAA;;;;AC18EjB,IAAAC,iBAAA;AAIC,IAAA,OAAA,MAAA,cAAA,aAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE,GAAA;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAO,MAAM,UAAI;AAClB,gBAAA,CAAA,GAAA,GAAA,CAAA,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACD;MACD;;AACY,cAAM,CAAA;AACnB;IACF;EAED;;;;;;;;;;EAYA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;EAQA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;;MAQE,YAAU;AACV,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAA,IAAO,KAAK,CAAI;AACjB,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;EACD;;;;EAKA,IAAA,MAAA;AAAA,WAAA,KAAA;EAAA;;;;;MAKE,mBAAkB;AAClB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAA,IAAQ,KAAO,CAAC;AACjB,WAAA,IAAA,IAAA,IAAA,IAAA,IAAA;EACD;;;;EAKA,IAAA,SAAA;AAAA,WAAA,KAAA;EAAA;;;;;MAKE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAI;AACJ,SAAA,IAAO,CAAA;AACR,WAAA;EAED;;;;;;;;MAQE,GAAA;AACA,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;;;;;WAQO,GAAE;AACP,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;WAQO,GAAE;AACP,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,GAAM;AACN,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;QAQE,GAAK;AACL,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;;;cASS,GAAI,OAAO;AAClB,SAAK,CAAC,KAAK,EAAE,CAAC,IAAI;AAClB,SAAK,CAAC,KAAK,EAAE,CAAC,IAAI;AAClB,SAAA,CAAA,KAAW,EAAC,CAAA,IAAA;AACb,WAAA;EAED;;;;;;;;WAQE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,CAAA;EACD;;;;EAKA,KAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;kBAQc,GAAA;AACb,WAAA,MAAA,gBAAA,MAAA,CAAA;EACD;;;;EAKA,QAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;WAOO;AACL,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;WAOO;AACL,SAAK,CAAC,IAAI,IAAM,KAAK,CAAC;AACtB,SAAK,CAAC,IAAI,IAAM,KAAK,CAAC;AACtB,SAAA,CAAA,IAAO,IAAK,KAAA,CAAA;AACb,WAAA;EAED;;;;;;;QAOE;AACA,SAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC1B,SAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC1B,SAAA,CAAA,IAAO,KAAK,IAAA,KAAA,CAAA,CAAA;AACb,WAAA;EAED;;;;;;;;MAQE,GAAA;AACD,WAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;cAOS;AACR,WAAA,MAAA,UAAA,MAAA,IAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;SAQE,UAAa,GAAA;AACb,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAA,IAAO,EAAA,CAAI;AACZ,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;EACD;;;;;EAKA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;EAUA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;EAOA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUE,WAAW,GAAM,GAAG,GAAG;AACxB,WAAA,IAAA,MAAA,GAAA,GAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,IAAG,KAAK,GAAA,GAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAIuG,OAAC,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA,CAAA,GAAA,GAAA,CAAA;EAAA;;;;;;;;;;SAYnG,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA,CAAA,GAAA,GAAA,CAAA;EAAA;;;;;;;;;;SAUK,OAAO,KAAG,GAAK,GAAG;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAIwG,OAAC,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA,CAAA,GAAA,GAAA,CAAA;EAAA;;;;;;;;;SAWpG,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,QAAA,CAAA,IAAO,KAAI,KAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,MAAM,KAAK,GAAA;AACd,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAA,CAAA,IAAO,KAAI,MAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAG,GAAK,GAAI;AAClB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAG,GAAK,GAAI;AAClB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;;;;;;;;;;;;SAyBK,MAAM,KAAI,GAAG,OAAM;AACtB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,YAAU,KAAO,GAAG,GAAA,OAAM;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,SAAY,GAAE,GAAI;AAClB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAA,IAAO,EAAK,CAAA,IAAK,EAAC,CAAA;AACnB,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;EACD;;;;EAKA,OAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASE,gBAAmB,GAAG,GAAA;AACtB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAA,IAAQ,EAAI,CAAA,IAAI,EAAG,CAAC;AACrB,WAAA,IAAA,IAAA,IAAA,IAAA,IAAA;EACD;;;;EAKA,OAAA,QAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,cAAe,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAA,IAAQ,EAAI,CAAA;AACb,WAAA,IAAA,IAAA,IAAA,IAAA,IAAA;EACD;;;;EAKA,OAAA,OAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASK,OAAO,KAAK,GAAA;AACf,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAA,CAAA,IAAO,CAAG,EAAC,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,QAAM,KAAO,GAAG;AACnB,QAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,QAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,QAAA,CAAA,IAAO,IAAI,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,IAAG,KAAG,GAAK;AACd,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AACtB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AACtB,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,UAAa,KAAE,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAI,IAAM,EAAC,CAAA;AACX,QAAI,MAAM,IAAI,IAAA,IAAA,IAAA,IAAA;QACZ,MAAA,GAAA;AAED,YAAA,IAAA,KAAA,KAAA,GAAA;IACD;AACA,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,IAAO,GAAG,GAAC;AACZ,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;;;SAUE,MAAQ,KAAM,GACZ,GAAE;AAEJ,UAAM,KAAK,EAAE,CAAC,GACZ,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AAEV,UAAM,KAAK,EAAA,CAAG,GAAE,KAAK,EAAG,CAAA,GAAG,KAAA,EAAA,CAAA;AAC3B,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,KAAQ,KAAK,GAAG,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,QAAA,CAAA,IAAO,KAAI,KAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,MAAM,KAAQ,GAAA,GAAK,GAAI;AACvB,UAAM,QAAQ,KAAG,KAAK,KAAI,IAAO,KAAA,IAAA,MAAA,IAAA,GAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AAEjC,UAAM,WAAS,KAAK,IAAM,KAAK;AAC/B,UAAM,SAAS,KAAK,KAAK,IAAG,KAAM,KAAG,IAAA;AACrC,UAAM,SAAS,KAAK,IAAE,IAAG,KAAM,IAAM;AACrC,QAAI,CAAC,IAAI,SAAS,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC;AACrC,QAAI,CAAC,IAAI,SAAS,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC;AAErC,QAAA,CAAA,IAAO,SAAI,EAAA,CAAA,IAAA,SAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaE,QAAM,KAAA,GAAY,GAAI,GAAG,GAAE,GAAA;AAC3B,UAAM,eAAU,IAAA;AAChB,UAAM,UAAU,gBAAgB,IAAI,IAAE,KAAK;AAC3C,UAAM,UAAU,gBAAgB,IAAI,KAAG;AACvC,UAAM,UAAU,gBAAgB,IAAI;AAEpC,UAAM,UAAU,gBAAc,IAAG,IAAO;AACxC,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AAEnE,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,UAAA,EAAA,CAAA,IAAA,UAAA,EAAA,CAAA,IAAA,UAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaE,OAAM,KAAA,GAAA,GAAa,GAAI,GAAI,GAAC;AAC5B,UAAM,gBAAA,IAAA;AACN,UAAM,wBAAqB,gBAAA;AAC3B,UAAM,eAAU,IAAA;AAChB,UAAM,UAAU,wBAAQ;AACxB,UAAM,UAAU,IAAI,IAAA;AACpB,UAAM,UAAU,IAAA,eAAiB;AAEjC,UAAM,UAAU,eAAc;AAC9B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AAEnE,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,UAAA,EAAA,CAAA,IAAA,UAAA,EAAA,CAAA,IAAA,UAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAgCE,cACG,KAAK,GAAE,GACP;AACH,UAAM,IAAI,EAAE,CAAC,GAAE,IAAI,EAAG,CAAC,GAAG,IAAI,EAAA,CAAG;AACjC,UAAM,IAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAC,IAAI,IAAK,EAAE,EAAE,KAAK;AACtD,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAA,IAAG,IAAI,EAAI,EAAC,KAAI;AAClD,QAAA,CAAA,KAAU,EAAC,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,cACG,KAAO,GACP,GAAG;AACN,QAAI,IAAE,EAAI,CAAA,GAAI,IAAG,EAAG,CAAC,GAAG,IAAI,EAAA,CAAG;AAC/B,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,QAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,QAAA,CAAA,IAAO,IAAI,EAAA,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,cAAA,KAAA,GAAA,GAAA;AAEA,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC,IAAC;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAA,IAAA,EAAA,CAAA;AAGA,UAAM,MAAO,KAAK,IAAI,KAAK;AAC3B,UAAM,MAAO,KAAK,IAAI,KAAK;AAC3B,UAAA,MAAA,KAAA,IAAA,KAAA;AAGA,UAAM,QAAQ,KAAK,MAAM,KAAK,OAAO;AACrC,UAAM,QAAQ,KAAK,MAAM,KAAK,OAAO;AACrC,UAAA,QAAA,KAAA,MAAA,KAA6B,OAAA;AAG7B,QAAI,CAAC,IAAI,IAAK,MAAI,KAAM;AACxB,QAAI,CAAC,IAAI,IAAK,MAAI,KAAM;AACxB,QAAA,CAAA,IAAO,IAAI,MAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,QAAW,KAAK,GAAA,GAAA,KAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KAAA,EAAA,CAAA;AAEA,UAAM,KAAK,EAAE,CAAC,IAAI;AAElB,UAAA,KAAA,EAAA,CAAA,IAAkB;AAGlB,QAAI,CAAC,IAAI,EAAC,CAAE;AACZ,QAAI,CAAC,IAAK,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK,KAAK,IAAI,GAAG,IAAK;AAErD,QAAA,CAAA,IAAU,KAAC,KAAA,IAAA,GAAA,IAAA,KAAA,KAAA,IAAA,GAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,QAAW,KAAK,GAAA,GAAA,KAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KAAA,EAAA,CAAA;AAEA,UAAM,KAAK,EAAE,CAAC,IAAI;AAElB,UAAA,KAAA,EAAA,CAAA,IAAkB;AAGlB,QAAI,CAAC,IAAK,KAAI,KAAA,IAAA,GAAA,IAAA,KAAA,KAAA,IAAA,GAAA,IAAA;AACd,QAAI,CAAC,IAAI,EAAC,CAAE;AAEZ,QAAA,CAAA,IAAU,KAAC,KAAA,IAAA,GAAA,IAAA,KAAA,KAAA,IAAA,GAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,QAAW,KAAK,GAAA,GAAA,KAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KAAA,EAAA,CAAA;AAEA,UAAM,KAAK,EAAE,CAAC,IAAI;AAElB,UAAA,KAAA,EAAA,CAAA,IAAkB;AAGlB,QAAI,CAAC,IAAK,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK,KAAK,IAAI,GAAG,IAAK;AACrD,QAAI,CAAC,IAAK,KAAI,KAAA,IAAA,GAAA,IAAA,KAAA,KAAA,IAAA,GAAA,IAAA;AAEd,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;SAOE,MAAQ,GAAI,GAAG;AACf,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAG,CAAA;AACZ,UAAM,MAAM,KAAG,MAAO,KAAK,KAAK,KAAI,KAAO,KAAA,OAAA,KAAA,KAAA,KAAA,KAAA,KAAA,GAAA;AAC3C,UAAA,SAAY,OAAU,MAAI,IAAK,GAAG,CAAC,IAAA;AACpC,WAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,QAAA,EAAA,GAAA,CAAA,CAAA;EAED;;;;;;;;SAQK,KAAG,KAAO;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;EAED;;;;;;;;;SASE,YAAW,GAAO,GAAE;AACrB,WAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAM,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC5E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAE9E,KAAA,IAAA,KAAA,EAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;EACF;AAED;AAEA,KAAK,UAAU,MAAM,KAAK,UAAU;AACpC,KAAK,UAAU,MAAM,KAAK,UAAU;AACpC,KAAK,UAAU,MAAI,KAAO,UAAU;AACpC,KAAK,UAAU,OAAO,KAAG,UAAK;AAE9B,KAAA,UAAA,UAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;AAChB,KAAK,MAAM,KAAK;AAChB,KAAK,MAAI,KAAO;AAChB,KAAK,OAAO,KAAG;AACf,KAAK,UAAS,KAAK;AACnB,KAAK,SAAM,KAAK;AAChB,KAAK,MAAM,KAAG;AACd,KAAK,SAAM,KAAK;;;;ACpoChB,IAAAC,iBAAA;AAIE,IAAA,OAAA,MAAA,cAAA,aAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE,GAAA;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAO,MAAM,UAAO;AACrB,gBAAA,CAAA,GAAA,GAAA,GAAA,CAAA,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACD;MACD;;AACY,cAAM,CAAA;AACnB;IACF;EAED;;;;;;;;;;EAYA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;EAQA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;;MAQE,YAAU;AACV,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAA,IAAO,KAAK,CAAI;AACjB,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;EAED;;;;EAKA,IAAA,MAAA;AAAA,WAAA,KAAA;EAAA;;;;;MAKE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAA;AACA,UAAA,IAAO,CAAI;AACZ,WAAA;EAED;;;;;;;;MAQE,GAAA;AACA,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;;;;;WAQO,GAAE;AACP,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;WAQO,GAAE;AACP,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,GAAM;AACN,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;QAQE,GAAK;AACL,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;;;cASS,GAAI,OAAO;AAClB,SAAK,CAAC,KAAK,EAAE,CAAC,IAAI;AAClB,SAAK,CAAC,KAAK,EAAE,CAAC,IAAI;AAClB,SAAK,CAAC,KAAK,EAAE,CAAC,IAAI;AAClB,SAAA,CAAA,KAAW,EAAC,CAAA,IAAA;AACb,WAAA;EAED;;;;;;;;WAQE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,CAAA;EACD;;;;EAKA,KAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;kBAQc,GAAA;AACb,WAAA,MAAA,gBAAA,MAAA,CAAA;EACD;;;;EAKA,QAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;WAOO;AACL,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;WAOO;AACL,SAAK,CAAC,IAAI,IAAM,KAAK,CAAC;AACtB,SAAK,CAAC,IAAI,IAAM,KAAK,CAAC;AACtB,SAAK,CAAC,IAAI,IAAM,KAAK,CAAC;AACtB,SAAA,CAAA,IAAO,IAAK,KAAA,CAAA;AACb,WAAA;EAED;;;;;;;QAOE;AACA,SAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC1B,SAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC1B,SAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC1B,SAAA,CAAA,IAAO,KAAK,IAAA,KAAA,CAAA,CAAA;AACb,WAAA;EAED;;;;;;;;MAQE,GAAA;AACD,WAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;cAOS;AACR,WAAA,MAAA,UAAA,MAAA,IAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;;;;SAWE,WAAW,GAAM,GAAG,GAAG,GAAG;AAC3B,WAAA,IAAA,MAAA,GAAA,GAAA,GAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;SAYK,IAAG,KAAK,GAAA,GAAA,GAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUK,OAAO,KAAG,GAAK,GAAG;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,QAAA,CAAA,IAAO,KAAI,KAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,MAAM,KAAK,GAAA;AACd,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAA,CAAA,IAAO,KAAI,MAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAG,GAAK,GAAI;AAClB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAG,GAAK,GAAI;AAClB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,MAAM,KAAK,GAAA;AACd,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAA,CAAA,IAAO,KAAI,MAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,MAAM,KAAI,GAAG,OAAM;AACtB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,YAAU,KAAO,GAAG,GAAA,OAAM;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,SAAY,GAAE,GAAI;AAClB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAA,IAAO,EAAK,CAAA,IAAK,EAAE,CAAA;AACpB,WAAA,KAAA,MAAA,GAAA,GAAA,GAAA,CAAA;EACD;;;;;EAMA,OAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASE,gBAAmB,GAAG,GAAA;AACtB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAA,IAAQ,EAAI,CAAA,IAAI,EAAG,CAAC;AACrB,WAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;EACD;;;;;EAMA,OAAA,QAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,UAAa,GAAE;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAA,IAAO,EAAK,CAAA;AACb,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;EACD;;;;;EAMA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;EAQA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;EAOA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,cAAe,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAA,IAAQ,EAAI,CAAA;AACb,WAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;EAED;;;;;EAMA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASK,OAAO,KAAK,GAAA;AACf,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAA,CAAA,IAAO,CAAG,EAAC,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,QAAM,KAAO,GAAG;AACnB,QAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,QAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,QAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,QAAA,CAAA,IAAO,IAAI,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,IAAG,KAAG,GAAK;AACd,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AACtB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AACtB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AACtB,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,UAAa,KAAE,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAI,IAAM,EAAC,CAAA;AACX,QAAI,MAAM,IAAI,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;QACZ,MAAM,GAAC;AACR,YAAA,IAAA,KAAA,KAAA,GAAA;IACD;AACA,QAAI,CAAC,IAAI,IAAI;AACb,QAAI,CAAC,IAAI,IAAI;AACb,QAAI,CAAC,IAAI,IAAI;AACb,QAAA,CAAA,IAAO,IAAI;AACZ,WAAA;EAED;;;;;;;;;SASE,IAAO,GAAG,GAAC;AACZ,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;;;;SAWE,MAAO,KAAO,GAAG,GAAG,GAAC;AACrB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,UAAM,IAAI,EAAE,CAAC,IAAE,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AAEb,UAAM,IAAI,EAAA,CAAG;AACb,QAAI,CAAC,IAAI,IAAG,IAAK,IAAI,IAAI,IAAI;AAC7B,QAAI,CAAC,IAAI,EAAC,IAAI,KAAI,IAAI,IAAI,IAAK;AAC/B,QAAI,CAAC,IAAI,IAAG,IAAK,IAAI,IAAI,IAAI;AAE7B,QAAA,CAAA,IAAO,EAAI,IAAA,KAAA,IAAA,IAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,KAAQ,KAAK,GAAG,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,QAAA,CAAA,IAAO,KAAI,KAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6CE,cAAe,KAAA,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAA,IAAG,IAAI,EAAI,EAAC,IAAG;AAChD,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,cAAe,KAAA,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAE,EAAI,CAAC;AACb,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAA,KAAA,EAAA,CAAA;AAEA,UAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,UAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAClC,UAAM,KAAK,KAAG,IAAI,KAAK,IAAI,KAAK;AAEhC,UAAA,KAAA,CAAA,KAAA,IAAA,KAAA,IAAA,KAAkC;AAElC,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,QAAI,CAAC,IAAI,KAAK,KAAA,KAAA,CAAA,KAAA,KAAA,CAAA,KAAA,KAAA,CAAA;AACd,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQK,KAAG,KAAO;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;EAED;;;;;;;;;SASE,YAAW,GAAO,GAAE;AACrB,WAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAM,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC5E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAC3E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAE9E,KAAA,IAAA,KAAA,EAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;EACF;AAED;AAEA,KAAK,UAAU,MAAM,KAAK,UAAU;AACpC,KAAK,UAAU,MAAM,KAAK,UAAU;AACpC,KAAK,UAAU,MAAI,KAAO,UAAU;AACpC,KAAK,UAAU,OAAO,KAAG,UAAK;AAE9B,KAAA,UAAA,UAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;AAChB,KAAK,MAAM,KAAK;AAChB,KAAK,MAAI,KAAO;AAChB,KAAK,OAAO,KAAG;AACf,KAAK,UAAS,KAAK;AACnB,KAAK,SAAM,KAAK;AAChB,KAAK,MAAM,KAAG;AACd,KAAK,SAAM,KAAK;;;;AC//BhB,IAAAC,iBAAA;AAIE,IAAO,OAAP,MAAO,cAAA,aAA4B;EAEnC,OAAA,uBAAA;;;EAIA,OAAO,aAAa,IAAI,aAAa,CAAC;EACtC,OAAO,aAAY,IAAI,aAAc,CAAC;EAEtC,OAAO,YAAY,IAAI,aAAa,CAAC;EACrC,OAAO,YAAY,IAAG,aAAI,CAAA;EAC1B,OAAO,eAAe,IAAI,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC;EAEhD,OAAA,eAAA,IAAA,aAAA,CAAA,GAAA,GAAA,CAAA,CAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE,GAAA;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAO,MAAM,UAAO;AACrB,gBAAA,CAAA,GAAA,GAAA,GAAA,CAAA,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACD;MACD;;AAEE,cAAM,CAAC;AACP,aAAA,CAAM,IAAA;AACT;IACF;EAED;;;;;;;;;;EAYA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;;MAQE,YAAU;AACV,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAA,IAAO,KAAK,CAAI;AACjB,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;EAED;;;;EAKA,IAAA,MAAA;AAAA,WAAA,KAAA;EAAA;;;;;MAKE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAA;AACA,UAAA,IAAO,CAAI;AACZ,WAAA;EAED;;;;;;;aAOS;AACP,SAAK,CAAC,IAAI;AACV,SAAK,CAAC,IAAI;AACV,SAAK,CAAC,IAAI;AACV,SAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;WAQE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,MAAA,CAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;UAQE,KAAO;AACR,WAAA,MAAA,QAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;UAQE,KAAO;AACR,WAAA,MAAA,QAAA,MAAA,MAAA,GAAA;EAED;;;;;;;;UAQE,KAAO;AACR,WAAA,MAAA,QAAA,MAAA,MAAA,GAAA;EAED;;;;;;;WAOE;AACD,WAAA,MAAA,OAAA,MAAA,IAAA;EAED;;;;;;;;;;QAUE,OAAO;AACP,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;;MAQE,GAAA;AACD,WAAA,MAAA,IAAA,MAAA,CAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQK,SAAQ,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;SAWK,aAAa,KAAA,MAAA,KAAA;AAChB,UAAM,MAAI;AACV,UAAM,IAAI,KAAG,IAAM,GAAE;AACrB,QAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,QAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,QAAI,CAAC,IAAI,IAAI,KAAK,CAAA;AAClB,QAAA,CAAA,IAAO,KAAI,IAAA,GAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;;;;SAgBE,aAAgB,UAAU,GAAC;AAC3B,UAAM,MAAI,KAAK,KAAO,EAAA,CAAG,CAAA,IAAK;AAC9B,UAAK,IAAG,KAAA,IAAW,MAAG,CAAA;QACpB,IAAA,4BAAiB;AACjB,eAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,eAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACtB,eAAA,CAAA,IAAA,EAAA,CAAA,IAAA;WACC;AAEA,eAAS,CAAC,IAAI;AACd,eAAS,CAAC,IAAI;AACf,eAAA,CAAA,IAAA;IACD;AACD,WAAA;EAED;;;;;;;;;SASE,SAAM,GAAA,GAAU;AAEhB,UAAA,aAAkB,MAAG,IAAA,GAAU,CAAA;AAChC,WAAA,KAAA,KAAA,IAAA,aAAA,aAAA,CAAA;EAED;;;;;;;;;;SAUE,SAAY,KAAI,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,QAAQ,KAAA,GAAA,KAAA;AAEX,WAAM;AACN,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAA;AACX,UAAM,KAAK,KAAK,IAAI,GAAG;AAEvB,UAAM,KAAK,KAAK,IAAG,GAAE;AACrB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,QAAQ,KAAA,GAAA,KAAA;AAEX,WAAM;AACN,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAA;AACX,UAAM,KAAK,KAAK,IAAI,GAAG;AAEvB,UAAM,KAAK,KAAK,IAAG,GAAE;AACrB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,QAAQ,KAAA,GAAA,KAAA;AAEX,WAAM;AACN,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAA;AACX,UAAM,KAAK,KAAK,IAAI,GAAG;AAEvB,UAAM,KAAK,KAAK,IAAG,GAAE;AACrB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,WAAc,KACX,GAAK;AAGR,UAAM,IAAI,EAAC,CAAA,GAAA,IAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,IAAO,KAAK,GAAE;AAKd,UAAM,IAAI,EAAA,CAAA,GAAK,IAAK,EAAC,CAAA,GAAI,IAAI,EAAG,CAAC,GAAG,IAAI,EAAE,CAAC;AAC3C,UAAM,IAAE,KAAO,KAAK,IAAG,IAAA,IAAA,IAAA,IAAA,CAAA;AACvB,UAAM,KAAK,KAAK,IAAG,CAAE;AAErB,UAAM,IAAI,IAAI,IAAC,KAAA,KAAA,IAAA,CAAA,IAAA,IAAA;AACf,QAAI,CAAC,IAAI,IAAI;AACb,QAAI,CAAC,IAAI,IAAI;AACb,QAAI,CAAC,IAAI,IAAE;AAEX,QAAA,CAAA,IAAO,KAAI,KAAA,IAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,GAAM,KAAK,GAAG;AAKd,UAAM,IAAI,EAAA,CAAA,GAAK,IAAK,EAAC,CAAA,GAAI,IAAI,EAAG,CAAC,GAAG,IAAI,EAAE,CAAC;AAC3C,UAAM,IAAI,KAAK,KAAG,IAAK,IAAK,IAAI,IAAE,IAAM,CAAC;AAEzC,UAAM,IAAI,IAAI,IAAC,KAAA,MAAA,GAAA,CAAA,IAAA,IAAA;AACf,QAAI,CAAC,IAAI,IAAI;AACb,QAAI,CAAC,IAAI,IAAI;AACb,QAAI,CAAC,IAAI,IAAG;AAEZ,QAAA,CAAA,IAAO,MAAI,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,IAAO,KAAI,GAAI,GAAC;AAChB,UAAK,GAAA,KAAM,CAAG;AACd,UAAK,MAAI,KAAK,KAAK,CAAA;AACnB,UAAA,IAAO,KAAI,GAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,MAAA,KAAc,GAAA,GAAA,GAAA;AAMd,UAAM,KAAK,EAAE,CAAA,GACT,KAAK,EAAE,CAAA,GACP,KAAK,EAAE,CAAA,GACP,KAAK,EAAE,CAAC;AAEZ,QAAI,KAAA,EAAe,CAAA,GAAA,KAAA,EAAA,CAAA,GAAA,KAAA,EAAA,CAAA,GAAA,KAAA,EAAA,CAAA;AACnB,QAAI;AAEJ,QAAA;AAEA,QAAA,QAAA,KAAA,KAAA,KAAA,KAA8B,KAAA,KAAA,KAAA;QAE5B,QAAQ,GAAC;AACT,cAAQ,CAAC;AACT,WAAK,CAAC;AACN,WAAK,CAAC;AACN,WAAK,CAAC;AACP,WAAA,CAAA;IACD;QAEE,IAAA,QAAA,4BAAwB;AAExB,YAAM,QAAQ,KAAK,KAAI,KAAM;AAC7B,YAAM,QAAQ,KAAK,IAAG,KAAK;AAC3B,eAAS,KAAK,KAAK,IAAG,KAAM,KAAG,IAAM;AACtC,eAAA,KAAA,IAAA,IAAA,KAAA,IAAA;WACC;AAGA,eAAS,IAAE;AACZ,eAAA;IACD;AAEA,QAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,QAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,QAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAEhC,QAAA,CAAA,IAAO,SAAI,KAAA,SAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAiCE,OAAQ,KAAO,GACb;AAGF,UAAM,KAAG,EAAG,CAAE,GAAG,KAAK,EAAE,CAAA,GAAG,KAAK,EAAE,CAAA,GAAK,KAAK,EAAA,CAAG;AAC/C,UAAM,MAAM,KAAG,KAAM,KAAM,KAAK,KAAG,KAAA,KAAA;AAEnC,UAAA,SAAA,MAAA,IAAA,MAAA;AAGA,QAAI,CAAC,IAAI,CAAC,KAAK;AACf,QAAI,CAAC,IAAI,CAAC,KAAK;AACf,QAAI,CAAC,IAAI,CAAA,KAAK;AACd,QAAA,CAAA,IAAO,KAAI;AACZ,WAAA;EAED;;;;;;;;;;SAUK,UAAU,KAAE,GAAA;AACf,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;SAYE,SAAA,KAAA,GAAA;AAGA,UAAI,SAAc,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;AAElB,QAAI;QACF,SAAA,GAAA;AAEA,cAAM,KAAM,KAAG,SAAM,CAAA;AACrB,UAAA,CAAK,IAAG,MAAM;AACd,cAAM,MAAQ;AACd,UAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,UAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AAC1B,UAAA,CAAA,KAAA,EAAA,CAAA,IAAA,EAAA,CAAA,KAAA;WACC;AAEA,UAAI,IAAI;UAAS,EAAC,CAAA,IAAK,EAAA,CAAA;AACnB,YAAI;UAAiB,EAAC,CAAA,IAAK,EAAA,IAAA,IAAA,CAAA;AAC3B,YAAI;AACR,UAAI,KAAK,IAAI,KAAK;AAElB,UAAA,KAAQ,IAAK,KAAK;AAClB,cAAM,KAAM,KAAG,EAAK,IAAC,IAAA,CAAA,IAAA,EAAA,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,IAAA,CAAA,IAAA,CAAA;AACrB,UAAA,CAAK,IAAG,MAAM;AACd,cAAM,MAAO;AACb,UAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,UAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AAC1C,UAAA,CAAA,KAAA,EAAA,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,IAAA,CAAA,KAAA;IAED;AACD,WAAA;EAED;;;;;;;;;;;;SAYE,UAAa,KAAI,GAAG,GAAG,GAAI,QAAO,MAAM,sBAAA;AACxC,QAAC,YAAc,MAAA,KAAA,KAAA;AACf,SAAK;AACL,SAAK;AAEL,SAAI;AACJ,QAAI,KAAK,KAAK,IAAI,CAAC;AACnB,QAAI,KAAK,KAAK,IAAI,CAAC;AACnB,QAAI,KAAK,KAAK,IAAI,CAAC;AACnB,QAAI,KAAK,KAAK,IAAI,CAAC;AACnB,QAAI,KAAK,KAAK,IAAI,CAAC;AAEnB,QAAA,KAAQ,KAAK,IAAG,CAAA;YACd,OAAU;WACR;AACA,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAA,CAAA,IAAM,KAAA,KAAA,KAAA,KAAA,KAAA;AAER;WACE;AACA,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAA,CAAA,IAAM,KAAA,KAAA,KAAA,KAAA,KAAA;AAER;WACE;AACA,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAA,CAAA,IAAM,KAAA,KAAA,KAAA,KAAA,KAAA;AAER;WACE;AACA,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAA,CAAA,IAAM,KAAA,KAAA,KAAA,KAAA,KAAA;AAER;WACE;AACA,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAA,CAAA,IAAM,KAAA,KAAA,KAAA,KAAA,KAAA;AAER;WACE;AACA,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,YAAA,CAAA,IAAM,KAAA,KAAA,KAAA,KAAA,KAAA;AAER;;AAED,cAAA,IAAA,MAAA,yBAAA,KAAA;IAED;AACD,WAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;;;;SAWE,WAAW,GAAM,GAAG,GAAG,GAAG;AAC3B,WAAA,IAAA,MAAA,GAAA,GAAA,GAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;;EAaA,OAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;EAWA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUK,MAAM,KAAI,GAAG,OAAM;AACtB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,IAAO,GAAG,GAAC;AACZ,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;;;;EAYA,OAAA,KAAA,KAAA,GAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;EASA,OAAA,UAAA,GAAA;AAAA,WAAA;EAAA;;;;;EAMA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;EAQA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;EAOA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;EASA,OAAA,cAAA,GAAA;AAAA,WAAA;EAAA;;;;;EAMA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;EAUA,OAAA,UAAA,KAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;EAUA,OAAA,YAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;EAUA,OAAA,OAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;;;;SAaE,WAAc,KAAK,GAAG,GAAG;AACzB,QAAI,MAAM,KAAC,IAAQ,GAAG,CAAA;QACpB,MAAK,WAAW;AAChB,WAAI,MAAK,MAAI,WAAc,MAAI,cAAQ,CAAA;UAAE,KAAK,IAAA,MAAM,SAAK,IAAW;AAChE,aAAC,MAAU,MAAK,WAAW,MAAK,cAAW,CAAA;AAC/C,WAAK,UAAA,MAAa,WAAU,MAAA,SAAgB;AAC5C,YAAA,aAAW,KAAA,MAAA,WAAA,KAAA,EAAA;AACZ,aAAA;eACM,MAAM,UAAA;AACX,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAA,CAAA,IAAO;AACR,aAAA;WACC;AACA,WAAK,MAAI,MAAK,WAAa,GAAA,CAAA;AAC3B,UAAI,CAAC,IAAI,MAAK,UAAU,CAAC;AACzB,UAAI,CAAC,IAAI,MAAK,UAAU,CAAC;AACzB,UAAI,CAAC,IAAI,MAAI,UAAI,CAAA;AACjB,UAAA,CAAA,IAAO,IAAK;AACb,aAAA,MAAA,UAAA,KAAA,GAAA;IACF;EAED;;;;;;;;;;;;;SAaE,OAAU,KAAK,GAAC,GAAA,GAAA,GAAU,GAAG;AAC7B,UAAK,MAAM,MAAK,YAAY,GAAG,GAAG,CAAC;AACnC,UAAK,MAAM,MAAK,YAAK,GAAU,GAAE,CAAA;AAEjC,UAAA,MAAW,KAAA,MAAA,YAAA,MAAA,YAAA,IAAA,KAAA,IAAA,EAAA;AACZ,WAAA;EAED;;;;;;;;;;;;;SAaE,QAAK,KAAW,MAAI,OAAS,IAAA;AAC7B,UAAK,UAAU,CAAC,IAAI,MAAM,CAAC;AAC3B,UAAK,UAAU,CAAC,IAAI,MAAM,CAAC;AAE3B,UAAK,UAAU,CAAC,IAAI,MAAM,CAAA;AAC1B,UAAK,UAAU,CAAC,IAAI,GAAG,CAAC;AACxB,UAAK,UAAU,CAAC,IAAI,GAAG,CAAC;AAExB,UAAK,UAAU,CAAC,IAAI,GAAC,CAAA;AACrB,UAAK,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3B,UAAK,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;AAE3B,UAAA,UAAY,CAAA,IAAA,CAAS,KAAI,CAAE;AAC5B,WAAA,MAAA,UAAA,KAAA,MAAA,SAAA,KAAA,MAAA,SAAA,CAAA;;AAGH;AAEA,KAAK,MAAM,KAAK;AAChB,KAAK,MAAI,KAAO;AAChB,KAAK,OAAA,KAAY;AACjB,KAAK,YAAA,KAAgB;AACrB,KAAK,gBAAc,KAAA;AACnB,KAAK,SAAA,KAAc;AACnB,KAAK,cAAc,KAAA;AACnB,KAAK,SAAS,KAAG;AAEjB,KAAA,YAAA,KAAA;AAGA,KAAA,UAAA,MAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;AAChB,KAAK,MAAM,KAAG;AACd,KAAK,SAAM,KAAK;;;;ACriChB,IAAAC,iBAAA;AAIE,IAAA,QAAA,MAAA,eAAA,aAAA;;;EAIA,OAAO,YAAY,IAAI,aAAa,CAAC;EAErC,OAAA,YAAA,IAAA,aAAA,CAAA;;;;iBAIS,QAAO;YACZ,OAAM,QAAA;WACJ;AAAe,cAAM,MAAA;AACvB;WACE;AAAmD,cAAM,OAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAC3D;WACE,GAAA;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAO,MAAM,UAAU;AACxB,gBAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,CAAA,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACD;MACD;;AAEE,cAAM,CAAC;AACP,aAAA,CAAM,IAAA;AACT;IACF;EAED;;;;;;;;MASE,MAAA;AACD,WAAA,OAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAA;AACA,UAAA,IAAO,CAAI;AACZ,WAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,OAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,OAAA,CAAA;EAED;;;;;;;;;;;;;;;SAgBE,WAAW,IAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC9C,WAAA,IAAA,OAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EAAA;EAED;;;;;;;;;;;;;;SAeE,8BAAoB,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;AACpB,UAAM,KAAK,KAAK;AAChB,UAAM,KAAK,KAAK;AAEhB,UAAA,KAAW,KAAK;AAKjB,WAAA,IAAA,OAAA,IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAA;EAED;;;;;;;;;;SAUE,wBAAsB,KAAA,GAAA,GAAA;AACtB,UAAM,KAAK,EAAE,CAAC,IAAI;AAClB,UAAM,KAAK,EAAE,CAAC,IAAI;AAClB,UAAM,KAAK,EAAE,CAAC,IAAE;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAC,CAAA;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,QAAI,CAAC,IAAI,KAAG,KAAK,KAAK,KAAK,KAAK;AAChC,QAAA,CAAA,IAAO,CAAG,KAAC,KAAA,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,gBAAQ,KAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAA,IAAA;AACX,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASK,aAAW,KAAA,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASE,SAAK,KAAY,GAAA;AACjB,SAAK,YAAA,OAAe,WAAM,CAAS;AACnC,SAAA,eAAa,OAAA,WAAwB,CAAA;AACtC,WAAA,OAAA,wBAAA,KAAA,OAAA,WAAA,OAAA,SAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;SAQK,SAAQ,KAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;;;;;;SAiBK,IAAG,KAAM,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASK,QAAQ,KAAG,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAAA;;;;;;;;;SAWI,QAAQ,KAAG,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,QAAQ,KAAG,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAAA;;;;;;;;;SAWI,QAAQ,KAAG,GAAA;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,eAAgB,KAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,CAAC,EAAE,CAAC;AACf,UAAM,KAAK,CAAC,EAAE,CAAC;AACf,UAAM,KAAK,CAAC,EAAE,CAAC;AACf,UAAM,KAAI,EAAE,CAAA;AACZ,QAAI,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AACnD,QAAI,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AACnD,QAAA,CAAA,KAAU,KAAC,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,UAAa,KAAI,GAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC,IAAI;AACnB,UAAM,MAAM,EAAE,CAAC,IAAI;AACnB,UAAM,MAAM,EAAE,CAAC,IAAE;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAC,CAAA;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC7C,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC7C,QAAI,CAAC,IAAI,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAC3C,QAAA,CAAA,IAAO,CAAG,MAAC,MAAA,MAAA,MAAA,MAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,QAAW,KAAI,GAAA,KAAA;AACf,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAA,KAAQ,EAAG,CAAC;AACZ,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAG,CAAE;AACd,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAK,MAAO,KAAgB,KAAiB,KAAK,KAAA,KAAA,KAAA,KAAA;AAClD,SAAK,QAAO,KAAA,GAAA,GAAA;AACZ,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAA;AACT,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAA,CAAA,IAAO,MAAI,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,QAAW,KAAI,GAAA,KAAA;AACf,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAA,KAAQ,EAAG,CAAC;AACZ,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAG,CAAE;AACd,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAK,MAAO,KAAgB,KAAiB,KAAK,KAAA,KAAA,KAAA,KAAA;AAClD,SAAK,QAAO,KAAA,GAAA,GAAA;AACZ,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAA;AACT,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAA,CAAA,IAAO,MAAI,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,QAAW,KAAI,GAAA,KAAA;AACf,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAI,KAAK,CAAC,EAAE,CAAC;AACb,QAAA,KAAQ,EAAG,CAAC;AACZ,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAG,EAAG,CAAE;AACd,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,UAAK,MAAO,KAAgB,KAAiB,KAAK,KAAA,KAAA,KAAA,KAAA;AAClD,SAAK,QAAO,KAAA,GAAA,GAAA;AACZ,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAC;AACV,SAAK,IAAI,CAAA;AACT,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAA,CAAA,IAAO,MAAI,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,mBAAgB,KAAA,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AAEZ,QAAI,KAAK,EAAE,CAAA;AACX,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAE,CAAG,IAAI,KAAC,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACV,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAC,CAAA;AACN,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,oBAAgB,KAAA,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AACZ,QAAI,KAAK,EAAE,CAAC;AAEZ,QAAI,KAAK,EAAE,CAAA;AACX,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAE,CAAG,IAAI,KAAC,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACV,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAE,CAAC;AACR,SAAK,EAAC,CAAA;AACN,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,iBAAA,KAAA,GAA0B,MAAA,KAAA;QAExB,KAAA,IAAO,GAAK,IAAC,4BAAa;AAC3B,aAAA,OAAA,KAAA,KAAA,CAAA;IACD;AAEA,UAAM,aAAU,KAAA,KAAA,KAAA,CAAA,IAAA,KAAA,CAAA,IAAA,KAAA,CAAA,IAAA,KAAA,CAAA,IAAA,KAAA,CAAA,IAAA,KAAA,CAAA,CAAA;AAChB,UAAM,MAAI;AACV,UAAM,IAAE,KAAK,IAAG,GAAM;AACtB,UAAM,KAAM,IAAI,KAAK,CAAC,IAAK;AAC3B,UAAM,KAAM,IAAI,KAAK,CAAC,IAAK;AAC3B,UAAM,KAAK,IAAK,KAAI,CAAA,IAAK;AAEzB,UAAM,KAAG,KAAO,IAAC,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAA,CAAG;AACf,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAChD,QAAI,CAAC,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAEhD,QAAA,CAAA,IAAQ,MAAO,KAAC,MAAA,KAAA,MAAA,KAAA,MAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,QAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE5C,QAAA,CAAA,IAAO,KAAI,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,SAAY,KAAK,GAAA,GAAA;AACjB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,MAAM,EAAA,CAAG;AACf,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,QAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACnD,QAAI,CAAC,IAAC,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA;QACJ,CAAA,UACA,MACA,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACF,MAAA;QACJ,CAAA,UACA,MACA,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACF,MAAA;QACJ,CAAA,UACA,MACA,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACF,MAAA;QACJ,CAAA,UACA,MACA,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACN,MAAM,MACD,MAAI;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;SAUK,MAAM,KAAI,GAAI,GAAC;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;EAUA,OAAA,IAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;;;SAYE,KAAQ,KAAI,GAAI,GAAC,GAAA;AACjB,UAAI,KAAM,IAAK;QAAU,OAAM,IAAC,GAAA,CAAA,IAAA;AAE5B,UAAE,CAAG;AACT,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAC5B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAC5B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAC5B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAC5B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAC5B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAC5B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI;AAE5B,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,KAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,OAAM,KAAQ,GAAA;AACd,UAAM,QAAQ,OAAG,cAAM,CAAA;AACvB,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;AACjB,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;AACjB,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAG;AAChB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAE;AACd,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;AACjB,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;AACjB,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAG;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,UAAU,KAAE,GAAA;AACf,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;EASA,OAAA,UAAA,GAAA;AAAA,WAAA;EAAA;;;;;EAMA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;EAQA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;EAOA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;EASA,OAAA,cAAA,GAAA;AAAA,WAAA;EAAA;;;;;EAMA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASE,UAAa,KAAG,GAAK;AACrB,QAAI,YAAY,OAAI,cAAA,CAAA;QAClB,YAAY,GAAA;AAEZ,kBAAY,KAAG,KAAG,SAAU;AAC5B,YAAM,KAAK,EAAE,CAAC,IAAI;AAClB,YAAM,KAAK,EAAE,CAAC,IAAI;AAClB,YAAM,KAAK,EAAE,CAAC,IAAI;AAElB,YAAM,KAAK,EAAE,CAAC,IAAE;AAChB,YAAM,KAAK,EAAE,CAAC;AACd,YAAM,KAAK,EAAE,CAAC;AACd,YAAM,KAAK,EAAE,CAAC;AAEd,YAAM,KAAA,EAAO,CAAA;AAEb,YAAM,UAAM,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AACZ,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AAET,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,KAAK,KAAK,KAAK,WAAW;AAC/B,UAAI,CAAC,KAAK,KAAK,KAAK,WAAW;AAC/B,UAAI,CAAC,KAAK,KAAK,KAAK,WAAW;AAChC,UAAA,CAAA,KAAA,KAAA,KAAA,WAAA;IACD;AACD,WAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,SAAA,EAAA,KAAA,IAAA,CAAA;EAED;;;;;;;;;SASE,YACM,GAAM,GAAG;WACT,EAAA,CAAA,MAAS,EAAA,CAAA,KACb,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KACZ,EAAE,CAAC,MAAM,EAAE,CAAC,KAEf,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAM,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAAA,CAAA,KAC5E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAC3E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAC3E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAC3E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAC3E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAC3E,KAAK,IAAI,KAAK,EAAE,KAAK,6BAAc,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAE9E,KAAA,IAAA,KAAA,EAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;;AAGH;AAGA,MAAA,MAAA,KAAa;AAEb,MAAA,gBAAa,KAAA;AAEb,MAAA,SAAa,KAAA;AAEb,MAAA,MAAA,KAAa;AAEb,MAAA,SAAa,KAAA;AAGb,MAAA,MAAA,KAAA;;;;AC/9BA,IAAAC,iBAAA;AAIE,IAAA,OAAA,MAAA,cAAA,aAAA;;;;iBAIS,QAAO;YACZ,OAAQ,QAAA;WACN,GAAA;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAO,MAAG,UAAY;AACvB,gBAAA,CAAA,GAAA,OAAA,CAAA,CAAA,CAAA;eACC;AACD,gBAAA,GAAA,OAAA,CAAA,GAAA,CAAA;QACD;AACD;MACD;WACE,GAAA;AACA,cAAI,IAAA,OAAa,CAAA;YACf,OAAO,MAAM,UAAC;AACf,gBAAA,CAAA,GAAA,CAAA,CAAA;eACC;AACD,gBAAA,GAAA,GAAA,CAAA;QACD;AACD;MACD;;AACY,cAAM,CAAA;AACnB;IACF;EAED;;;;;;;;;;EAYA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;EAQA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;EAKA,IAAI,IAAE;AAAA,WAAiB,KAAO,CAAA;EAAG;EAEjC,IAAA,EAAA,OAAA;AAAA,SAAA,CAAA,IAAA;EAAA;;;;;;;;MAQE,YAAY;AACb,WAAA,KAAA,MAAA,KAAA,CAAA,GAAA,KAAA,CAAA,CAAA;EACD;;;;EAKA,IAAA,MAAA;AAAA,WAAA,KAAA;EAAA;;;;;MAKE,mBAAkB;AAClB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAA,IAAQ,KAAO,CAAC;AACjB,WAAA,IAAA,IAAA,IAAA;EACD;;;;EAKA,IAAA,SAAA;AAAA,WAAA,KAAA;EAAA;;;;;MAKE,MAAA;AACD,WAAA,MAAA,IAAA,IAAA;EAED;;;;;;;;;;OAWE,GAAI;AACJ,SAAA,IAAO,CAAA;AACR,WAAA;EAED;;;;;;;;;MAUE,GAAA;AACA,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;;;;;WAQO,GAAE;AACP,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EAED;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;WAQO,GAAE;AACP,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EACD;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,GAAM;AACN,SAAK,CAAC,KAAK,EAAE,CAAC;AACd,SAAA,CAAA,KAAW,EAAC,CAAA;AACb,WAAA;EACD;;;;EAKA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;QAQE,GAAK;AACL,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;;;cASS,GAAI,OAAO;AAClB,SAAK,CAAC,KAAK,EAAE,CAAC,IAAI;AAClB,SAAA,CAAA,KAAW,EAAC,CAAA,IAAA;AACb,WAAA;EAED;;;;;;;;WAQE,GAAO;AACR,WAAA,MAAA,SAAA,MAAA,CAAA;EACD;;;;EAKA,KAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;kBAQc,GAAA;AACb,WAAA,MAAA,gBAAA,MAAA,CAAA;EACD;;;;EAKA,QAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;WAOO;AACL,SAAK,CAAC,KAAK;AACX,SAAA,CAAA,KAAW;AACZ,WAAA;EAED;;;;;;;WAOO;AACL,SAAK,CAAC,IAAI,IAAM,KAAK,CAAC;AACtB,SAAA,CAAA,IAAO,IAAK,KAAA,CAAA;AACb,WAAA;EAED;;;;;;;QAOE;AACA,SAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC1B,SAAA,CAAA,IAAO,KAAK,IAAA,KAAA,CAAA,CAAA;AACb,WAAA;EAED;;;;;;;;MAQE,GAAA;AACD,WAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;cAOS;AACR,WAAA,MAAA,UAAA,MAAA,IAAA;EAED;;;;;;;aAQS,cAAI;AACZ,WAAA,IAAA,aAAA;EAED;;;;;;;;;;SAWE,SAAW;AACZ,WAAA,IAAA,MAAA;EAED;;;;;;;;SAQE,MAAO,GAAI;AACZ,WAAA,IAAA,MAAA,CAAA;EAED;;;;;;;;;SASE,WAAW,GAAM,GAAG;AACrB,WAAA,IAAA,MAAA,GAAA,CAAA;EAED;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,CAAA,IAAO,EAAI,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAK,GAAA,GAAA;AACX,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAM,GAAC,GAAK;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA,CAAA,GAAA,CAAA;EAAA;;;;;;;;;;SAUK,SAAS,KAAK,GAAG,GAAC;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA,CAAA,GAAA,CAAA;EAAA;;;;;;;;;;SAUK,OAAO,KAAG,GAAK,GAAG;AACrB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;EAMA,OAAA,IAAA,KAAA,GAAA,GAAA;AAAA,WAAA,CAAA,GAAA,CAAA;EAAA;;;;;;;;;SASK,KAAG,KAAO,GAAC;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,QAAA,CAAA,IAAO,KAAI,KAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,MAAM,KAAK,GAAA;AACd,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAA,CAAA,IAAO,KAAI,MAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAG,GAAK,GAAI;AAClB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,IAAG,KAAG,GAAK,GAAI;AAClB,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,MAAM,KAAK,GAAA;AACd,QAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,QAAA,CAAA,IAAO,KAAI,MAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUK,MAAM,KAAI,GAAI,GAAC;AAClB,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWK,YAAU,KAAO,GAAG,GAAA,OAAM;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACvB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,SAAY,GAAA,GAAM;AACnB,WAAA,KAAA,MAAA,EAAA,CAAA,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;EAED;;;;;EAMA,OAAA,KAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASE,gBAAmB,GAAG,GAAA;AACtB,UAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAA,IAAQ,EAAI,CAAA,IAAI,EAAG,CAAC;AACrB,WAAA,IAAA,IAAA,IAAA;EAED;;;;;EAMA,OAAA,QAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,UAAa,GAAA;AACb,QAAI,IAAI,EAAE,CAAC;AACX,QAAA,IAAO,EAAA,CAAI;AACZ,WAAA,KAAA,KAAA,IAAA,IAAA,IAAA,CAAA;EACD;;;;;EAKA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;;EAUA,OAAA,OAAA,GAAA;AAAA,WAAA;EAAA;;;;;;EAOA,OAAA,IAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;SAQE,cAAe,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAA,IAAQ,EAAI,CAAA;AACb,WAAA,IAAA,IAAA,IAAA;EACD;;;;EAKA,OAAA,OAAA,GAAA,GAAA;AAAA,WAAA;EAAA;;;;;;;;;SASK,OAAO,KAAK,GAAA;AACf,QAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,QAAA,CAAA,IAAO,CAAG,EAAC,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,QAAM,KAAO,GAAG;AACnB,QAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,QAAA,CAAA,IAAO,IAAI,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASK,IAAG,KAAG,GAAK;AACd,QAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;AACtB,QAAA,CAAA,IAAO,KAAI,IAAA,EAAA,CAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,UAAa,KAAE,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAI,IAAM,EAAC,CAAA;AACX,QAAI,MAAM,IAAI,IAAA,IAAA;QACZ,MAAA,GAAA;AAED,YAAA,IAAA,KAAA,KAAA,GAAA;IACD;AACA,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,IAAO,GAAG,GAAC;AACZ,WAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;;;;;SAYE,MAAO,KAAO,GAAG,GAAG;AACpB,UAAM,IAAG,EAAG,CAAC,IAAE,EAAI,CAAC,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA;AACpB,QAAI,CAAC,IAAI,IAAE,CAAA,IAAA;AACX,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;;;SAWE,KAAQ,KAAK,GAAG,GAAA,GAAA;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAA,CAAG;AACd,QAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,QAAA,CAAA,IAAO,KAAI,KAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,cAAe,KAAA,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,eAAe,KAAA,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;SAUE,cAAe,KAAA,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,cAAe,KAAA,GAAA,GAAA;AACf,UAAM,IAAI,EAAE,CAAC;AACb,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,QAAA,CAAA,IAAO,EAAI,CAAA,IAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA;AACZ,WAAA;EAED;;;;;;;;;;;SAWE,OAAA,KAAA,GAAA,GAAA,KAAA;AAEA,UAAM,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AACrB,UAAM,KAAI,EAAG,CAAA,IAAK,EAAA,CAAG;AACrB,UAAM,OAAO,KAAK,IAAI,GAAG;AAEzB,UAAA,OAAA,KAAA,IAAA,GAAA;AAEA,QAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AAEpC,QAAA,CAAA,IAAO,KAAI,OAAA,KAAA,OAAA,EAAA,CAAA;AACZ,WAAA;EAED;;;;;;;;;SASE,MAAQ,GAAI,GAAG;AACf,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAA,KAAA,EAAA,CAAA;AAEA,UAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAsC,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAA;AAEtC,UAAA,SAAA,QAAA,KAAA,KAAA,KAAA,MAAA;AAED,WAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,QAAA,EAAA,GAAA,CAAA,CAAA;EAED;;;;;;;;SAQK,KAAG,KAAO;AACb,QAAI,CAAC,IAAI;AACT,QAAA,CAAA,IAAO;AACR,WAAA;EAED;;;;;;;;;SASE,YAAW,GAAO,GAAE;AACrB,WAAA,EAAA,CAAA,MAAA,EAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,CAAA;EAED;;;;;;;;;SASE,OAAQ,GAAK,GAAG;AAChB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAA,KACE,EAAK,CAAA;WACD,KAAK,IAAE,KAAM,EAAA,KAAI,6BAAkB,KAAK,IAAG,GAAM,KAAK,IAAG,EAAE,GAAI,KAAK,IAAI,EAC5E,CAAA,KACH,KAAA,IAAA,KAAA,EAAA,KAAA,6BAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA;EAED;;;;;;;;SAQE,IAAO,GAAA;AACR,WAAA,QAAA,EAAA,KAAA,IAAA,CAAA;EACF;AAED;AAEA,KAAK,UAAU,MAAM,KAAK,UAAU;AACpC,KAAK,UAAU,MAAM,KAAK,UAAU;AACpC,KAAK,UAAU,MAAI,KAAO,UAAU;AACpC,KAAK,UAAU,OAAO,KAAG,UAAK;AAE9B,KAAA,UAAA,UAAA,KAAA,UAAkC;AAElC,KAAK,MAAM,KAAK;AAChB,KAAK,MAAM,KAAK;AAChB,KAAK,MAAI,KAAO;AAChB,KAAK,OAAO,KAAG;AACf,KAAK,UAAS,KAAK;AACnB,KAAK,SAAM,KAAK;AAChB,KAAK,MAAM,KAAG;AACd,KAAK,SAAM,KAAK;;",
  "names": ["import_common", "import_common", "import_common", "import_common", "import_common", "import_common", "import_common", "import_common"]
}
